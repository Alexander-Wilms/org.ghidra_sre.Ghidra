From 1ca6679b69835648df709bb165fb16f81d5296b6 Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Fri, 25 Mar 2022 11:13:53 -0700
Subject: [PATCH 01/25] WebAssembly support.

Merged from https://github.com/nneonneo/ghidra-wasm-plugin/.

Closes #2937.
---
 Ghidra/Processors/WebAssembly/Module.manifest |    0
 Ghidra/Processors/WebAssembly/build.gradle    |   26 +
 .../WebAssembly/certification.manifest        |   13 +
 .../WebAssembly/data/languages/BasicOps.sinc  |  514 ++++++
 .../WebAssembly/data/languages/Leb128.sinc    |   60 +
 .../data/languages/Leb128_u32.sinc            |   30 +
 .../languages/WebAssembly-pos-stack.cspec     | 1586 +++++++++++++++++
 .../data/languages/WebAssembly.cspec          |   52 +
 .../data/languages/WebAssembly.dwarf          |    6 +
 .../data/languages/WebAssembly.ldefs          |   18 +
 .../data/languages/WebAssembly.opinion        |    5 +
 .../data/languages/WebAssembly.pspec          |   16 +
 .../data/languages/WebAssembly.sinc           |  426 +++++
 .../data/languages/WebAssembly.slaspec        | 1276 +++++++++++++
 .../ghidra_scripts/analyze_dyncalls.py        |  117 ++
 .../src/main/java/wasm/WasmLoader.java        |  703 ++++++++
 .../wasm/analysis/ValidationException.java    |   32 +
 .../main/java/wasm/analysis/WasmAnalysis.java |  156 ++
 .../java/wasm/analysis/WasmDWARFAnalyzer.java |   35 +
 .../java/wasm/analysis/WasmFuncSignature.java |   74 +
 .../wasm/analysis/WasmFunctionAnalysis.java   | 1097 ++++++++++++
 .../java/wasm/analysis/WasmPreAnalyzer.java   |  189 ++
 .../wasm/analysis/WasmSignatureAnalyzer.java  |  118 ++
 .../java/wasm/format/StructureBuilder.java    |  135 ++
 .../main/java/wasm/format/WasmConstants.java  |   21 +
 .../src/main/java/wasm/format/WasmEnums.java  |  101 ++
 .../src/main/java/wasm/format/WasmHeader.java |   54 +
 .../src/main/java/wasm/format/WasmModule.java |  273 +++
 .../wasm/format/sections/WasmCodeSection.java |   58 +
 .../format/sections/WasmCustomSection.java    |   64 +
 .../wasm/format/sections/WasmDataSection.java |   58 +
 .../format/sections/WasmElementSection.java   |   58 +
 .../format/sections/WasmExportSection.java    |   77 +
 .../format/sections/WasmFunctionSection.java  |   60 +
 .../format/sections/WasmGlobalSection.java    |   58 +
 .../format/sections/WasmImportSection.java    |   68 +
 .../sections/WasmLinearMemorySection.java     |   58 +
 .../wasm/format/sections/WasmNameSection.java |   97 +
 .../wasm/format/sections/WasmSection.java     |  123 ++
 .../format/sections/WasmStartSection.java     |   47 +
 .../format/sections/WasmTableSection.java     |   58 +
 .../wasm/format/sections/WasmTypeSection.java |   61 +
 .../sections/WasmUnknownCustomSection.java    |   52 +
 .../structures/ConstantExpression.java        |  201 +++
 .../sections/structures/WasmCodeEntry.java    |   87 +
 .../sections/structures/WasmDataSegment.java  |  103 ++
 .../structures/WasmElementSegment.java        |  214 +++
 .../sections/structures/WasmExportEntry.java  |   60 +
 .../sections/structures/WasmFuncType.java     |   81 +
 .../sections/structures/WasmGlobalEntry.java  |   62 +
 .../sections/structures/WasmGlobalType.java   |   52 +
 .../sections/structures/WasmImportEntry.java  |  137 ++
 .../sections/structures/WasmLocalEntry.java   |   52 +
 .../format/sections/structures/WasmName.java  |   53 +
 .../structures/WasmNameIndirectMap.java       |   71 +
 .../structures/WasmNameLocalSubsection.java   |   46 +
 .../sections/structures/WasmNameMap.java      |   73 +
 .../structures/WasmNameMapSubsection.java     |   50 +
 .../structures/WasmNameModuleSubsection.java  |   46 +
 .../structures/WasmNameSubsection.java        |  123 ++
 .../structures/WasmNameUnknownSubsection.java |   41 +
 .../structures/WasmResizableLimits.java       |   62 +
 .../sections/structures/WasmTableType.java    |   56 +
 .../wasm/pcode/InjectPayloadWasmEntry.java    |   61 +
 .../java/wasm/pcode/InjectPayloadWasmPop.java |   68 +
 .../wasm/pcode/InjectPayloadWasmPush.java     |   67 +
 .../wasm/pcode/PcodeInjectLibraryWasm.java    |   51 +
 .../main/java/wasm/pcode/PcodeOpEmitter.java  |   70 +
 68 files changed, 10117 insertions(+)
 create mode 100644 Ghidra/Processors/WebAssembly/Module.manifest
 create mode 100644 Ghidra/Processors/WebAssembly/build.gradle
 create mode 100644 Ghidra/Processors/WebAssembly/certification.manifest
 create mode 100644 Ghidra/Processors/WebAssembly/data/languages/BasicOps.sinc
 create mode 100644 Ghidra/Processors/WebAssembly/data/languages/Leb128.sinc
 create mode 100644 Ghidra/Processors/WebAssembly/data/languages/Leb128_u32.sinc
 create mode 100644 Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec
 create mode 100644 Ghidra/Processors/WebAssembly/data/languages/WebAssembly.cspec
 create mode 100644 Ghidra/Processors/WebAssembly/data/languages/WebAssembly.dwarf
 create mode 100644 Ghidra/Processors/WebAssembly/data/languages/WebAssembly.ldefs
 create mode 100644 Ghidra/Processors/WebAssembly/data/languages/WebAssembly.opinion
 create mode 100644 Ghidra/Processors/WebAssembly/data/languages/WebAssembly.pspec
 create mode 100644 Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc
 create mode 100644 Ghidra/Processors/WebAssembly/data/languages/WebAssembly.slaspec
 create mode 100644 Ghidra/Processors/WebAssembly/ghidra_scripts/analyze_dyncalls.py
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/ValidationException.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmAnalysis.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmDWARFAnalyzer.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFuncSignature.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmPreAnalyzer.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmSignatureAnalyzer.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/StructureBuilder.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmConstants.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmEnums.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmHeader.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmModule.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCodeSection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCustomSection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmDataSection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmElementSection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmExportSection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmFunctionSection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmGlobalSection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmImportSection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmLinearMemorySection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmNameSection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmSection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmStartSection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmTableSection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmTypeSection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmUnknownCustomSection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmCodeEntry.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmDataSegment.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmElementSegment.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmExportEntry.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmFuncType.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmGlobalEntry.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmGlobalType.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmImportEntry.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmLocalEntry.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmName.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameIndirectMap.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameLocalSubsection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameMap.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameMapSubsection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameModuleSubsection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameSubsection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameUnknownSubsection.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmResizableLimits.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmTableType.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmEntry.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPop.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPush.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeInjectLibraryWasm.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeOpEmitter.java

diff --git a/Ghidra/Processors/WebAssembly/Module.manifest b/Ghidra/Processors/WebAssembly/Module.manifest
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/Ghidra/Processors/WebAssembly/build.gradle b/Ghidra/Processors/WebAssembly/build.gradle
new file mode 100644
index 000000000000..9603c522224c
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/build.gradle
@@ -0,0 +1,26 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+apply from: "$rootProject.projectDir/gradle/distributableGhidraModule.gradle"
+apply from: "$rootProject.projectDir/gradle/javaProject.gradle"
+apply from: "$rootProject.projectDir/gradle/processorProject.gradle"
+apply from: "$rootProject.projectDir/gradle/jacocoProject.gradle"
+apply from: "$rootProject.projectDir/gradle/javaTestProject.gradle"
+apply plugin: 'eclipse'
+eclipse.project.name = 'Processors WebAssembly'
+
+dependencies {
+	api project(':Base')
+}
diff --git a/Ghidra/Processors/WebAssembly/certification.manifest b/Ghidra/Processors/WebAssembly/certification.manifest
new file mode 100644
index 000000000000..a167e968a89a
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/certification.manifest
@@ -0,0 +1,13 @@
+##VERSION: 2.0
+Module.manifest||GHIDRA||||END|
+data/languages/BasicOps.sinc||GHIDRA||||END|
+data/languages/Leb128.sinc||GHIDRA||||END|
+data/languages/Leb128_u32.sinc||GHIDRA||||END|
+data/languages/WebAssembly-pos-stack.cspec||GHIDRA||||END|
+data/languages/WebAssembly.cspec||GHIDRA||||END|
+data/languages/WebAssembly.dwarf||GHIDRA||||END|
+data/languages/WebAssembly.ldefs||GHIDRA||||END|
+data/languages/WebAssembly.opinion||GHIDRA||||END|
+data/languages/WebAssembly.pspec||GHIDRA||||END|
+data/languages/WebAssembly.sinc||GHIDRA||||END|
+data/languages/WebAssembly.slaspec||GHIDRA||||END|
diff --git a/Ghidra/Processors/WebAssembly/data/languages/BasicOps.sinc b/Ghidra/Processors/WebAssembly/data/languages/BasicOps.sinc
new file mode 100644
index 000000000000..ff1a7a55f124
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/data/languages/BasicOps.sinc
@@ -0,0 +1,514 @@
+## Memory Instructions
+memalign: "align="^ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+memoffset: "offset="^ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+loadaddr: memalign memoffset is memalign; memoffset; sp1_32 {
+	addr:4 = memoffset:4 + sp1_32;
+	export addr;
+}
+
+storeaddr: memalign memoffset is memalign; memoffset; sp2_32 {
+	addr:4 = memoffset:4 + sp2_32;
+	export addr;
+}
+
+:i32.load loadaddr is opc=0x28; loadaddr; sp1_32; ctx_is_directive=0 {
+	sp1_32 = *:4 loadaddr;
+}
+:i64.load loadaddr is opc=0x29; loadaddr; sp1_64; ctx_is_directive=0 {
+	sp1_64 = *:8 loadaddr;
+}
+:f32.load loadaddr is opc=0x2A; loadaddr; sp1_32; ctx_is_directive=0 {
+	sp1_32 = *:4 loadaddr;
+}
+:f64.load loadaddr is opc=0x2B; loadaddr; sp1_64; ctx_is_directive=0 {
+	sp1_64 = *:8 loadaddr;
+}
+:i32.load8_s loadaddr is opc=0x2C; loadaddr; sp1_32; ctx_is_directive=0 {
+	sp1_32 = sext(*:1 loadaddr);
+}
+:i32.load8_u loadaddr is opc=0x2D; loadaddr; sp1_32; ctx_is_directive=0 {
+	sp1_32 = zext(*:1 loadaddr);
+}
+:i32.load16_s loadaddr is opc=0x2E; loadaddr; sp1_32; ctx_is_directive=0 {
+	sp1_32 = sext(*:2 loadaddr);
+}
+:i32.load16_u loadaddr is opc=0x2F; loadaddr; sp1_32; ctx_is_directive=0 {
+	sp1_32 = zext(*:2 loadaddr);
+}
+:i64.load8_s loadaddr is opc=0x30; loadaddr; sp1_64; ctx_is_directive=0 {
+	sp1_64 = sext(*:1 loadaddr);
+}
+:i64.load8_u loadaddr is opc=0x31; loadaddr; sp1_64; ctx_is_directive=0 {
+	sp1_64 = zext(*:1 loadaddr);
+}
+:i64.load16_s loadaddr is opc=0x32; loadaddr; sp1_64; ctx_is_directive=0 {
+	sp1_64 = sext(*:2 loadaddr);
+}
+:i64.load16_u loadaddr is opc=0x33; loadaddr; sp1_64; ctx_is_directive=0 {
+	sp1_64 = zext(*:2 loadaddr);
+}
+:i64.load32_s loadaddr is opc=0x34; loadaddr; sp1_64; ctx_is_directive=0 {
+	sp1_64 = sext(*:4 loadaddr);
+}
+:i64.load32_u loadaddr is opc=0x35; loadaddr; sp1_64; ctx_is_directive=0 {
+	sp1_64 = zext(*:4 loadaddr);
+}
+
+:i32.store storeaddr is opc=0x36; storeaddr; sp1_32; ctx_is_directive=0 {
+	*:4 storeaddr = sp1_32;
+}
+:i64.store storeaddr is opc=0x37; storeaddr; sp1_64; ctx_is_directive=0 {
+	*:8 storeaddr = sp1_64;
+}
+:f32.store storeaddr is opc=0x38; storeaddr; sp1_32; ctx_is_directive=0 {
+	*:4 storeaddr = sp1_32;
+}
+:f64.store storeaddr is opc=0x39; storeaddr; sp1_64; ctx_is_directive=0 {
+	*:8 storeaddr = sp1_64;
+}
+:i32.store8 storeaddr is opc=0x3A; storeaddr; sp1_32; ctx_is_directive=0 {
+	*:1 storeaddr = sp1_32:1;
+}
+:i32.store16 storeaddr is opc=0x3B; storeaddr; sp1_32; ctx_is_directive=0 {
+	*:2 storeaddr = sp1_32:2;
+}
+:i64.store8 storeaddr is opc=0x3C; storeaddr; sp1_64; ctx_is_directive=0 {
+	*:1 storeaddr = sp1_64:1;
+}
+:i64.store16 storeaddr is opc=0x3D; storeaddr; sp1_64; ctx_is_directive=0 {
+	*:2 storeaddr = sp1_64:2;
+}
+:i64.store32 storeaddr is opc=0x3E; storeaddr; sp1_64; ctx_is_directive=0 {
+	*:4 storeaddr = sp1_64:4;
+}
+
+## Numeric Instructions
+:i32.eqz  is opc=0x45; sp1_32; ctx_is_directive=0 {
+	sp1_32 = zext(sp1_32 == 0);
+}
+:i32.eq  is opc=0x46; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_32 == sp1_32);
+}
+:i32.ne  is opc=0x47; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_32 != sp1_32);
+}
+:i32.lt_s  is opc=0x48; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_32 s< sp1_32);
+}
+:i32.lt_u  is opc=0x49; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_32 < sp1_32);
+}
+:i32.gt_s  is opc=0x4A; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_32 s> sp1_32);
+}
+:i32.gt_u  is opc=0x4B; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_32 > sp1_32);
+}
+:i32.le_s  is opc=0x4C; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_32 s<= sp1_32);
+}
+:i32.le_u  is opc=0x4D; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_32 <= sp1_32);
+}
+:i32.ge_s  is opc=0x4E; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_32 s>= sp1_32);
+}
+:i32.ge_u  is opc=0x4F; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_32 >= sp1_32);
+}
+:i64.eqz  is opc=0x50; sp1_32; sp1_64; ctx_is_directive=0 {
+	sp1_32 = zext(sp1_64 == 0);
+}
+:i64.eq  is opc=0x51; sp1_64; sp2_32; sp2_64; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_64 == sp1_64);
+}
+:i64.ne  is opc=0x52; sp1_64; sp2_32; sp2_64; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_64 != sp1_64);
+}
+:i64.lt_s  is opc=0x53; sp1_64; sp2_32; sp2_64; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_64 s< sp1_64);
+}
+:i64.lt_u  is opc=0x54; sp1_64; sp2_32; sp2_64; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_64 < sp1_64);
+}
+:i64.gt_s  is opc=0x55; sp1_64; sp2_32; sp2_64; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_64 s> sp1_64);
+}
+:i64.gt_u  is opc=0x56; sp1_64; sp2_32; sp2_64; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_64 > sp1_64);
+}
+:i64.le_s  is opc=0x57; sp1_64; sp2_32; sp2_64; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_64 s<= sp1_64);
+}
+:i64.le_u  is opc=0x58; sp1_64; sp2_32; sp2_64; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_64 <= sp1_64);
+}
+:i64.ge_s  is opc=0x59; sp1_64; sp2_32; sp2_64; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_64 s>= sp1_64);
+}
+:i64.ge_u  is opc=0x5A; sp1_64; sp2_32; sp2_64; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_64 >= sp1_64);
+}
+:f32.eq  is opc=0x5B; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_32 f== sp1_32);
+}
+:f32.ne  is opc=0x5C; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_32 f!= sp1_32);
+}
+:f32.lt  is opc=0x5D; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_32 f< sp1_32);
+}
+:f32.gt  is opc=0x5E; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_32 f> sp1_32);
+}
+:f32.le  is opc=0x5F; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_32 f<= sp1_32);
+}
+:f32.ge  is opc=0x60; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_32 f>= sp1_32);
+}
+:f64.eq  is opc=0x61; sp1_64; sp2_32; sp2_64; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_64 f== sp1_64);
+}
+:f64.ne  is opc=0x62; sp1_64; sp2_32; sp2_64; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_64 f!= sp1_64);
+}
+:f64.lt  is opc=0x63; sp1_64; sp2_32; sp2_64; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_64 f< sp1_64);
+}
+:f64.gt  is opc=0x64; sp1_64; sp2_32; sp2_64; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_64 f> sp1_64);
+}
+:f64.le  is opc=0x65; sp1_64; sp2_32; sp2_64; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_64 f<= sp1_64);
+}
+:f64.ge  is opc=0x66; sp1_64; sp2_32; sp2_64; ctx_is_directive=0 {
+	sp2_32 = zext(sp2_64 f>= sp1_64);
+}
+:i32.clz  is opc=0x67; sp1_32; ctx_is_directive=0 {
+	sp1_32 = clz(sp1_32);
+}
+:i32.ctz  is opc=0x68; sp1_32; ctx_is_directive=0 {
+	sp1_32 = ctz(sp1_32);
+}
+:i32.popcnt  is opc=0x69; sp1_32; ctx_is_directive=0 {
+	sp1_32 = popcnt(sp1_32);
+}
+:i32.add  is opc=0x6A; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = sp2_32 + sp1_32;
+}
+:i32.sub  is opc=0x6B; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = sp2_32 - sp1_32;
+}
+:i32.mul  is opc=0x6C; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = sp2_32 * sp1_32;
+}
+:i32.div_s  is opc=0x6D; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = sp2_32 s/ sp1_32;
+}
+:i32.div_u  is opc=0x6E; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = sp2_32 / sp1_32;
+}
+:i32.rem_s  is opc=0x6F; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = sp2_32 s% sp1_32;
+}
+:i32.rem_u  is opc=0x70; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = sp2_32 % sp1_32;
+}
+:i32.and  is opc=0x71; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = sp2_32 & sp1_32;
+}
+:i32.or  is opc=0x72; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = sp2_32 | sp1_32;
+}
+:i32.xor  is opc=0x73; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = sp2_32 ^ sp1_32;
+}
+:i32.shl  is opc=0x74; sp1_32; sp2_32; ctx_is_directive=0 {
+	cnt:4 = (sp1_32 & 31);
+	sp2_32 = sp2_32 << cnt;
+}
+:i32.shr_s  is opc=0x75; sp1_32; sp2_32; ctx_is_directive=0 {
+	cnt:4 = (sp1_32 & 31);
+	sp2_32 = sp2_32 s>> cnt;
+}
+:i32.shr_u  is opc=0x76; sp1_32; sp2_32; ctx_is_directive=0 {
+	cnt:4 = (sp1_32 & 31);
+	sp2_32 = sp2_32 >> cnt;
+}
+:i32.rotl  is opc=0x77; sp1_32; sp2_32; ctx_is_directive=0 {
+	cnt:4 = (sp1_32 & 31);
+	sp2_32 = ((sp2_32 << cnt) | (sp2_32 >> (32 - cnt)));
+}
+:i32.rotr  is opc=0x78; sp1_32; sp2_32; ctx_is_directive=0 {
+	cnt:4 = (sp1_32 & 31);
+	sp2_32 = ((sp2_32 >> cnt) | (sp2_32 << (32 - cnt)));
+}
+:i64.clz  is opc=0x79; sp1_64; ctx_is_directive=0 {
+	sp1_64 = clz(sp1_64);
+}
+:i64.ctz  is opc=0x7A; sp1_64; ctx_is_directive=0 {
+	sp1_64 = ctz(sp1_64);
+}
+:i64.popcnt  is opc=0x7B; sp1_64; ctx_is_directive=0 {
+	sp1_64 = popcnt(sp1_64);
+}
+:i64.add  is opc=0x7C; sp1_64; sp2_64; ctx_is_directive=0 {
+	sp2_64 = sp2_64 + sp1_64;
+}
+:i64.sub  is opc=0x7D; sp1_64; sp2_64; ctx_is_directive=0 {
+	sp2_64 = sp2_64 - sp1_64;
+}
+:i64.mul  is opc=0x7E; sp1_64; sp2_64; ctx_is_directive=0 {
+	sp2_64 = sp2_64 * sp1_64;
+}
+:i64.div_s  is opc=0x7F; sp1_64; sp2_64; ctx_is_directive=0 {
+	sp2_64 = sp2_64 s/ sp1_64;
+}
+:i64.div_u  is opc=0x80; sp1_64; sp2_64; ctx_is_directive=0 {
+	sp2_64 = sp2_64 / sp1_64;
+}
+:i64.rem_s  is opc=0x81; sp1_64; sp2_64; ctx_is_directive=0 {
+	sp2_64 = sp2_64 s% sp1_64;
+}
+:i64.rem_u  is opc=0x82; sp1_64; sp2_64; ctx_is_directive=0 {
+	sp2_64 = sp2_64 % sp1_64;
+}
+:i64.and  is opc=0x83; sp1_64; sp2_64; ctx_is_directive=0 {
+	sp2_64 = sp2_64 & sp1_64;
+}
+:i64.or  is opc=0x84; sp1_64; sp2_64; ctx_is_directive=0 {
+	sp2_64 = sp2_64 | sp1_64;
+}
+:i64.xor  is opc=0x85; sp1_64; sp2_64; ctx_is_directive=0 {
+	sp2_64 = sp2_64 ^ sp1_64;
+}
+:i64.shl  is opc=0x86; sp1_64; sp2_64; ctx_is_directive=0 {
+	cnt:8 = (sp1_64 & 63);
+	sp2_64 = sp2_64 << cnt;
+}
+:i64.shr_s  is opc=0x87; sp1_64; sp2_64; ctx_is_directive=0 {
+	cnt:8 = (sp1_64 & 63);
+	sp2_64 = sp2_64 s>> cnt;
+}
+:i64.shr_u  is opc=0x88; sp1_64; sp2_64; ctx_is_directive=0 {
+	cnt:8 = (sp1_64 & 63);
+	sp2_64 = sp2_64 >> cnt;
+}
+:i64.rotl  is opc=0x89; sp1_64; sp2_64; ctx_is_directive=0 {
+	cnt:8 = (sp1_64 & 63);
+	sp2_64 = (sp2_64 << cnt) | (sp2_64 >> (64 - cnt));
+}
+:i64.rotr  is opc=0x8A; sp1_64; sp2_64; ctx_is_directive=0 {
+	cnt:8 = (sp1_64 & 63);
+	sp2_64 = (sp2_64 >> cnt) | (sp2_64 << (64 - cnt));
+}
+:f32.abs  is opc=0x8B; sp1_32; ctx_is_directive=0 {
+	sp1_32 = abs(sp1_32);
+}
+:f32.neg  is opc=0x8C; sp1_32; ctx_is_directive=0 {
+	sp1_32 = f- sp1_32;
+}
+:f32.ceil  is opc=0x8D; sp1_32; ctx_is_directive=0 {
+	sp1_32 = ceil(sp1_32);
+}
+:f32.floor  is opc=0x8E; sp1_32; ctx_is_directive=0 {
+	sp1_32 = floor(sp1_32);
+}
+:f32.trunc  is opc=0x8F; sp1_32; ctx_is_directive=0 {
+	sp1_32 = trunc(sp1_32);
+	sp1_32 = int2float(sp1_32);
+}
+:f32.nearest  is opc=0x90; sp1_32; ctx_is_directive=0 {
+	sp1_32 = round(sp1_32);
+}
+:f32.sqrt  is opc=0x91; sp1_32; ctx_is_directive=0 {
+	sp1_32 = sqrt(sp1_32);
+}
+:f32.add  is opc=0x92; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = sp2_32 f+ sp1_32;
+}
+:f32.sub  is opc=0x93; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = sp2_32 f- sp1_32;
+}
+:f32.mul  is opc=0x94; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = sp2_32 f* sp1_32;
+}
+:f32.div  is opc=0x95; sp1_32; sp2_32; ctx_is_directive=0 {
+	sp2_32 = sp2_32 f/ sp1_32;
+}
+:f32.min  is opc=0x96; sp1_32; sp2_32; ctx_is_directive=0 {
+	if(sp1_32 f> sp2_32) goto inst_next;
+	sp2_32 = sp1_32;
+}
+:f32.max  is opc=0x97; sp1_32; sp2_32; ctx_is_directive=0 {
+	if(sp1_32 f< sp2_32) goto inst_next;
+	sp2_32 = sp1_32;
+}
+:f32.copysign  is opc=0x98; sp1_32; sp2_32; ctx_is_directive=0 {
+	if((sp2_32 f< int2float(0:4)) == (sp1_32 f< int2float(0:4))) goto inst_next;
+	sp2_32 = f- sp2_32;
+}
+:f64.abs  is opc=0x99; sp1_64; ctx_is_directive=0 {
+	sp1_64 = abs(sp1_64);
+}
+:f64.neg  is opc=0x9A; sp1_64; ctx_is_directive=0 {
+	sp1_64 = f- sp1_64;
+}
+:f64.ceil  is opc=0x9B; sp1_64; ctx_is_directive=0 {
+	sp1_64 = ceil(sp1_64);
+}
+:f64.floor  is opc=0x9C; sp1_64; ctx_is_directive=0 {
+	sp1_64 = floor(sp1_64);
+}
+:f64.trunc  is opc=0x9D; sp1_64; ctx_is_directive=0 {
+	sp1_64 = trunc(sp1_64);
+	sp1_64 = int2float(sp1_64);
+}
+:f64.nearest  is opc=0x9E; sp1_64; ctx_is_directive=0 {
+	sp1_64 = round(sp1_64);
+}
+:f64.sqrt  is opc=0x9F; sp1_64; ctx_is_directive=0 {
+	sp1_64 = sqrt(sp1_64);
+}
+:f64.add  is opc=0xA0; sp1_64; sp2_64; ctx_is_directive=0 {
+	sp2_64 = sp2_64 f+ sp1_64;
+}
+:f64.sub  is opc=0xA1; sp1_64; sp2_64; ctx_is_directive=0 {
+	sp2_64 = sp2_64 f- sp1_64;
+}
+:f64.mul  is opc=0xA2; sp1_64; sp2_64; ctx_is_directive=0 {
+	sp2_64 = sp2_64 f* sp1_64;
+}
+:f64.div  is opc=0xA3; sp1_64; sp2_64; ctx_is_directive=0 {
+	sp2_64 = sp2_64 f/ sp1_64;
+}
+:f64.min  is opc=0xA4; sp1_64; sp2_64; ctx_is_directive=0 {
+	if(sp1_64 f> sp2_64) goto inst_next;
+	sp2_64 = sp1_64;
+}
+:f64.max  is opc=0xA5; sp1_64; sp2_64; ctx_is_directive=0 {
+	if(sp1_64 f< sp2_64) goto inst_next;
+	sp2_64 = sp1_64;
+}
+:f64.copysign  is opc=0xA6; sp1_64; sp2_64; ctx_is_directive=0 {
+	if((sp2_64 f< int2float(0:4)) == (sp1_64 f< int2float(0:4))) goto inst_next;
+	sp2_64 = f- sp2_64;
+}
+:i32.wrap_i64  is opc=0xA7; sp1_32; sp1_64; ctx_is_directive=0 {
+	sp1_32 = sp1_64:4;
+}
+:i32.trunc_f32_s  is opc=0xA8; sp1_32; ctx_is_directive=0 {
+	sp1_32 = trunc(sp1_32);
+}
+# TODO: Can we do an unsigned trunc?
+:i32.trunc_f32_u  is opc=0xA9; sp1_32; ctx_is_directive=0 {
+	sp1_32 = trunc(sp1_32);
+}
+:i32.trunc_f64_s  is opc=0xAA; sp1_32; sp1_64; ctx_is_directive=0 {
+	sp1_32 = trunc(sp1_64);
+}
+:i32.trunc_f64_u  is opc=0xAB; sp1_32; sp1_64; ctx_is_directive=0 {
+	sp1_32 = trunc(sp1_64);
+}
+:i64.extend_i32_s  is opc=0xAC; sp1_32; sp1_64; ctx_is_directive=0 {
+	sp1_64 = sext(sp1_32);
+}
+:i64.extend_i32_u  is opc=0xAD; sp1_32; sp1_64; ctx_is_directive=0 {
+	sp1_64 = zext(sp1_32);
+}
+:i64.trunc_f32_s  is opc=0xAE; sp1_32; sp1_64; ctx_is_directive=0 {
+	sp1_64 = trunc(sp1_32);
+}
+:i64.trunc_f32_u  is opc=0xAF; sp1_32; sp1_64; ctx_is_directive=0 {
+	sp1_64 = trunc(sp1_32);
+}
+:i64.trunc_f64_s  is opc=0xB0; sp1_64; ctx_is_directive=0 {
+	sp1_64 = trunc(sp1_64);
+}
+:i64.trunc_f64_u  is opc=0xB1; sp1_64; ctx_is_directive=0 {
+	sp1_64 = trunc(sp1_64);
+}
+:f32.convert_i32_s  is opc=0xB2; sp1_32; ctx_is_directive=0 {
+	sp1_32 = int2float(sp1_32);
+}
+:f32.convert_i32_u  is opc=0xB3; sp1_32; ctx_is_directive=0 {
+	sp1_32 = int2float(sp1_32);
+}
+:f32.convert_i64_s  is opc=0xB4; sp1_32; sp1_64; ctx_is_directive=0 {
+	sp1_32 = int2float(sp1_64);
+}
+:f32.convert_i64_u  is opc=0xB5; sp1_32; sp1_64; ctx_is_directive=0 {
+	sp1_32 = int2float(sp1_64);
+}
+:f32.demote_f64  is opc=0xB6; sp1_32; sp1_64; ctx_is_directive=0 {
+	sp1_32 = float2float(sp1_64);
+}
+:f64.convert_i32_s  is opc=0xB7; sp1_32; sp1_64; ctx_is_directive=0 {
+	sp1_64 = int2float(sp1_32);
+}
+:f64.convert_i32_u  is opc=0xB8; sp1_32; sp1_64; ctx_is_directive=0 {
+	sp1_64 = int2float(sp1_32);
+}
+:f64.convert_i64_s  is opc=0xB9; sp1_64; ctx_is_directive=0 {
+	sp1_64 = int2float(sp1_64);
+}
+:f64.convert_i64_u  is opc=0xBA; sp1_64; ctx_is_directive=0 {
+	sp1_64 = int2float(sp1_64);
+}
+:f64.promote_f32  is opc=0xBB; sp1_32; sp1_64; ctx_is_directive=0 {
+	sp1_64 = float2float(sp1_32);
+}
+# No need to do anything since our stack is untyped
+:i32.reinterpret_f32  is opc=0xBC; ctx_is_directive=0 {}
+:i64.reinterpret_f64  is opc=0xBD; ctx_is_directive=0 {}
+:f32.reinterpret_i32  is opc=0xBE; ctx_is_directive=0 {}
+:f64.reinterpret_i64  is opc=0xBF; ctx_is_directive=0 {}
+:i32.extend8_s  is opc=0xC0; sp1_32; ctx_is_directive=0 {
+	sp1_32 = sext(sp1_32:1);
+}
+:i32.extend16_s  is opc=0xC1; sp1_32; ctx_is_directive=0 {
+	sp1_32 = sext(sp1_32:2);
+}
+:i64.extend8_s  is opc=0xC2; sp1_64; ctx_is_directive=0 {
+	sp1_64 = sext(sp1_64:1);
+}
+:i64.extend16_s  is opc=0xC3; sp1_64; ctx_is_directive=0 {
+	sp1_64 = sext(sp1_64:2);
+}
+:i64.extend32_s  is opc=0xC4; sp1_64; ctx_is_directive=0 {
+	sp1_64 = sext(sp1_64:4);
+}
+
+# TODO: actually handle saturation, or express semantics via pcodeop?
+:i32.trunc_sat_f32_s  is opc=0xFC; opc2=0x00; sp1_32; ctx_is_directive=0 {
+	sp1_32 = trunc(sp1_32);
+}
+# TODO: Can we do an unsigned trunc?
+:i32.trunc_sat_f32_u  is opc=0xFC; opc2=0x01; sp1_32; ctx_is_directive=0 {
+	sp1_32 = trunc(sp1_32);
+}
+:i32.trunc_sat_f64_s  is opc=0xFC; opc2=0x02; sp1_32; sp1_64; ctx_is_directive=0 {
+	sp1_32 = trunc(sp1_64);
+}
+:i32.trunc_sat_f64_u  is opc=0xFC; opc2=0x03; sp1_32; sp1_64; ctx_is_directive=0 {
+	sp1_32 = trunc(sp1_64);
+}
+:i64.trunc_sat_f32_s  is opc=0xFC; opc2=0x04; sp1_32; sp1_64; ctx_is_directive=0 {
+	sp1_64 = trunc(sp1_32);
+}
+:i64.trunc_sat_f32_u  is opc=0xFC; opc2=0x05; sp1_32; sp1_64; ctx_is_directive=0 {
+	sp1_64 = trunc(sp1_32);
+}
+:i64.trunc_sat_f64_s  is opc=0xFC; opc2=0x06; sp1_64; ctx_is_directive=0 {
+	sp1_64 = trunc(sp1_64);
+}
+:i64.trunc_sat_f64_u  is opc=0xFC; opc2=0x07; sp1_64; ctx_is_directive=0 {
+	sp1_64 = trunc(sp1_64);
+}
diff --git a/Ghidra/Processors/WebAssembly/data/languages/Leb128.sinc b/Ghidra/Processors/WebAssembly/data/languages/Leb128.sinc
new file mode 100644
index 000000000000..9ee63b9d6997
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/data/languages/Leb128.sinc
@@ -0,0 +1,60 @@
+ULeb128: val is topbit = 0 & v0 
+	[ val = 0 | v0 ; ]
+{ export *[const]:8 val; }
+ULeb128: val is topbit = 1 & v0; topbit = 0 & v1 
+	[ val = 0 | v0 | ( v1 << 7 ) ; ]
+{ export *[const]:8 val; }
+ULeb128: val is topbit = 1 & v0; topbit = 1 & v1; topbit = 0 & v2 
+	[ val = 0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) ; ]
+{ export *[const]:8 val; }
+ULeb128: val is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 0 & v3 
+	[ val = 0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) ; ]
+{ export *[const]:8 val; }
+ULeb128: val is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 1 & v3; topbit = 0 & v4 
+	[ val = 0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) | ( v4 << 28 ) ; ]
+{ export *[const]:8 val; }
+ULeb128: val is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 1 & v3; topbit = 1 & v4; topbit = 0 & v5 
+	[ val = 0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) | ( v4 << 28 ) | ( v5 << 35 ) ; ]
+{ export *[const]:8 val; }
+ULeb128: val is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 1 & v3; topbit = 1 & v4; topbit = 1 & v5; topbit = 0 & v6 
+	[ val = 0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) | ( v4 << 28 ) | ( v5 << 35 ) | ( v6 << 42 ) ; ]
+{ export *[const]:8 val; }
+ULeb128: val is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 1 & v3; topbit = 1 & v4; topbit = 1 & v5; topbit = 1 & v6; topbit = 0 & v7 
+	[ val = 0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) | ( v4 << 28 ) | ( v5 << 35 ) | ( v6 << 42 ) | ( v7 << 49 ) ; ]
+{ export *[const]:8 val; }
+ULeb128: val is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 1 & v3; topbit = 1 & v4; topbit = 1 & v5; topbit = 1 & v6; topbit = 1 & v7; topbit = 0 & v8 
+	[ val = 0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) | ( v4 << 28 ) | ( v5 << 35 ) | ( v6 << 42 ) | ( v7 << 49 ) | ( v8 << 56 ) ; ]
+{ export *[const]:8 val; }
+ULeb128: val is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 1 & v3; topbit = 1 & v4; topbit = 1 & v5; topbit = 1 & v6; topbit = 1 & v7; topbit = 1 & v8; topbit = 0 & v9 
+	[ val = 0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) | ( v4 << 28 ) | ( v5 << 35 ) | ( v6 << 42 ) | ( v7 << 49 ) | ( v8 << 56 ) | ( v9 << 63 ) ; ]
+{ export *[const]:8 val; }
+SLeb128: val is topbit = 0 & v0 
+	[ val = ((0 | v0 ) ^ (1 << 6)) - (1 << 6); ]
+{ export *[const]:8 val; }
+SLeb128: val is topbit = 1 & v0; topbit = 0 & v1 
+	[ val = ((0 | v0 | ( v1 << 7 ) ) ^ (1 << 13)) - (1 << 13); ]
+{ export *[const]:8 val; }
+SLeb128: val is topbit = 1 & v0; topbit = 1 & v1; topbit = 0 & v2 
+	[ val = ((0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) ) ^ (1 << 20)) - (1 << 20); ]
+{ export *[const]:8 val; }
+SLeb128: val is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 0 & v3 
+	[ val = ((0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) ) ^ (1 << 27)) - (1 << 27); ]
+{ export *[const]:8 val; }
+SLeb128: val is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 1 & v3; topbit = 0 & v4 
+	[ val = ((0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) | ( v4 << 28 ) ) ^ (1 << 34)) - (1 << 34); ]
+{ export *[const]:8 val; }
+SLeb128: val is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 1 & v3; topbit = 1 & v4; topbit = 0 & v5 
+	[ val = ((0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) | ( v4 << 28 ) | ( v5 << 35 ) ) ^ (1 << 41)) - (1 << 41); ]
+{ export *[const]:8 val; }
+SLeb128: val is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 1 & v3; topbit = 1 & v4; topbit = 1 & v5; topbit = 0 & v6 
+	[ val = ((0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) | ( v4 << 28 ) | ( v5 << 35 ) | ( v6 << 42 ) ) ^ (1 << 48)) - (1 << 48); ]
+{ export *[const]:8 val; }
+SLeb128: val is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 1 & v3; topbit = 1 & v4; topbit = 1 & v5; topbit = 1 & v6; topbit = 0 & v7 
+	[ val = ((0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) | ( v4 << 28 ) | ( v5 << 35 ) | ( v6 << 42 ) | ( v7 << 49 ) ) ^ (1 << 55)) - (1 << 55); ]
+{ export *[const]:8 val; }
+SLeb128: val is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 1 & v3; topbit = 1 & v4; topbit = 1 & v5; topbit = 1 & v6; topbit = 1 & v7; topbit = 0 & v8 
+	[ val = ((0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) | ( v4 << 28 ) | ( v5 << 35 ) | ( v6 << 42 ) | ( v7 << 49 ) | ( v8 << 56 ) ) ^ (1 << 62)) - (1 << 62); ]
+{ export *[const]:8 val; }
+SLeb128: val is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 1 & v3; topbit = 1 & v4; topbit = 1 & v5; topbit = 1 & v6; topbit = 1 & v7; topbit = 1 & v8; topbit = 0 & v9 
+	[ val = ((0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) | ( v4 << 28 ) | ( v5 << 35 ) | ( v6 << 42 ) | ( v7 << 49 ) | ( v8 << 56 ) | ( v9 << 63 ) ) ^ 0) - 0; ]
+{ export *[const]:8 val; }
diff --git a/Ghidra/Processors/WebAssembly/data/languages/Leb128_u32.sinc b/Ghidra/Processors/WebAssembly/data/languages/Leb128_u32.sinc
new file mode 100644
index 000000000000..cdef9711bd39
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/data/languages/Leb128_u32.sinc
@@ -0,0 +1,30 @@
+$(SYMBOL): dest is topbit = 0 & v0 
+	[ dest = $(DEST_EXPR) (0 | v0) ; ]
+{ $(EXPORT_EXPR) }
+$(SYMBOL): dest is topbit = 1 & v0; topbit = 0 & v1 
+	[ dest = $(DEST_EXPR) (0 | v0 | ( v1 << 7 )) ; ]
+{ $(EXPORT_EXPR) }
+$(SYMBOL): dest is topbit = 1 & v0; topbit = 1 & v1; topbit = 0 & v2 
+	[ dest = $(DEST_EXPR) (0 | v0 | ( v1 << 7 ) | ( v2 << 14 )) ; ]
+{ $(EXPORT_EXPR) }
+$(SYMBOL): dest is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 0 & v3 
+	[ dest = $(DEST_EXPR) (0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 )) ; ]
+{ $(EXPORT_EXPR) }
+$(SYMBOL): dest is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 1 & v3; topbit = 0 & v4 
+	[ dest = $(DEST_EXPR) (0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) | ( v4 << 28 )) ; ]
+{ $(EXPORT_EXPR) }
+$(SYMBOL): dest is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 1 & v3; topbit = 1 & v4; topbit = 0 & v5 
+	[ dest = $(DEST_EXPR) (0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) | ( v4 << 28 ) | ( v5 << 35 )) ; ]
+{ $(EXPORT_EXPR) }
+$(SYMBOL): dest is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 1 & v3; topbit = 1 & v4; topbit = 1 & v5; topbit = 0 & v6 
+	[ dest = $(DEST_EXPR) (0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) | ( v4 << 28 ) | ( v5 << 35 ) | ( v6 << 42 )) ; ]
+{ $(EXPORT_EXPR) }
+$(SYMBOL): dest is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 1 & v3; topbit = 1 & v4; topbit = 1 & v5; topbit = 1 & v6; topbit = 0 & v7 
+	[ dest = $(DEST_EXPR) (0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) | ( v4 << 28 ) | ( v5 << 35 ) | ( v6 << 42 ) | ( v7 << 49 )) ; ]
+{ $(EXPORT_EXPR) }
+$(SYMBOL): dest is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 1 & v3; topbit = 1 & v4; topbit = 1 & v5; topbit = 1 & v6; topbit = 1 & v7; topbit = 0 & v8 
+	[ dest = $(DEST_EXPR) (0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) | ( v4 << 28 ) | ( v5 << 35 ) | ( v6 << 42 ) | ( v7 << 49 ) | ( v8 << 56 )) ; ]
+{ $(EXPORT_EXPR) }
+$(SYMBOL): dest is topbit = 1 & v0; topbit = 1 & v1; topbit = 1 & v2; topbit = 1 & v3; topbit = 1 & v4; topbit = 1 & v5; topbit = 1 & v6; topbit = 1 & v7; topbit = 1 & v8; topbit = 0 & v9 
+	[ dest = $(DEST_EXPR) (0 | v0 | ( v1 << 7 ) | ( v2 << 14 ) | ( v3 << 21 ) | ( v4 << 28 ) | ( v5 << 35 ) | ( v6 << 42 ) | ( v7 << 49 ) | ( v8 << 56 ) | ( v9 << 63 )) ; ]
+{ $(EXPORT_EXPR) }
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec
new file mode 100644
index 000000000000..fac7916a6d6a
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec
@@ -0,0 +1,1586 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!-- See Relax specification: Ghidra/Framework/SoftwareModeling/data/languages/compiler_spec.rxg -->
+
+<compiler_spec>
+   <data_organization>
+    <char_type signed="true" />
+    <char_size value="1" />
+    <short_size value="2" />
+    <pointer_size value="4"/>
+    <integer_size value = "4"/>
+    <float_size value="4" />
+    <long_size value="4" />
+    <double_size value="8" />
+  </data_organization>
+  <global>
+    <range space="global"/>
+    <range space="table"/>
+    <range space="ram"/>
+  </global>
+  <stackpointer register="SP" space="ram" growth="positive"/>
+  <default_proto>
+    <prototype name="__wasm" extrapop="0" stackshift="0">
+      <input>
+        <!-- With the positive stack direction, Ghidra will allocate
+        starting at the highest addresses in any <addr> pentry, which is
+        not what we want. Instead, fall back to manually specifying the
+        registers in the correct order. -->
+        <pentry minsize="1" maxsize="8">
+          <register name="i0q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i1q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i2q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i3q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i4q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i5q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i6q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i7q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i8q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i9q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i10q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i11q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i12q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i13q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i14q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i15q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i16q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i17q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i18q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i19q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i20q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i21q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i22q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i23q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i24q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i25q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i26q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i27q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i28q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i29q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i30q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i31q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i32q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i33q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i34q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i35q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i36q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i37q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i38q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i39q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i40q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i41q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i42q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i43q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i44q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i45q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i46q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i47q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i48q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i49q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i50q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i51q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i52q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i53q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i54q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i55q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i56q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i57q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i58q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i59q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i60q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i61q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i62q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i63q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i64q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i65q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i66q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i67q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i68q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i69q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i70q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i71q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i72q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i73q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i74q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i75q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i76q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i77q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i78q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i79q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i80q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i81q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i82q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i83q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i84q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i85q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i86q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i87q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i88q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i89q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i90q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i91q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i92q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i93q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i94q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i95q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i96q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i97q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i98q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i99q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i100q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i101q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i102q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i103q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i104q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i105q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i106q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i107q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i108q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i109q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i110q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i111q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i112q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i113q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i114q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i115q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i116q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i117q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i118q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i119q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i120q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i121q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i122q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i123q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i124q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i125q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i126q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i127q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i128q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i129q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i130q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i131q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i132q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i133q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i134q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i135q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i136q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i137q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i138q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i139q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i140q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i141q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i142q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i143q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i144q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i145q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i146q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i147q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i148q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i149q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i150q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i151q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i152q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i153q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i154q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i155q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i156q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i157q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i158q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i159q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i160q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i161q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i162q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i163q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i164q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i165q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i166q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i167q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i168q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i169q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i170q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i171q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i172q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i173q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i174q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i175q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i176q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i177q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i178q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i179q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i180q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i181q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i182q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i183q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i184q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i185q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i186q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i187q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i188q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i189q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i190q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i191q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i192q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i193q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i194q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i195q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i196q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i197q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i198q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i199q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i200q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i201q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i202q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i203q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i204q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i205q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i206q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i207q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i208q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i209q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i210q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i211q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i212q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i213q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i214q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i215q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i216q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i217q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i218q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i219q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i220q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i221q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i222q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i223q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i224q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i225q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i226q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i227q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i228q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i229q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i230q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i231q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i232q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i233q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i234q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i235q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i236q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i237q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i238q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i239q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i240q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i241q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i242q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i243q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i244q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i245q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i246q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i247q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i248q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i249q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i250q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i251q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i252q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i253q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i254q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="i255q"/>
+        </pentry>
+      </input>
+      <output>
+        <pentry minsize="1" maxsize="8">
+          <register name="o0q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o1q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o2q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o3q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o4q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o5q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o6q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o7q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o8q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o9q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o10q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o11q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o12q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o13q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o14q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o15q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o16q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o17q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o18q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o19q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o20q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o21q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o22q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o23q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o24q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o25q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o26q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o27q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o28q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o29q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o30q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o31q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o32q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o33q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o34q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o35q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o36q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o37q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o38q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o39q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o40q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o41q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o42q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o43q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o44q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o45q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o46q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o47q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o48q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o49q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o50q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o51q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o52q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o53q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o54q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o55q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o56q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o57q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o58q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o59q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o60q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o61q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o62q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o63q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o64q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o65q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o66q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o67q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o68q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o69q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o70q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o71q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o72q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o73q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o74q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o75q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o76q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o77q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o78q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o79q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o80q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o81q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o82q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o83q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o84q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o85q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o86q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o87q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o88q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o89q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o90q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o91q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o92q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o93q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o94q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o95q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o96q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o97q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o98q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o99q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o100q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o101q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o102q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o103q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o104q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o105q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o106q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o107q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o108q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o109q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o110q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o111q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o112q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o113q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o114q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o115q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o116q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o117q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o118q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o119q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o120q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o121q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o122q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o123q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o124q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o125q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o126q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o127q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o128q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o129q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o130q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o131q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o132q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o133q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o134q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o135q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o136q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o137q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o138q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o139q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o140q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o141q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o142q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o143q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o144q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o145q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o146q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o147q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o148q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o149q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o150q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o151q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o152q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o153q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o154q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o155q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o156q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o157q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o158q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o159q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o160q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o161q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o162q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o163q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o164q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o165q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o166q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o167q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o168q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o169q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o170q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o171q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o172q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o173q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o174q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o175q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o176q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o177q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o178q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o179q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o180q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o181q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o182q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o183q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o184q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o185q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o186q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o187q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o188q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o189q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o190q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o191q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o192q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o193q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o194q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o195q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o196q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o197q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o198q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o199q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o200q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o201q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o202q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o203q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o204q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o205q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o206q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o207q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o208q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o209q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o210q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o211q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o212q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o213q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o214q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o215q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o216q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o217q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o218q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o219q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o220q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o221q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o222q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o223q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o224q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o225q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o226q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o227q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o228q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o229q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o230q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o231q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o232q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o233q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o234q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o235q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o236q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o237q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o238q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o239q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o240q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o241q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o242q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o243q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o244q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o245q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o246q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o247q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o248q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o249q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o250q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o251q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o252q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o253q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o254q"/>
+        </pentry>
+        <pentry minsize="1" maxsize="8">
+          <register name="o255q"/>
+        </pentry>
+      </output>
+      <unaffected>
+        <varnode space="register" offset="0x10000000" size="0x10000000"/>
+        <varnode space="register" offset="0x50000000" size="0x10000000"/>
+        <register name="SP"/>
+      </unaffected>
+      <pcode inject="uponentry" dynamic="true" />
+    </prototype>
+  </default_proto>
+  <callotherfixup targetop="popCallOther">
+    <pcode dynamic="true">
+      <input name="regoffset" />
+    </pcode>
+  </callotherfixup>
+  <callotherfixup targetop="pushCallOther">
+    <pcode dynamic="true">
+      <input name="regoffset" />
+    </pcode>
+  </callotherfixup>
+</compiler_spec>
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.cspec b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.cspec
new file mode 100644
index 000000000000..fe7c64e2f962
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.cspec
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!-- See Relax specification: Ghidra/Framework/SoftwareModeling/data/languages/compiler_spec.rxg -->
+
+<compiler_spec>
+   <data_organization>
+    <char_type signed="true" />
+    <char_size value="1" />
+    <short_size value="2" />
+    <pointer_size value="4"/>
+    <integer_size value = "4"/>
+    <float_size value="4" />
+    <long_size value="4" />
+    <double_size value="8" />
+  </data_organization>
+  <global>
+    <range space="global"/>
+    <range space="table"/>
+    <range space="ram"/>
+  </global>
+  <stackpointer register="SP" space="ram"/>
+  <default_proto>
+    <prototype name="__wasm" extrapop="0" stackshift="0">
+      <input>
+        <pentry minsize="1" maxsize="500" align="8">
+          <addr offset="0x20000000" space="register"/>
+        </pentry>
+      </input>
+      <output>
+        <pentry minsize="1" maxsize="500" align="8">
+          <addr offset="0x30000000" space="register"/>
+        </pentry>
+      </output>
+      <unaffected>
+        <varnode space="register" offset="0x10000000" size="0x10000000"/>
+        <varnode space="register" offset="0x50000000" size="0x10000000"/>
+        <register name="SP"/>
+      </unaffected>
+      <pcode inject="uponentry" dynamic="true" />
+    </prototype>
+  </default_proto>
+  <callotherfixup targetop="popCallOther">
+    <pcode dynamic="true">
+      <input name="regoffset" />
+    </pcode>
+  </callotherfixup>
+  <callotherfixup targetop="pushCallOther">
+    <pcode dynamic="true">
+      <input name="regoffset" />
+    </pcode>
+  </callotherfixup>
+</compiler_spec>
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.dwarf b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.dwarf
new file mode 100644
index 000000000000..2df3b9b8bc2b
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.dwarf
@@ -0,0 +1,6 @@
+<dwarf>
+	<register_mappings>
+		<!-- This is a dummy file to prevent "No DWARF to Ghidra register mappings" error-->
+		<register_mapping dwarf="3000" ghidra="SP" stackpointer="true"/>
+	</register_mappings>
+</dwarf>
\ No newline at end of file
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.ldefs b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.ldefs
new file mode 100644
index 000000000000..643b47cf99ed
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.ldefs
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!-- See Relax specification: Ghidra/Framework/SoftwareModeling/data/languages/language_definitions.rxg -->
+<language_definitions>
+   <language processor="WebAssembly"
+            endian="little"
+            size="32"
+            variant="default"
+            version="1.0"
+            slafile="WebAssembly.sla"
+            processorspec="WebAssembly.pspec"
+            id="Wasm:LE:32:default">
+    <description>WebAssembly Language Module</description>
+    <compiler name="default" spec="WebAssembly.cspec" id="default"/>
+    <compiler name="pos-stack" spec="WebAssembly-pos-stack.cspec" id="pos-stack"/>
+    <external_name tool="DWARF.register.mapping.file" name="WebAssembly.dwarf"/>
+  </language> 
+</language_definitions>
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.opinion b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.opinion
new file mode 100644
index 000000000000..43d630d161bc
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.opinion
@@ -0,0 +1,5 @@
+<opinions>
+    <constraint loader="WebAssembly" compilerSpecID="default">
+        <constraint primary="1"       processor="WebAssembly"   endian="little"    size="32" />
+    </constraint>
+</opinions>
\ No newline at end of file
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.pspec b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.pspec
new file mode 100644
index 000000000000..936c88245571
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.pspec
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!-- See Relax specification: Ghidra/Framework/SoftwareModeling/data/languages/processor_spec.rxg -->
+
+<processor_spec>
+  <properties>
+    <property key="pcodeInjectLibraryClass" value="wasm.pcode.PcodeInjectLibraryWasm"/>
+  </properties>
+  <inferptrbounds>
+    <range space="ram" first="0x400" last="0xffffffff"/>
+  </inferptrbounds>
+  <programcounter register="PC"/>
+  <register_data>
+    <register name="SP" group="Alt"/>
+  </register_data>
+</processor_spec>
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc
new file mode 100644
index 000000000000..49cbb57badb8
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc
@@ -0,0 +1,426 @@
+# sleigh include file for WebAssembly language instructions
+
+define token opbyte (8)
+	opc = (0, 7)
+	opc2 = (0, 7)
+	valtype = (0, 7)
+	bytev = (0, 7)
+
+	topbit = (7, 7)
+	v0 = (0, 6)
+	v1 = (0, 6)
+	v2 = (0, 6)
+	v3 = (0, 6)
+	v4 = (0, 6)
+	v5 = (0, 6)
+	v6 = (0, 6)
+	v7 = (0, 6)
+	v8 = (0, 6)
+	v9 = (0, 6)
+;
+
+define token I32 (32)
+	f32 = (0,31)
+;
+
+define token I64 (64)
+	f64 = (0,63)
+;
+
+################################################################
+
+define pcodeop popCallOther;
+define pcodeop pushCallOther;
+
+define pcodeop halt_trap;
+define pcodeop popcnt;
+define pcodeop clz;
+define pcodeop ctz;
+# TODO: define some of these in terms of a more generic "memcpy"/"memset" operation
+define pcodeop table_init;
+define pcodeop elem_drop;
+define pcodeop table_copy;
+define pcodeop table_grow;
+define pcodeop table_size;
+define pcodeop table_fill;
+define pcodeop memory_size;
+define pcodeop memory_grow;
+define pcodeop memory_init;
+define pcodeop data_drop;
+define pcodeop memory_copy;
+define pcodeop memory_fill;
+
+@include "Leb128.sinc"
+
+# This is a silly hack because I couldn't work out how to use Leb128 itself
+# in the disassembly actions section of another constructor...
+@define SYMBOL local4
+@define DEST_EXPR "0x10000000 + 8 * "
+@define EXPORT_EXPR "export *[register]:4 dest;"
+@include "Leb128_u32.sinc"
+
+@define SYMBOL local8
+@define DEST_EXPR "0x10000000 + 8 * "
+@define EXPORT_EXPR "export *[register]:8 dest;"
+@include "Leb128_u32.sinc"
+
+@define SYMBOL global4
+@define DEST_EXPR "8 * "
+@define EXPORT_EXPR "export *[global]:4 dest;"
+@include "Leb128_u32.sinc"
+
+@define SYMBOL global8
+@define DEST_EXPR "8 * "
+@define EXPORT_EXPR "export *[global]:8 dest;"
+@include "Leb128_u32.sinc"
+
+@define SYMBOL tableref
+@define DEST_EXPR "(1<<32) * "
+@define EXPORT_EXPR "export *[table]:8 dest;"
+@include "Leb128_u32.sinc"
+
+sp0_32: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + ctx_sp - 0;] {
+	export *[register]:4 tmp_sp;
+}
+
+sp0_64: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + ctx_sp - 0;] {
+	export *[register]:8 tmp_sp;
+}
+
+sp1_32: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + ctx_sp - 8;] {
+	export *[register]:4 tmp_sp;
+}
+
+sp1_64: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + ctx_sp - 8;] {
+	export *[register]:8 tmp_sp;
+}
+
+sp2_32: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + ctx_sp - 16;] {
+	export *[register]:4 tmp_sp;
+}
+
+sp2_64: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + ctx_sp - 16;] {
+	export *[register]:8 tmp_sp;
+}
+
+sp3_32: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + ctx_sp - 24;] {
+	export *[register]:4 tmp_sp;
+}
+
+sp3_64: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + ctx_sp - 24;] {
+	export *[register]:8 tmp_sp;
+}
+
+br_target: ctx_br_target is ctx_br_target {
+	export *[ram]:4 ctx_br_target;
+}
+
+funcidx: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+typeidx: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+elemidx: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+tableidx: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+tableidx2: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+dataidx: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+memidx: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+memidx2: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+count: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+reftype: "reftype="^bytev is bytev {
+	export *[const]:1 bytev;
+}
+
+# An explicit no-op operation, to be used before
+# callother instructions to work around Ghidra issue #3390
+# (which causes incorrect decompilation if the first pcodeop
+# in a branch target instruction is a callother)
+macro nop() {
+	LR = LR;
+}
+
+macro trap() {
+<trap_loop>
+	halt_trap();
+	goto <trap_loop>;
+}
+
+macro doBranch(br_target) {
+	nop();
+	popCallOther(&t0);
+	pushCallOther(&t0);
+	goto br_target;
+}
+
+################################################################
+
+## Locals directives at the start of the function
+:.locals is count; ctx_is_directive=1; ctx_directive_type=$(DIRECTIVE_LOCALS) {
+}
+
+:.local "count="^count "type="^typeidx is count; typeidx; ctx_is_directive=1; ctx_directive_type=$(DIRECTIVE_LOCAL) {
+}
+
+## Control instructions
+:unreachable is opc=0x00; ctx_is_directive=0 {
+	trap();
+}
+
+:nop is opc=0x01; ctx_is_directive=0 {
+}
+
+:block "blocktype="^ULeb128 is opc=0x02; ULeb128; ctx_is_directive=0 {
+}
+:loop "blocktype="^ULeb128 is opc=0x03; ULeb128; ctx_is_directive=0 {
+}
+:if "blocktype="^ULeb128 is opc=0x04; ULeb128; br_target; sp1_32; ctx_is_directive=0 {
+	if(sp1_32 != 0) goto inst_next;
+	doBranch(br_target);
+}
+:else is opc=0x05; br_target; ctx_is_directive=0 {
+	doBranch(br_target);
+}
+
+:end is opc=0x0b; ctx_is_return=1; ctx_is_directive=0 {
+	nop();
+	popCallOther(&o0);
+	return [LR];
+}
+:end is opc=0x0b; ctx_is_return=0; ctx_is_directive=0 {
+}
+
+:br br_target is opc=0x0c; ULeb128; br_target; ctx_is_directive=0 {
+	doBranch(br_target);
+}
+:br_if br_target is opc=0x0d; ULeb128; br_target; sp1_32; ctx_is_directive=0 {
+	if(sp1_32 == 0) goto inst_next;
+	doBranch(br_target);
+}
+
+:.case ctx_case_index br_target is ULeb128; br_target; ctx_case_index; ctx_is_directive=1; ctx_directive_type=$(DIRECTIVE_CASE) {
+	if(BRTableInput != ctx_case_index) goto inst_next;
+	doBranch(br_target);
+}
+
+:.default br_target is ULeb128; br_target; ctx_is_directive=1; ctx_directive_type=$(DIRECTIVE_DEFAULT) {
+	doBranch(br_target);
+}
+
+:br_table is opc=0x0e; ULeb128; sp1_32; ctx_is_directive=0 {
+	BRTableInput = sp1_32;
+}
+
+:return is opc=0x0f; ctx_is_directive=0 {
+	nop();
+	popCallOther(&o0);
+	return [LR];
+}
+:call br_target is opc=0x10; ULeb128; br_target; ctx_is_directive=0 {
+	nop();
+	popCallOther(&i0);
+	call br_target;
+	pushCallOther(&o0);
+}
+:call_indirect "type="^typeidx tableref is opc=0x11; typeidx; tableref; sp1_32; ctx_is_directive=0 {
+	nop();
+	addr:8 = &tableref + sext(sp1_32) * 8;
+	val:8 = *[table] addr;
+	popCallOther(&i0);
+	call [val];
+	pushCallOther(&o0);
+}
+
+## Reference Instructions
+:ref.null reftype is opc=0xd0; reftype; sp0_64; ctx_is_directive=0 {
+	sp0_64 = 0;
+}
+:ref.is_null is opc=0xd1; sp1_32; sp1_64; ctx_is_directive=0 {
+	res:4 = zext(sp1_64 == 0);
+	sp1_32 = res;
+}
+:ref.func br_target is opc=0xd2; funcidx; br_target; sp0_64; ctx_is_directive=0 {
+	sp0_64 = &br_target;
+}
+
+## Parametric Instructions
+:drop is opc=0x1a; ctx_is_directive=0 {
+	# stack adjustment is handled by preanalyzer
+}
+
+macro select32(sp1_32, sp2_32, sp3_32) {
+	if (sp1_32 != 0) goto inst_next;
+	sp3_32 = sp2_32;
+}
+
+macro select64(sp1_32, sp2_64, sp3_64) {
+	if (sp1_32 != 0) goto inst_next;
+	sp3_64 = sp2_64;
+}
+
+:select is opc=0x1b; sp1_32; sp2_32; sp3_32; ctx_is_directive=0; ctx_is_op64=0 {
+	select32(sp1_32, sp2_32, sp3_32);
+}
+:select is opc=0x1b; sp1_32; sp2_64; sp3_64; ctx_is_directive=0; ctx_is_op64=1 {
+	select64(sp1_32, sp2_64, sp3_64);
+}
+
+# In the current version of Wasm, only one type index is permitted in select t*.
+# This is functionally identical to regular select.
+:select is opc=0x1c; opc2=0x01; valtype; sp1_32; sp2_64; sp3_64; ctx_is_directive=0 {
+	# i64, f64, funcref, externref
+	select64(sp1_32, sp2_64, sp3_64);
+}
+:select 0x7f is opc=0x1c; opc2=0x01; valtype=0x7f; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
+	# i32
+	select32(sp1_32, sp2_32, sp3_32);
+}
+:select 0x7d is opc=0x1c; opc2=0x01; valtype=0x7d; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
+	# f32
+	select32(sp1_32, sp2_32, sp3_32);
+}
+
+## Variable Instructions
+:local.get local4 is opc=0x20; local4; sp0_32; ctx_is_directive=0; ctx_is_op64=0 {
+	sp0_32 = local4;
+}
+:local.get local8 is opc=0x20; local8; sp0_64; ctx_is_directive=0; ctx_is_op64=1 {
+	sp0_64 = local8;
+}
+
+:local.set local4 is opc=0x21; local4; sp1_32; ctx_is_directive=0; ctx_is_op64=0 {
+	local4 = sp1_32;
+}
+:local.set local8 is opc=0x21; local8; sp1_64; ctx_is_directive=0; ctx_is_op64=1 {
+	local8 = sp1_64;
+}
+
+:local.tee local4 is opc=0x22; local4; sp1_32; ctx_is_directive=0; ctx_is_op64=0 {
+	local4 = sp1_32;
+}
+:local.tee local8 is opc=0x22; local8; sp1_64; ctx_is_directive=0; ctx_is_op64=1 {
+	local8 = sp1_64;
+}
+
+:global.get global4 is opc=0x23; global4; sp0_32; ctx_is_directive=0; ctx_is_op64=0; ctx_is_global_sp=0 {
+	sp0_32 = global4;
+}
+:global.get global4 is opc=0x23; global4; sp0_32; ctx_is_directive=0; ctx_is_op64=0; ctx_is_global_sp=1 {
+	sp0_32 = SP;
+}
+:global.get global8 is opc=0x23; global8; sp0_64; ctx_is_directive=0; ctx_is_op64=1 {
+	sp0_64 = global8;
+}
+
+:global.set global4 is opc=0x24; global4; sp1_32; ctx_is_directive=0; ctx_is_op64=0; ctx_is_global_sp=0 {
+	global4 = sp1_32;
+}
+:global.set global4 is opc=0x24; global4; sp1_32; ctx_is_directive=0; ctx_is_op64=0; ctx_is_global_sp=1 {
+	SP = sp1_32;
+}
+:global.set global8 is opc=0x24; global8; sp1_64; ctx_is_directive=0; ctx_is_op64=1 {
+	global8 = sp1_64;
+}
+
+## Table Instructions
+:table.get tableref is opc=0x25; tableref; sp1_32; sp1_64; ctx_is_directive=0 {
+	addr:8 = &tableref + sext(sp1_32) * 8;
+	sp1_64 = *[table] addr;
+}
+
+:table.set tableref is opc=0x26; tableref; sp1_64; sp2_32; ctx_is_directive=0 {
+	addr:8 = &tableref + sext(sp2_32) * 8;
+	*[table] addr = sp1_64;
+}
+
+:table.init elemidx tableidx is opc=0xfc; opc2=0x0c; elemidx; tableidx; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
+	table_init(elemidx:4, tableidx:4, sp1_32, sp2_32, sp3_32);
+}
+
+:elem.drop elemidx is opc=0xfc; opc2=0x0d; elemidx; ctx_is_directive=0 {
+	elem_drop(elemidx:4);
+}
+
+:table.copy tableidx tableidx2 is opc=0xfc; opc2=0x0e; tableidx; tableidx2; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
+	table_copy(tableidx:4, tableidx2:4, sp1_32, sp2_32, sp3_32);
+}
+
+:table.grow tableidx is opc=0xfc; opc2=0x0f; tableidx; sp1_32; ctx_is_directive=0 {
+	sp1_32 = table_grow(tableidx:4, sp1_32);
+}
+
+:table.size tableidx is opc=0xfc; opc2=0x10; tableidx; sp0_32; ctx_is_directive=0 {
+	sp0_32 = table_size(tableidx:4);
+}
+
+:table.fill tableidx is opc=0xfc; opc2=0x11; tableidx; sp1_32; sp2_64; sp3_32; ctx_is_directive=0 {
+	table_fill(tableidx:4, sp1_32, sp2_64, sp3_32);
+}
+
+
+## Memory Instructions
+:memory.size memidx is opc=0x3f; memidx; sp0_32; ctx_is_directive=0 {
+	sp0_32 = memory_size(memidx:4);
+}
+
+:memory.grow memidx is opc=0x40; memidx; sp1_32; ctx_is_directive=0 {
+	sp1_32 = memory_grow(memidx:4, sp1_32);
+}
+
+:memory.init dataidx memidx is opc=0xfc; opc2=0x08; dataidx; memidx; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
+	memory_init(dataidx, memidx:4, sp1_32, sp2_32, sp3_32);
+}
+
+:data.drop dataidx is opc=0xfc; opc2=0x09; dataidx; ctx_is_directive=0 {
+	data_drop(dataidx);
+}
+
+:memory.copy memidx memidx2 is opc=0xfc; opc2=0x0a; memidx; memidx2; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
+	memory_copy(memidx:4, memidx2:4, sp1_32, sp2_32, sp3_32);
+}
+
+:memory.fill memidx is opc=0xfc; opc2=0x0b; memidx; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
+	memory_fill(memidx:4, sp1_32, sp2_32, sp3_32);
+}
+
+## Numeric Instructions: const
+:i32.const SLeb128 is opc=0x41; SLeb128; sp0_32; ctx_is_directive=0 {
+	sp0_32 = SLeb128:4;
+}
+
+:i64.const SLeb128 is opc=0x42; SLeb128; sp0_64; ctx_is_directive=0 {
+	sp0_64 = SLeb128:8;
+}
+
+:f32.const f32 is opc=0x43; f32; sp0_32; ctx_is_directive=0 {
+	sp0_32 = float2float(f32:4);
+}
+
+:f64.const f64 is opc=0x44; f64; sp0_64; ctx_is_directive=0 {
+	sp0_64 = float2float(f64:8);
+}
+
+@include "BasicOps.sinc"
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.slaspec b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.slaspec
new file mode 100644
index 000000000000..61875e26f085
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.slaspec
@@ -0,0 +1,1276 @@
+# sleigh specification file for WebAssembly Processor
+
+define endian=little;
+define alignment=1;
+
+define space ram    type=ram_space      size=4 default;
+define space table   type=ram_space		 size=8;
+define space global  type=ram_space		 size=4;
+define space register type=register_space size=4;
+
+define register offset=0 size=4 [ _  PC SP LR BRTableInput];
+
+# Define context bits (if defined, size must be multiple of 4-bytes)
+define register offset=0x1000 size=16   contextreg;
+
+# Stack slots within a function
+define register offset=0x50000000 size=8 [
+      s0q   s1q   s2q   s3q   s4q   s5q   s6q   s7q
+      s8q   s9q  s10q  s11q  s12q  s13q  s14q  s15q
+     s16q  s17q  s18q  s19q  s20q  s21q  s22q  s23q
+     s24q  s25q  s26q  s27q  s28q  s29q  s30q  s31q
+     s32q  s33q  s34q  s35q  s36q  s37q  s38q  s39q
+     s40q  s41q  s42q  s43q  s44q  s45q  s46q  s47q
+     s48q  s49q  s50q  s51q  s52q  s53q  s54q  s55q
+     s56q  s57q  s58q  s59q  s60q  s61q  s62q  s63q
+     s64q  s65q  s66q  s67q  s68q  s69q  s70q  s71q
+     s72q  s73q  s74q  s75q  s76q  s77q  s78q  s79q
+     s80q  s81q  s82q  s83q  s84q  s85q  s86q  s87q
+     s88q  s89q  s90q  s91q  s92q  s93q  s94q  s95q
+     s96q  s97q  s98q  s99q s100q s101q s102q s103q
+    s104q s105q s106q s107q s108q s109q s110q s111q
+    s112q s113q s114q s115q s116q s117q s118q s119q
+    s120q s121q s122q s123q s124q s125q s126q s127q
+    s128q s129q s130q s131q s132q s133q s134q s135q
+    s136q s137q s138q s139q s140q s141q s142q s143q
+    s144q s145q s146q s147q s148q s149q s150q s151q
+    s152q s153q s154q s155q s156q s157q s158q s159q
+    s160q s161q s162q s163q s164q s165q s166q s167q
+    s168q s169q s170q s171q s172q s173q s174q s175q
+    s176q s177q s178q s179q s180q s181q s182q s183q
+    s184q s185q s186q s187q s188q s189q s190q s191q
+    s192q s193q s194q s195q s196q s197q s198q s199q
+    s200q s201q s202q s203q s204q s205q s206q s207q
+    s208q s209q s210q s211q s212q s213q s214q s215q
+    s216q s217q s218q s219q s220q s221q s222q s223q
+    s224q s225q s226q s227q s228q s229q s230q s231q
+    s232q s233q s234q s235q s236q s237q s238q s239q
+    s240q s241q s242q s243q s244q s245q s246q s247q
+    s248q s249q s250q s251q s252q s253q s254q s255q
+];
+define register offset=0x50000000 size=4 [
+      s0 _   s1 _   s2 _   s3 _   s4 _   s5 _   s6 _   s7 _
+      s8 _   s9 _  s10 _  s11 _  s12 _  s13 _  s14 _  s15 _
+     s16 _  s17 _  s18 _  s19 _  s20 _  s21 _  s22 _  s23 _
+     s24 _  s25 _  s26 _  s27 _  s28 _  s29 _  s30 _  s31 _
+     s32 _  s33 _  s34 _  s35 _  s36 _  s37 _  s38 _  s39 _
+     s40 _  s41 _  s42 _  s43 _  s44 _  s45 _  s46 _  s47 _
+     s48 _  s49 _  s50 _  s51 _  s52 _  s53 _  s54 _  s55 _
+     s56 _  s57 _  s58 _  s59 _  s60 _  s61 _  s62 _  s63 _
+     s64 _  s65 _  s66 _  s67 _  s68 _  s69 _  s70 _  s71 _
+     s72 _  s73 _  s74 _  s75 _  s76 _  s77 _  s78 _  s79 _
+     s80 _  s81 _  s82 _  s83 _  s84 _  s85 _  s86 _  s87 _
+     s88 _  s89 _  s90 _  s91 _  s92 _  s93 _  s94 _  s95 _
+     s96 _  s97 _  s98 _  s99 _ s100 _ s101 _ s102 _ s103 _
+    s104 _ s105 _ s106 _ s107 _ s108 _ s109 _ s110 _ s111 _
+    s112 _ s113 _ s114 _ s115 _ s116 _ s117 _ s118 _ s119 _
+    s120 _ s121 _ s122 _ s123 _ s124 _ s125 _ s126 _ s127 _
+    s128 _ s129 _ s130 _ s131 _ s132 _ s133 _ s134 _ s135 _
+    s136 _ s137 _ s138 _ s139 _ s140 _ s141 _ s142 _ s143 _
+    s144 _ s145 _ s146 _ s147 _ s148 _ s149 _ s150 _ s151 _
+    s152 _ s153 _ s154 _ s155 _ s156 _ s157 _ s158 _ s159 _
+    s160 _ s161 _ s162 _ s163 _ s164 _ s165 _ s166 _ s167 _
+    s168 _ s169 _ s170 _ s171 _ s172 _ s173 _ s174 _ s175 _
+    s176 _ s177 _ s178 _ s179 _ s180 _ s181 _ s182 _ s183 _
+    s184 _ s185 _ s186 _ s187 _ s188 _ s189 _ s190 _ s191 _
+    s192 _ s193 _ s194 _ s195 _ s196 _ s197 _ s198 _ s199 _
+    s200 _ s201 _ s202 _ s203 _ s204 _ s205 _ s206 _ s207 _
+    s208 _ s209 _ s210 _ s211 _ s212 _ s213 _ s214 _ s215 _
+    s216 _ s217 _ s218 _ s219 _ s220 _ s221 _ s222 _ s223 _
+    s224 _ s225 _ s226 _ s227 _ s228 _ s229 _ s230 _ s231 _
+    s232 _ s233 _ s234 _ s235 _ s236 _ s237 _ s238 _ s239 _
+    s240 _ s241 _ s242 _ s243 _ s244 _ s245 _ s246 _ s247 _
+    s248 _ s249 _ s250 _ s251 _ s252 _ s253 _ s254 _ s255 _
+];
+
+define register offset=0x10000000 size=8 [
+        l0q    l1q    l2q    l3q    l4q    l5q    l6q    l7q
+        l8q    l9q   l10q   l11q   l12q   l13q   l14q   l15q
+       l16q   l17q   l18q   l19q   l20q   l21q   l22q   l23q
+       l24q   l25q   l26q   l27q   l28q   l29q   l30q   l31q
+       l32q   l33q   l34q   l35q   l36q   l37q   l38q   l39q
+       l40q   l41q   l42q   l43q   l44q   l45q   l46q   l47q
+       l48q   l49q   l50q   l51q   l52q   l53q   l54q   l55q
+       l56q   l57q   l58q   l59q   l60q   l61q   l62q   l63q
+       l64q   l65q   l66q   l67q   l68q   l69q   l70q   l71q
+       l72q   l73q   l74q   l75q   l76q   l77q   l78q   l79q
+       l80q   l81q   l82q   l83q   l84q   l85q   l86q   l87q
+       l88q   l89q   l90q   l91q   l92q   l93q   l94q   l95q
+       l96q   l97q   l98q   l99q  l100q  l101q  l102q  l103q
+      l104q  l105q  l106q  l107q  l108q  l109q  l110q  l111q
+      l112q  l113q  l114q  l115q  l116q  l117q  l118q  l119q
+      l120q  l121q  l122q  l123q  l124q  l125q  l126q  l127q
+      l128q  l129q  l130q  l131q  l132q  l133q  l134q  l135q
+      l136q  l137q  l138q  l139q  l140q  l141q  l142q  l143q
+      l144q  l145q  l146q  l147q  l148q  l149q  l150q  l151q
+      l152q  l153q  l154q  l155q  l156q  l157q  l158q  l159q
+      l160q  l161q  l162q  l163q  l164q  l165q  l166q  l167q
+      l168q  l169q  l170q  l171q  l172q  l173q  l174q  l175q
+      l176q  l177q  l178q  l179q  l180q  l181q  l182q  l183q
+      l184q  l185q  l186q  l187q  l188q  l189q  l190q  l191q
+      l192q  l193q  l194q  l195q  l196q  l197q  l198q  l199q
+      l200q  l201q  l202q  l203q  l204q  l205q  l206q  l207q
+      l208q  l209q  l210q  l211q  l212q  l213q  l214q  l215q
+      l216q  l217q  l218q  l219q  l220q  l221q  l222q  l223q
+      l224q  l225q  l226q  l227q  l228q  l229q  l230q  l231q
+      l232q  l233q  l234q  l235q  l236q  l237q  l238q  l239q
+      l240q  l241q  l242q  l243q  l244q  l245q  l246q  l247q
+      l248q  l249q  l250q  l251q  l252q  l253q  l254q  l255q
+      l256q  l257q  l258q  l259q  l260q  l261q  l262q  l263q
+      l264q  l265q  l266q  l267q  l268q  l269q  l270q  l271q
+      l272q  l273q  l274q  l275q  l276q  l277q  l278q  l279q
+      l280q  l281q  l282q  l283q  l284q  l285q  l286q  l287q
+      l288q  l289q  l290q  l291q  l292q  l293q  l294q  l295q
+      l296q  l297q  l298q  l299q  l300q  l301q  l302q  l303q
+      l304q  l305q  l306q  l307q  l308q  l309q  l310q  l311q
+      l312q  l313q  l314q  l315q  l316q  l317q  l318q  l319q
+      l320q  l321q  l322q  l323q  l324q  l325q  l326q  l327q
+      l328q  l329q  l330q  l331q  l332q  l333q  l334q  l335q
+      l336q  l337q  l338q  l339q  l340q  l341q  l342q  l343q
+      l344q  l345q  l346q  l347q  l348q  l349q  l350q  l351q
+      l352q  l353q  l354q  l355q  l356q  l357q  l358q  l359q
+      l360q  l361q  l362q  l363q  l364q  l365q  l366q  l367q
+      l368q  l369q  l370q  l371q  l372q  l373q  l374q  l375q
+      l376q  l377q  l378q  l379q  l380q  l381q  l382q  l383q
+      l384q  l385q  l386q  l387q  l388q  l389q  l390q  l391q
+      l392q  l393q  l394q  l395q  l396q  l397q  l398q  l399q
+      l400q  l401q  l402q  l403q  l404q  l405q  l406q  l407q
+      l408q  l409q  l410q  l411q  l412q  l413q  l414q  l415q
+      l416q  l417q  l418q  l419q  l420q  l421q  l422q  l423q
+      l424q  l425q  l426q  l427q  l428q  l429q  l430q  l431q
+      l432q  l433q  l434q  l435q  l436q  l437q  l438q  l439q
+      l440q  l441q  l442q  l443q  l444q  l445q  l446q  l447q
+      l448q  l449q  l450q  l451q  l452q  l453q  l454q  l455q
+      l456q  l457q  l458q  l459q  l460q  l461q  l462q  l463q
+      l464q  l465q  l466q  l467q  l468q  l469q  l470q  l471q
+      l472q  l473q  l474q  l475q  l476q  l477q  l478q  l479q
+      l480q  l481q  l482q  l483q  l484q  l485q  l486q  l487q
+      l488q  l489q  l490q  l491q  l492q  l493q  l494q  l495q
+      l496q  l497q  l498q  l499q  l500q  l501q  l502q  l503q
+      l504q  l505q  l506q  l507q  l508q  l509q  l510q  l511q
+      l512q  l513q  l514q  l515q  l516q  l517q  l518q  l519q
+      l520q  l521q  l522q  l523q  l524q  l525q  l526q  l527q
+      l528q  l529q  l530q  l531q  l532q  l533q  l534q  l535q
+      l536q  l537q  l538q  l539q  l540q  l541q  l542q  l543q
+      l544q  l545q  l546q  l547q  l548q  l549q  l550q  l551q
+      l552q  l553q  l554q  l555q  l556q  l557q  l558q  l559q
+      l560q  l561q  l562q  l563q  l564q  l565q  l566q  l567q
+      l568q  l569q  l570q  l571q  l572q  l573q  l574q  l575q
+      l576q  l577q  l578q  l579q  l580q  l581q  l582q  l583q
+      l584q  l585q  l586q  l587q  l588q  l589q  l590q  l591q
+      l592q  l593q  l594q  l595q  l596q  l597q  l598q  l599q
+      l600q  l601q  l602q  l603q  l604q  l605q  l606q  l607q
+      l608q  l609q  l610q  l611q  l612q  l613q  l614q  l615q
+      l616q  l617q  l618q  l619q  l620q  l621q  l622q  l623q
+      l624q  l625q  l626q  l627q  l628q  l629q  l630q  l631q
+      l632q  l633q  l634q  l635q  l636q  l637q  l638q  l639q
+      l640q  l641q  l642q  l643q  l644q  l645q  l646q  l647q
+      l648q  l649q  l650q  l651q  l652q  l653q  l654q  l655q
+      l656q  l657q  l658q  l659q  l660q  l661q  l662q  l663q
+      l664q  l665q  l666q  l667q  l668q  l669q  l670q  l671q
+      l672q  l673q  l674q  l675q  l676q  l677q  l678q  l679q
+      l680q  l681q  l682q  l683q  l684q  l685q  l686q  l687q
+      l688q  l689q  l690q  l691q  l692q  l693q  l694q  l695q
+      l696q  l697q  l698q  l699q  l700q  l701q  l702q  l703q
+      l704q  l705q  l706q  l707q  l708q  l709q  l710q  l711q
+      l712q  l713q  l714q  l715q  l716q  l717q  l718q  l719q
+      l720q  l721q  l722q  l723q  l724q  l725q  l726q  l727q
+      l728q  l729q  l730q  l731q  l732q  l733q  l734q  l735q
+      l736q  l737q  l738q  l739q  l740q  l741q  l742q  l743q
+      l744q  l745q  l746q  l747q  l748q  l749q  l750q  l751q
+      l752q  l753q  l754q  l755q  l756q  l757q  l758q  l759q
+      l760q  l761q  l762q  l763q  l764q  l765q  l766q  l767q
+      l768q  l769q  l770q  l771q  l772q  l773q  l774q  l775q
+      l776q  l777q  l778q  l779q  l780q  l781q  l782q  l783q
+      l784q  l785q  l786q  l787q  l788q  l789q  l790q  l791q
+      l792q  l793q  l794q  l795q  l796q  l797q  l798q  l799q
+      l800q  l801q  l802q  l803q  l804q  l805q  l806q  l807q
+      l808q  l809q  l810q  l811q  l812q  l813q  l814q  l815q
+      l816q  l817q  l818q  l819q  l820q  l821q  l822q  l823q
+      l824q  l825q  l826q  l827q  l828q  l829q  l830q  l831q
+      l832q  l833q  l834q  l835q  l836q  l837q  l838q  l839q
+      l840q  l841q  l842q  l843q  l844q  l845q  l846q  l847q
+      l848q  l849q  l850q  l851q  l852q  l853q  l854q  l855q
+      l856q  l857q  l858q  l859q  l860q  l861q  l862q  l863q
+      l864q  l865q  l866q  l867q  l868q  l869q  l870q  l871q
+      l872q  l873q  l874q  l875q  l876q  l877q  l878q  l879q
+      l880q  l881q  l882q  l883q  l884q  l885q  l886q  l887q
+      l888q  l889q  l890q  l891q  l892q  l893q  l894q  l895q
+      l896q  l897q  l898q  l899q  l900q  l901q  l902q  l903q
+      l904q  l905q  l906q  l907q  l908q  l909q  l910q  l911q
+      l912q  l913q  l914q  l915q  l916q  l917q  l918q  l919q
+      l920q  l921q  l922q  l923q  l924q  l925q  l926q  l927q
+      l928q  l929q  l930q  l931q  l932q  l933q  l934q  l935q
+      l936q  l937q  l938q  l939q  l940q  l941q  l942q  l943q
+      l944q  l945q  l946q  l947q  l948q  l949q  l950q  l951q
+      l952q  l953q  l954q  l955q  l956q  l957q  l958q  l959q
+      l960q  l961q  l962q  l963q  l964q  l965q  l966q  l967q
+      l968q  l969q  l970q  l971q  l972q  l973q  l974q  l975q
+      l976q  l977q  l978q  l979q  l980q  l981q  l982q  l983q
+      l984q  l985q  l986q  l987q  l988q  l989q  l990q  l991q
+      l992q  l993q  l994q  l995q  l996q  l997q  l998q  l999q
+     l1000q l1001q l1002q l1003q l1004q l1005q l1006q l1007q
+     l1008q l1009q l1010q l1011q l1012q l1013q l1014q l1015q
+     l1016q l1017q l1018q l1019q l1020q l1021q l1022q l1023q
+     l1024q l1025q l1026q l1027q l1028q l1029q l1030q l1031q
+     l1032q l1033q l1034q l1035q l1036q l1037q l1038q l1039q
+     l1040q l1041q l1042q l1043q l1044q l1045q l1046q l1047q
+     l1048q l1049q l1050q l1051q l1052q l1053q l1054q l1055q
+     l1056q l1057q l1058q l1059q l1060q l1061q l1062q l1063q
+     l1064q l1065q l1066q l1067q l1068q l1069q l1070q l1071q
+     l1072q l1073q l1074q l1075q l1076q l1077q l1078q l1079q
+     l1080q l1081q l1082q l1083q l1084q l1085q l1086q l1087q
+     l1088q l1089q l1090q l1091q l1092q l1093q l1094q l1095q
+     l1096q l1097q l1098q l1099q l1100q l1101q l1102q l1103q
+     l1104q l1105q l1106q l1107q l1108q l1109q l1110q l1111q
+     l1112q l1113q l1114q l1115q l1116q l1117q l1118q l1119q
+     l1120q l1121q l1122q l1123q l1124q l1125q l1126q l1127q
+     l1128q l1129q l1130q l1131q l1132q l1133q l1134q l1135q
+     l1136q l1137q l1138q l1139q l1140q l1141q l1142q l1143q
+     l1144q l1145q l1146q l1147q l1148q l1149q l1150q l1151q
+     l1152q l1153q l1154q l1155q l1156q l1157q l1158q l1159q
+     l1160q l1161q l1162q l1163q l1164q l1165q l1166q l1167q
+     l1168q l1169q l1170q l1171q l1172q l1173q l1174q l1175q
+     l1176q l1177q l1178q l1179q l1180q l1181q l1182q l1183q
+     l1184q l1185q l1186q l1187q l1188q l1189q l1190q l1191q
+     l1192q l1193q l1194q l1195q l1196q l1197q l1198q l1199q
+     l1200q l1201q l1202q l1203q l1204q l1205q l1206q l1207q
+     l1208q l1209q l1210q l1211q l1212q l1213q l1214q l1215q
+     l1216q l1217q l1218q l1219q l1220q l1221q l1222q l1223q
+     l1224q l1225q l1226q l1227q l1228q l1229q l1230q l1231q
+     l1232q l1233q l1234q l1235q l1236q l1237q l1238q l1239q
+     l1240q l1241q l1242q l1243q l1244q l1245q l1246q l1247q
+     l1248q l1249q l1250q l1251q l1252q l1253q l1254q l1255q
+     l1256q l1257q l1258q l1259q l1260q l1261q l1262q l1263q
+     l1264q l1265q l1266q l1267q l1268q l1269q l1270q l1271q
+     l1272q l1273q l1274q l1275q l1276q l1277q l1278q l1279q
+     l1280q l1281q l1282q l1283q l1284q l1285q l1286q l1287q
+     l1288q l1289q l1290q l1291q l1292q l1293q l1294q l1295q
+     l1296q l1297q l1298q l1299q l1300q l1301q l1302q l1303q
+     l1304q l1305q l1306q l1307q l1308q l1309q l1310q l1311q
+     l1312q l1313q l1314q l1315q l1316q l1317q l1318q l1319q
+     l1320q l1321q l1322q l1323q l1324q l1325q l1326q l1327q
+     l1328q l1329q l1330q l1331q l1332q l1333q l1334q l1335q
+     l1336q l1337q l1338q l1339q l1340q l1341q l1342q l1343q
+     l1344q l1345q l1346q l1347q l1348q l1349q l1350q l1351q
+     l1352q l1353q l1354q l1355q l1356q l1357q l1358q l1359q
+     l1360q l1361q l1362q l1363q l1364q l1365q l1366q l1367q
+     l1368q l1369q l1370q l1371q l1372q l1373q l1374q l1375q
+     l1376q l1377q l1378q l1379q l1380q l1381q l1382q l1383q
+     l1384q l1385q l1386q l1387q l1388q l1389q l1390q l1391q
+     l1392q l1393q l1394q l1395q l1396q l1397q l1398q l1399q
+     l1400q l1401q l1402q l1403q l1404q l1405q l1406q l1407q
+     l1408q l1409q l1410q l1411q l1412q l1413q l1414q l1415q
+     l1416q l1417q l1418q l1419q l1420q l1421q l1422q l1423q
+     l1424q l1425q l1426q l1427q l1428q l1429q l1430q l1431q
+     l1432q l1433q l1434q l1435q l1436q l1437q l1438q l1439q
+     l1440q l1441q l1442q l1443q l1444q l1445q l1446q l1447q
+     l1448q l1449q l1450q l1451q l1452q l1453q l1454q l1455q
+     l1456q l1457q l1458q l1459q l1460q l1461q l1462q l1463q
+     l1464q l1465q l1466q l1467q l1468q l1469q l1470q l1471q
+     l1472q l1473q l1474q l1475q l1476q l1477q l1478q l1479q
+     l1480q l1481q l1482q l1483q l1484q l1485q l1486q l1487q
+     l1488q l1489q l1490q l1491q l1492q l1493q l1494q l1495q
+     l1496q l1497q l1498q l1499q l1500q l1501q l1502q l1503q
+     l1504q l1505q l1506q l1507q l1508q l1509q l1510q l1511q
+     l1512q l1513q l1514q l1515q l1516q l1517q l1518q l1519q
+     l1520q l1521q l1522q l1523q l1524q l1525q l1526q l1527q
+     l1528q l1529q l1530q l1531q l1532q l1533q l1534q l1535q
+     l1536q l1537q l1538q l1539q l1540q l1541q l1542q l1543q
+     l1544q l1545q l1546q l1547q l1548q l1549q l1550q l1551q
+     l1552q l1553q l1554q l1555q l1556q l1557q l1558q l1559q
+     l1560q l1561q l1562q l1563q l1564q l1565q l1566q l1567q
+     l1568q l1569q l1570q l1571q l1572q l1573q l1574q l1575q
+     l1576q l1577q l1578q l1579q l1580q l1581q l1582q l1583q
+     l1584q l1585q l1586q l1587q l1588q l1589q l1590q l1591q
+     l1592q l1593q l1594q l1595q l1596q l1597q l1598q l1599q
+     l1600q l1601q l1602q l1603q l1604q l1605q l1606q l1607q
+     l1608q l1609q l1610q l1611q l1612q l1613q l1614q l1615q
+     l1616q l1617q l1618q l1619q l1620q l1621q l1622q l1623q
+     l1624q l1625q l1626q l1627q l1628q l1629q l1630q l1631q
+     l1632q l1633q l1634q l1635q l1636q l1637q l1638q l1639q
+     l1640q l1641q l1642q l1643q l1644q l1645q l1646q l1647q
+     l1648q l1649q l1650q l1651q l1652q l1653q l1654q l1655q
+     l1656q l1657q l1658q l1659q l1660q l1661q l1662q l1663q
+     l1664q l1665q l1666q l1667q l1668q l1669q l1670q l1671q
+     l1672q l1673q l1674q l1675q l1676q l1677q l1678q l1679q
+     l1680q l1681q l1682q l1683q l1684q l1685q l1686q l1687q
+     l1688q l1689q l1690q l1691q l1692q l1693q l1694q l1695q
+     l1696q l1697q l1698q l1699q l1700q l1701q l1702q l1703q
+     l1704q l1705q l1706q l1707q l1708q l1709q l1710q l1711q
+     l1712q l1713q l1714q l1715q l1716q l1717q l1718q l1719q
+     l1720q l1721q l1722q l1723q l1724q l1725q l1726q l1727q
+     l1728q l1729q l1730q l1731q l1732q l1733q l1734q l1735q
+     l1736q l1737q l1738q l1739q l1740q l1741q l1742q l1743q
+     l1744q l1745q l1746q l1747q l1748q l1749q l1750q l1751q
+     l1752q l1753q l1754q l1755q l1756q l1757q l1758q l1759q
+     l1760q l1761q l1762q l1763q l1764q l1765q l1766q l1767q
+     l1768q l1769q l1770q l1771q l1772q l1773q l1774q l1775q
+     l1776q l1777q l1778q l1779q l1780q l1781q l1782q l1783q
+     l1784q l1785q l1786q l1787q l1788q l1789q l1790q l1791q
+     l1792q l1793q l1794q l1795q l1796q l1797q l1798q l1799q
+     l1800q l1801q l1802q l1803q l1804q l1805q l1806q l1807q
+     l1808q l1809q l1810q l1811q l1812q l1813q l1814q l1815q
+     l1816q l1817q l1818q l1819q l1820q l1821q l1822q l1823q
+     l1824q l1825q l1826q l1827q l1828q l1829q l1830q l1831q
+     l1832q l1833q l1834q l1835q l1836q l1837q l1838q l1839q
+     l1840q l1841q l1842q l1843q l1844q l1845q l1846q l1847q
+     l1848q l1849q l1850q l1851q l1852q l1853q l1854q l1855q
+     l1856q l1857q l1858q l1859q l1860q l1861q l1862q l1863q
+     l1864q l1865q l1866q l1867q l1868q l1869q l1870q l1871q
+     l1872q l1873q l1874q l1875q l1876q l1877q l1878q l1879q
+     l1880q l1881q l1882q l1883q l1884q l1885q l1886q l1887q
+     l1888q l1889q l1890q l1891q l1892q l1893q l1894q l1895q
+     l1896q l1897q l1898q l1899q l1900q l1901q l1902q l1903q
+     l1904q l1905q l1906q l1907q l1908q l1909q l1910q l1911q
+     l1912q l1913q l1914q l1915q l1916q l1917q l1918q l1919q
+     l1920q l1921q l1922q l1923q l1924q l1925q l1926q l1927q
+     l1928q l1929q l1930q l1931q l1932q l1933q l1934q l1935q
+     l1936q l1937q l1938q l1939q l1940q l1941q l1942q l1943q
+     l1944q l1945q l1946q l1947q l1948q l1949q l1950q l1951q
+     l1952q l1953q l1954q l1955q l1956q l1957q l1958q l1959q
+     l1960q l1961q l1962q l1963q l1964q l1965q l1966q l1967q
+     l1968q l1969q l1970q l1971q l1972q l1973q l1974q l1975q
+     l1976q l1977q l1978q l1979q l1980q l1981q l1982q l1983q
+     l1984q l1985q l1986q l1987q l1988q l1989q l1990q l1991q
+     l1992q l1993q l1994q l1995q l1996q l1997q l1998q l1999q
+     l2000q l2001q l2002q l2003q l2004q l2005q l2006q l2007q
+     l2008q l2009q l2010q l2011q l2012q l2013q l2014q l2015q
+     l2016q l2017q l2018q l2019q l2020q l2021q l2022q l2023q
+     l2024q l2025q l2026q l2027q l2028q l2029q l2030q l2031q
+     l2032q l2033q l2034q l2035q l2036q l2037q l2038q l2039q
+     l2040q l2041q l2042q l2043q l2044q l2045q l2046q l2047q
+     l2048q l2049q l2050q l2051q l2052q l2053q l2054q l2055q
+     l2056q l2057q l2058q l2059q l2060q l2061q l2062q l2063q
+     l2064q l2065q l2066q l2067q l2068q l2069q l2070q l2071q
+     l2072q l2073q l2074q l2075q l2076q l2077q l2078q l2079q
+     l2080q l2081q l2082q l2083q l2084q l2085q l2086q l2087q
+     l2088q l2089q l2090q l2091q l2092q l2093q l2094q l2095q
+     l2096q l2097q l2098q l2099q l2100q l2101q l2102q l2103q
+     l2104q l2105q l2106q l2107q l2108q l2109q l2110q l2111q
+     l2112q l2113q l2114q l2115q l2116q l2117q l2118q l2119q
+     l2120q l2121q l2122q l2123q l2124q l2125q l2126q l2127q
+     l2128q l2129q l2130q l2131q l2132q l2133q l2134q l2135q
+     l2136q l2137q l2138q l2139q l2140q l2141q l2142q l2143q
+     l2144q l2145q l2146q l2147q l2148q l2149q l2150q l2151q
+     l2152q l2153q l2154q l2155q l2156q l2157q l2158q l2159q
+     l2160q l2161q l2162q l2163q l2164q l2165q l2166q l2167q
+     l2168q l2169q l2170q l2171q l2172q l2173q l2174q l2175q
+     l2176q l2177q l2178q l2179q l2180q l2181q l2182q l2183q
+     l2184q l2185q l2186q l2187q l2188q l2189q l2190q l2191q
+     l2192q l2193q l2194q l2195q l2196q l2197q l2198q l2199q
+     l2200q l2201q l2202q l2203q l2204q l2205q l2206q l2207q
+     l2208q l2209q l2210q l2211q l2212q l2213q l2214q l2215q
+     l2216q l2217q l2218q l2219q l2220q l2221q l2222q l2223q
+     l2224q l2225q l2226q l2227q l2228q l2229q l2230q l2231q
+     l2232q l2233q l2234q l2235q l2236q l2237q l2238q l2239q
+     l2240q l2241q l2242q l2243q l2244q l2245q l2246q l2247q
+     l2248q l2249q l2250q l2251q l2252q l2253q l2254q l2255q
+     l2256q l2257q l2258q l2259q l2260q l2261q l2262q l2263q
+     l2264q l2265q l2266q l2267q l2268q l2269q l2270q l2271q
+     l2272q l2273q l2274q l2275q l2276q l2277q l2278q l2279q
+     l2280q l2281q l2282q l2283q l2284q l2285q l2286q l2287q
+     l2288q l2289q l2290q l2291q l2292q l2293q l2294q l2295q
+     l2296q l2297q l2298q l2299q l2300q l2301q l2302q l2303q
+     l2304q l2305q l2306q l2307q l2308q l2309q l2310q l2311q
+     l2312q l2313q l2314q l2315q l2316q l2317q l2318q l2319q
+     l2320q l2321q l2322q l2323q l2324q l2325q l2326q l2327q
+     l2328q l2329q l2330q l2331q l2332q l2333q l2334q l2335q
+     l2336q l2337q l2338q l2339q l2340q l2341q l2342q l2343q
+     l2344q l2345q l2346q l2347q l2348q l2349q l2350q l2351q
+     l2352q l2353q l2354q l2355q l2356q l2357q l2358q l2359q
+     l2360q l2361q l2362q l2363q l2364q l2365q l2366q l2367q
+     l2368q l2369q l2370q l2371q l2372q l2373q l2374q l2375q
+     l2376q l2377q l2378q l2379q l2380q l2381q l2382q l2383q
+     l2384q l2385q l2386q l2387q l2388q l2389q l2390q l2391q
+     l2392q l2393q l2394q l2395q l2396q l2397q l2398q l2399q
+     l2400q l2401q l2402q l2403q l2404q l2405q l2406q l2407q
+     l2408q l2409q l2410q l2411q l2412q l2413q l2414q l2415q
+     l2416q l2417q l2418q l2419q l2420q l2421q l2422q l2423q
+     l2424q l2425q l2426q l2427q l2428q l2429q l2430q l2431q
+     l2432q l2433q l2434q l2435q l2436q l2437q l2438q l2439q
+     l2440q l2441q l2442q l2443q l2444q l2445q l2446q l2447q
+     l2448q l2449q l2450q l2451q l2452q l2453q l2454q l2455q
+     l2456q l2457q l2458q l2459q l2460q l2461q l2462q l2463q
+     l2464q l2465q l2466q l2467q l2468q l2469q l2470q l2471q
+     l2472q l2473q l2474q l2475q l2476q l2477q l2478q l2479q
+     l2480q l2481q l2482q l2483q l2484q l2485q l2486q l2487q
+     l2488q l2489q l2490q l2491q l2492q l2493q l2494q l2495q
+     l2496q l2497q l2498q l2499q l2500q l2501q l2502q l2503q
+     l2504q l2505q l2506q l2507q l2508q l2509q l2510q l2511q
+     l2512q l2513q l2514q l2515q l2516q l2517q l2518q l2519q
+     l2520q l2521q l2522q l2523q l2524q l2525q l2526q l2527q
+     l2528q l2529q l2530q l2531q l2532q l2533q l2534q l2535q
+     l2536q l2537q l2538q l2539q l2540q l2541q l2542q l2543q
+     l2544q l2545q l2546q l2547q l2548q l2549q l2550q l2551q
+     l2552q l2553q l2554q l2555q l2556q l2557q l2558q l2559q
+     l2560q l2561q l2562q l2563q l2564q l2565q l2566q l2567q
+     l2568q l2569q l2570q l2571q l2572q l2573q l2574q l2575q
+     l2576q l2577q l2578q l2579q l2580q l2581q l2582q l2583q
+     l2584q l2585q l2586q l2587q l2588q l2589q l2590q l2591q
+     l2592q l2593q l2594q l2595q l2596q l2597q l2598q l2599q
+     l2600q l2601q l2602q l2603q l2604q l2605q l2606q l2607q
+     l2608q l2609q l2610q l2611q l2612q l2613q l2614q l2615q
+     l2616q l2617q l2618q l2619q l2620q l2621q l2622q l2623q
+     l2624q l2625q l2626q l2627q l2628q l2629q l2630q l2631q
+     l2632q l2633q l2634q l2635q l2636q l2637q l2638q l2639q
+     l2640q l2641q l2642q l2643q l2644q l2645q l2646q l2647q
+     l2648q l2649q l2650q l2651q l2652q l2653q l2654q l2655q
+     l2656q l2657q l2658q l2659q l2660q l2661q l2662q l2663q
+     l2664q l2665q l2666q l2667q l2668q l2669q l2670q l2671q
+     l2672q l2673q l2674q l2675q l2676q l2677q l2678q l2679q
+     l2680q l2681q l2682q l2683q l2684q l2685q l2686q l2687q
+     l2688q l2689q l2690q l2691q l2692q l2693q l2694q l2695q
+     l2696q l2697q l2698q l2699q l2700q l2701q l2702q l2703q
+     l2704q l2705q l2706q l2707q l2708q l2709q l2710q l2711q
+     l2712q l2713q l2714q l2715q l2716q l2717q l2718q l2719q
+     l2720q l2721q l2722q l2723q l2724q l2725q l2726q l2727q
+     l2728q l2729q l2730q l2731q l2732q l2733q l2734q l2735q
+     l2736q l2737q l2738q l2739q l2740q l2741q l2742q l2743q
+     l2744q l2745q l2746q l2747q l2748q l2749q l2750q l2751q
+     l2752q l2753q l2754q l2755q l2756q l2757q l2758q l2759q
+     l2760q l2761q l2762q l2763q l2764q l2765q l2766q l2767q
+     l2768q l2769q l2770q l2771q l2772q l2773q l2774q l2775q
+     l2776q l2777q l2778q l2779q l2780q l2781q l2782q l2783q
+     l2784q l2785q l2786q l2787q l2788q l2789q l2790q l2791q
+     l2792q l2793q l2794q l2795q l2796q l2797q l2798q l2799q
+     l2800q l2801q l2802q l2803q l2804q l2805q l2806q l2807q
+     l2808q l2809q l2810q l2811q l2812q l2813q l2814q l2815q
+     l2816q l2817q l2818q l2819q l2820q l2821q l2822q l2823q
+     l2824q l2825q l2826q l2827q l2828q l2829q l2830q l2831q
+     l2832q l2833q l2834q l2835q l2836q l2837q l2838q l2839q
+     l2840q l2841q l2842q l2843q l2844q l2845q l2846q l2847q
+     l2848q l2849q l2850q l2851q l2852q l2853q l2854q l2855q
+     l2856q l2857q l2858q l2859q l2860q l2861q l2862q l2863q
+     l2864q l2865q l2866q l2867q l2868q l2869q l2870q l2871q
+     l2872q l2873q l2874q l2875q l2876q l2877q l2878q l2879q
+     l2880q l2881q l2882q l2883q l2884q l2885q l2886q l2887q
+     l2888q l2889q l2890q l2891q l2892q l2893q l2894q l2895q
+     l2896q l2897q l2898q l2899q l2900q l2901q l2902q l2903q
+     l2904q l2905q l2906q l2907q l2908q l2909q l2910q l2911q
+     l2912q l2913q l2914q l2915q l2916q l2917q l2918q l2919q
+     l2920q l2921q l2922q l2923q l2924q l2925q l2926q l2927q
+     l2928q l2929q l2930q l2931q l2932q l2933q l2934q l2935q
+     l2936q l2937q l2938q l2939q l2940q l2941q l2942q l2943q
+     l2944q l2945q l2946q l2947q l2948q l2949q l2950q l2951q
+     l2952q l2953q l2954q l2955q l2956q l2957q l2958q l2959q
+     l2960q l2961q l2962q l2963q l2964q l2965q l2966q l2967q
+     l2968q l2969q l2970q l2971q l2972q l2973q l2974q l2975q
+     l2976q l2977q l2978q l2979q l2980q l2981q l2982q l2983q
+     l2984q l2985q l2986q l2987q l2988q l2989q l2990q l2991q
+     l2992q l2993q l2994q l2995q l2996q l2997q l2998q l2999q
+     l3000q l3001q l3002q l3003q l3004q l3005q l3006q l3007q
+     l3008q l3009q l3010q l3011q l3012q l3013q l3014q l3015q
+     l3016q l3017q l3018q l3019q l3020q l3021q l3022q l3023q
+     l3024q l3025q l3026q l3027q l3028q l3029q l3030q l3031q
+     l3032q l3033q l3034q l3035q l3036q l3037q l3038q l3039q
+     l3040q l3041q l3042q l3043q l3044q l3045q l3046q l3047q
+     l3048q l3049q l3050q l3051q l3052q l3053q l3054q l3055q
+     l3056q l3057q l3058q l3059q l3060q l3061q l3062q l3063q
+     l3064q l3065q l3066q l3067q l3068q l3069q l3070q l3071q
+     l3072q l3073q l3074q l3075q l3076q l3077q l3078q l3079q
+     l3080q l3081q l3082q l3083q l3084q l3085q l3086q l3087q
+     l3088q l3089q l3090q l3091q l3092q l3093q l3094q l3095q
+     l3096q l3097q l3098q l3099q l3100q l3101q l3102q l3103q
+     l3104q l3105q l3106q l3107q l3108q l3109q l3110q l3111q
+     l3112q l3113q l3114q l3115q l3116q l3117q l3118q l3119q
+     l3120q l3121q l3122q l3123q l3124q l3125q l3126q l3127q
+     l3128q l3129q l3130q l3131q l3132q l3133q l3134q l3135q
+     l3136q l3137q l3138q l3139q l3140q l3141q l3142q l3143q
+     l3144q l3145q l3146q l3147q l3148q l3149q l3150q l3151q
+     l3152q l3153q l3154q l3155q l3156q l3157q l3158q l3159q
+     l3160q l3161q l3162q l3163q l3164q l3165q l3166q l3167q
+     l3168q l3169q l3170q l3171q l3172q l3173q l3174q l3175q
+     l3176q l3177q l3178q l3179q l3180q l3181q l3182q l3183q
+     l3184q l3185q l3186q l3187q l3188q l3189q l3190q l3191q
+     l3192q l3193q l3194q l3195q l3196q l3197q l3198q l3199q
+     l3200q l3201q l3202q l3203q l3204q l3205q l3206q l3207q
+     l3208q l3209q l3210q l3211q l3212q l3213q l3214q l3215q
+     l3216q l3217q l3218q l3219q l3220q l3221q l3222q l3223q
+     l3224q l3225q l3226q l3227q l3228q l3229q l3230q l3231q
+     l3232q l3233q l3234q l3235q l3236q l3237q l3238q l3239q
+     l3240q l3241q l3242q l3243q l3244q l3245q l3246q l3247q
+     l3248q l3249q l3250q l3251q l3252q l3253q l3254q l3255q
+     l3256q l3257q l3258q l3259q l3260q l3261q l3262q l3263q
+     l3264q l3265q l3266q l3267q l3268q l3269q l3270q l3271q
+     l3272q l3273q l3274q l3275q l3276q l3277q l3278q l3279q
+     l3280q l3281q l3282q l3283q l3284q l3285q l3286q l3287q
+     l3288q l3289q l3290q l3291q l3292q l3293q l3294q l3295q
+     l3296q l3297q l3298q l3299q l3300q l3301q l3302q l3303q
+     l3304q l3305q l3306q l3307q l3308q l3309q l3310q l3311q
+     l3312q l3313q l3314q l3315q l3316q l3317q l3318q l3319q
+     l3320q l3321q l3322q l3323q l3324q l3325q l3326q l3327q
+     l3328q l3329q l3330q l3331q l3332q l3333q l3334q l3335q
+     l3336q l3337q l3338q l3339q l3340q l3341q l3342q l3343q
+     l3344q l3345q l3346q l3347q l3348q l3349q l3350q l3351q
+     l3352q l3353q l3354q l3355q l3356q l3357q l3358q l3359q
+     l3360q l3361q l3362q l3363q l3364q l3365q l3366q l3367q
+     l3368q l3369q l3370q l3371q l3372q l3373q l3374q l3375q
+     l3376q l3377q l3378q l3379q l3380q l3381q l3382q l3383q
+     l3384q l3385q l3386q l3387q l3388q l3389q l3390q l3391q
+     l3392q l3393q l3394q l3395q l3396q l3397q l3398q l3399q
+     l3400q l3401q l3402q l3403q l3404q l3405q l3406q l3407q
+     l3408q l3409q l3410q l3411q l3412q l3413q l3414q l3415q
+     l3416q l3417q l3418q l3419q l3420q l3421q l3422q l3423q
+     l3424q l3425q l3426q l3427q l3428q l3429q l3430q l3431q
+     l3432q l3433q l3434q l3435q l3436q l3437q l3438q l3439q
+     l3440q l3441q l3442q l3443q l3444q l3445q l3446q l3447q
+     l3448q l3449q l3450q l3451q l3452q l3453q l3454q l3455q
+     l3456q l3457q l3458q l3459q l3460q l3461q l3462q l3463q
+     l3464q l3465q l3466q l3467q l3468q l3469q l3470q l3471q
+     l3472q l3473q l3474q l3475q l3476q l3477q l3478q l3479q
+     l3480q l3481q l3482q l3483q l3484q l3485q l3486q l3487q
+     l3488q l3489q l3490q l3491q l3492q l3493q l3494q l3495q
+     l3496q l3497q l3498q l3499q l3500q l3501q l3502q l3503q
+     l3504q l3505q l3506q l3507q l3508q l3509q l3510q l3511q
+     l3512q l3513q l3514q l3515q l3516q l3517q l3518q l3519q
+     l3520q l3521q l3522q l3523q l3524q l3525q l3526q l3527q
+     l3528q l3529q l3530q l3531q l3532q l3533q l3534q l3535q
+     l3536q l3537q l3538q l3539q l3540q l3541q l3542q l3543q
+     l3544q l3545q l3546q l3547q l3548q l3549q l3550q l3551q
+     l3552q l3553q l3554q l3555q l3556q l3557q l3558q l3559q
+     l3560q l3561q l3562q l3563q l3564q l3565q l3566q l3567q
+     l3568q l3569q l3570q l3571q l3572q l3573q l3574q l3575q
+     l3576q l3577q l3578q l3579q l3580q l3581q l3582q l3583q
+     l3584q l3585q l3586q l3587q l3588q l3589q l3590q l3591q
+     l3592q l3593q l3594q l3595q l3596q l3597q l3598q l3599q
+     l3600q l3601q l3602q l3603q l3604q l3605q l3606q l3607q
+     l3608q l3609q l3610q l3611q l3612q l3613q l3614q l3615q
+     l3616q l3617q l3618q l3619q l3620q l3621q l3622q l3623q
+     l3624q l3625q l3626q l3627q l3628q l3629q l3630q l3631q
+     l3632q l3633q l3634q l3635q l3636q l3637q l3638q l3639q
+     l3640q l3641q l3642q l3643q l3644q l3645q l3646q l3647q
+     l3648q l3649q l3650q l3651q l3652q l3653q l3654q l3655q
+     l3656q l3657q l3658q l3659q l3660q l3661q l3662q l3663q
+     l3664q l3665q l3666q l3667q l3668q l3669q l3670q l3671q
+     l3672q l3673q l3674q l3675q l3676q l3677q l3678q l3679q
+     l3680q l3681q l3682q l3683q l3684q l3685q l3686q l3687q
+     l3688q l3689q l3690q l3691q l3692q l3693q l3694q l3695q
+     l3696q l3697q l3698q l3699q l3700q l3701q l3702q l3703q
+     l3704q l3705q l3706q l3707q l3708q l3709q l3710q l3711q
+     l3712q l3713q l3714q l3715q l3716q l3717q l3718q l3719q
+     l3720q l3721q l3722q l3723q l3724q l3725q l3726q l3727q
+     l3728q l3729q l3730q l3731q l3732q l3733q l3734q l3735q
+     l3736q l3737q l3738q l3739q l3740q l3741q l3742q l3743q
+     l3744q l3745q l3746q l3747q l3748q l3749q l3750q l3751q
+     l3752q l3753q l3754q l3755q l3756q l3757q l3758q l3759q
+     l3760q l3761q l3762q l3763q l3764q l3765q l3766q l3767q
+     l3768q l3769q l3770q l3771q l3772q l3773q l3774q l3775q
+     l3776q l3777q l3778q l3779q l3780q l3781q l3782q l3783q
+     l3784q l3785q l3786q l3787q l3788q l3789q l3790q l3791q
+     l3792q l3793q l3794q l3795q l3796q l3797q l3798q l3799q
+     l3800q l3801q l3802q l3803q l3804q l3805q l3806q l3807q
+     l3808q l3809q l3810q l3811q l3812q l3813q l3814q l3815q
+     l3816q l3817q l3818q l3819q l3820q l3821q l3822q l3823q
+     l3824q l3825q l3826q l3827q l3828q l3829q l3830q l3831q
+     l3832q l3833q l3834q l3835q l3836q l3837q l3838q l3839q
+     l3840q l3841q l3842q l3843q l3844q l3845q l3846q l3847q
+     l3848q l3849q l3850q l3851q l3852q l3853q l3854q l3855q
+     l3856q l3857q l3858q l3859q l3860q l3861q l3862q l3863q
+     l3864q l3865q l3866q l3867q l3868q l3869q l3870q l3871q
+     l3872q l3873q l3874q l3875q l3876q l3877q l3878q l3879q
+     l3880q l3881q l3882q l3883q l3884q l3885q l3886q l3887q
+     l3888q l3889q l3890q l3891q l3892q l3893q l3894q l3895q
+     l3896q l3897q l3898q l3899q l3900q l3901q l3902q l3903q
+     l3904q l3905q l3906q l3907q l3908q l3909q l3910q l3911q
+     l3912q l3913q l3914q l3915q l3916q l3917q l3918q l3919q
+     l3920q l3921q l3922q l3923q l3924q l3925q l3926q l3927q
+     l3928q l3929q l3930q l3931q l3932q l3933q l3934q l3935q
+     l3936q l3937q l3938q l3939q l3940q l3941q l3942q l3943q
+     l3944q l3945q l3946q l3947q l3948q l3949q l3950q l3951q
+     l3952q l3953q l3954q l3955q l3956q l3957q l3958q l3959q
+     l3960q l3961q l3962q l3963q l3964q l3965q l3966q l3967q
+     l3968q l3969q l3970q l3971q l3972q l3973q l3974q l3975q
+     l3976q l3977q l3978q l3979q l3980q l3981q l3982q l3983q
+     l3984q l3985q l3986q l3987q l3988q l3989q l3990q l3991q
+     l3992q l3993q l3994q l3995q l3996q l3997q l3998q l3999q
+     l4000q l4001q l4002q l4003q l4004q l4005q l4006q l4007q
+     l4008q l4009q l4010q l4011q l4012q l4013q l4014q l4015q
+     l4016q l4017q l4018q l4019q l4020q l4021q l4022q l4023q
+     l4024q l4025q l4026q l4027q l4028q l4029q l4030q l4031q
+     l4032q l4033q l4034q l4035q l4036q l4037q l4038q l4039q
+     l4040q l4041q l4042q l4043q l4044q l4045q l4046q l4047q
+     l4048q l4049q l4050q l4051q l4052q l4053q l4054q l4055q
+     l4056q l4057q l4058q l4059q l4060q l4061q l4062q l4063q
+     l4064q l4065q l4066q l4067q l4068q l4069q l4070q l4071q
+     l4072q l4073q l4074q l4075q l4076q l4077q l4078q l4079q
+     l4080q l4081q l4082q l4083q l4084q l4085q l4086q l4087q
+     l4088q l4089q l4090q l4091q l4092q l4093q l4094q l4095q
+];
+define register offset=0x10000000 size=4 [
+        l0 _    l1 _    l2 _    l3 _    l4 _    l5 _    l6 _    l7 _
+        l8 _    l9 _   l10 _   l11 _   l12 _   l13 _   l14 _   l15 _
+       l16 _   l17 _   l18 _   l19 _   l20 _   l21 _   l22 _   l23 _
+       l24 _   l25 _   l26 _   l27 _   l28 _   l29 _   l30 _   l31 _
+       l32 _   l33 _   l34 _   l35 _   l36 _   l37 _   l38 _   l39 _
+       l40 _   l41 _   l42 _   l43 _   l44 _   l45 _   l46 _   l47 _
+       l48 _   l49 _   l50 _   l51 _   l52 _   l53 _   l54 _   l55 _
+       l56 _   l57 _   l58 _   l59 _   l60 _   l61 _   l62 _   l63 _
+       l64 _   l65 _   l66 _   l67 _   l68 _   l69 _   l70 _   l71 _
+       l72 _   l73 _   l74 _   l75 _   l76 _   l77 _   l78 _   l79 _
+       l80 _   l81 _   l82 _   l83 _   l84 _   l85 _   l86 _   l87 _
+       l88 _   l89 _   l90 _   l91 _   l92 _   l93 _   l94 _   l95 _
+       l96 _   l97 _   l98 _   l99 _  l100 _  l101 _  l102 _  l103 _
+      l104 _  l105 _  l106 _  l107 _  l108 _  l109 _  l110 _  l111 _
+      l112 _  l113 _  l114 _  l115 _  l116 _  l117 _  l118 _  l119 _
+      l120 _  l121 _  l122 _  l123 _  l124 _  l125 _  l126 _  l127 _
+      l128 _  l129 _  l130 _  l131 _  l132 _  l133 _  l134 _  l135 _
+      l136 _  l137 _  l138 _  l139 _  l140 _  l141 _  l142 _  l143 _
+      l144 _  l145 _  l146 _  l147 _  l148 _  l149 _  l150 _  l151 _
+      l152 _  l153 _  l154 _  l155 _  l156 _  l157 _  l158 _  l159 _
+      l160 _  l161 _  l162 _  l163 _  l164 _  l165 _  l166 _  l167 _
+      l168 _  l169 _  l170 _  l171 _  l172 _  l173 _  l174 _  l175 _
+      l176 _  l177 _  l178 _  l179 _  l180 _  l181 _  l182 _  l183 _
+      l184 _  l185 _  l186 _  l187 _  l188 _  l189 _  l190 _  l191 _
+      l192 _  l193 _  l194 _  l195 _  l196 _  l197 _  l198 _  l199 _
+      l200 _  l201 _  l202 _  l203 _  l204 _  l205 _  l206 _  l207 _
+      l208 _  l209 _  l210 _  l211 _  l212 _  l213 _  l214 _  l215 _
+      l216 _  l217 _  l218 _  l219 _  l220 _  l221 _  l222 _  l223 _
+      l224 _  l225 _  l226 _  l227 _  l228 _  l229 _  l230 _  l231 _
+      l232 _  l233 _  l234 _  l235 _  l236 _  l237 _  l238 _  l239 _
+      l240 _  l241 _  l242 _  l243 _  l244 _  l245 _  l246 _  l247 _
+      l248 _  l249 _  l250 _  l251 _  l252 _  l253 _  l254 _  l255 _
+      l256 _  l257 _  l258 _  l259 _  l260 _  l261 _  l262 _  l263 _
+      l264 _  l265 _  l266 _  l267 _  l268 _  l269 _  l270 _  l271 _
+      l272 _  l273 _  l274 _  l275 _  l276 _  l277 _  l278 _  l279 _
+      l280 _  l281 _  l282 _  l283 _  l284 _  l285 _  l286 _  l287 _
+      l288 _  l289 _  l290 _  l291 _  l292 _  l293 _  l294 _  l295 _
+      l296 _  l297 _  l298 _  l299 _  l300 _  l301 _  l302 _  l303 _
+      l304 _  l305 _  l306 _  l307 _  l308 _  l309 _  l310 _  l311 _
+      l312 _  l313 _  l314 _  l315 _  l316 _  l317 _  l318 _  l319 _
+      l320 _  l321 _  l322 _  l323 _  l324 _  l325 _  l326 _  l327 _
+      l328 _  l329 _  l330 _  l331 _  l332 _  l333 _  l334 _  l335 _
+      l336 _  l337 _  l338 _  l339 _  l340 _  l341 _  l342 _  l343 _
+      l344 _  l345 _  l346 _  l347 _  l348 _  l349 _  l350 _  l351 _
+      l352 _  l353 _  l354 _  l355 _  l356 _  l357 _  l358 _  l359 _
+      l360 _  l361 _  l362 _  l363 _  l364 _  l365 _  l366 _  l367 _
+      l368 _  l369 _  l370 _  l371 _  l372 _  l373 _  l374 _  l375 _
+      l376 _  l377 _  l378 _  l379 _  l380 _  l381 _  l382 _  l383 _
+      l384 _  l385 _  l386 _  l387 _  l388 _  l389 _  l390 _  l391 _
+      l392 _  l393 _  l394 _  l395 _  l396 _  l397 _  l398 _  l399 _
+      l400 _  l401 _  l402 _  l403 _  l404 _  l405 _  l406 _  l407 _
+      l408 _  l409 _  l410 _  l411 _  l412 _  l413 _  l414 _  l415 _
+      l416 _  l417 _  l418 _  l419 _  l420 _  l421 _  l422 _  l423 _
+      l424 _  l425 _  l426 _  l427 _  l428 _  l429 _  l430 _  l431 _
+      l432 _  l433 _  l434 _  l435 _  l436 _  l437 _  l438 _  l439 _
+      l440 _  l441 _  l442 _  l443 _  l444 _  l445 _  l446 _  l447 _
+      l448 _  l449 _  l450 _  l451 _  l452 _  l453 _  l454 _  l455 _
+      l456 _  l457 _  l458 _  l459 _  l460 _  l461 _  l462 _  l463 _
+      l464 _  l465 _  l466 _  l467 _  l468 _  l469 _  l470 _  l471 _
+      l472 _  l473 _  l474 _  l475 _  l476 _  l477 _  l478 _  l479 _
+      l480 _  l481 _  l482 _  l483 _  l484 _  l485 _  l486 _  l487 _
+      l488 _  l489 _  l490 _  l491 _  l492 _  l493 _  l494 _  l495 _
+      l496 _  l497 _  l498 _  l499 _  l500 _  l501 _  l502 _  l503 _
+      l504 _  l505 _  l506 _  l507 _  l508 _  l509 _  l510 _  l511 _
+      l512 _  l513 _  l514 _  l515 _  l516 _  l517 _  l518 _  l519 _
+      l520 _  l521 _  l522 _  l523 _  l524 _  l525 _  l526 _  l527 _
+      l528 _  l529 _  l530 _  l531 _  l532 _  l533 _  l534 _  l535 _
+      l536 _  l537 _  l538 _  l539 _  l540 _  l541 _  l542 _  l543 _
+      l544 _  l545 _  l546 _  l547 _  l548 _  l549 _  l550 _  l551 _
+      l552 _  l553 _  l554 _  l555 _  l556 _  l557 _  l558 _  l559 _
+      l560 _  l561 _  l562 _  l563 _  l564 _  l565 _  l566 _  l567 _
+      l568 _  l569 _  l570 _  l571 _  l572 _  l573 _  l574 _  l575 _
+      l576 _  l577 _  l578 _  l579 _  l580 _  l581 _  l582 _  l583 _
+      l584 _  l585 _  l586 _  l587 _  l588 _  l589 _  l590 _  l591 _
+      l592 _  l593 _  l594 _  l595 _  l596 _  l597 _  l598 _  l599 _
+      l600 _  l601 _  l602 _  l603 _  l604 _  l605 _  l606 _  l607 _
+      l608 _  l609 _  l610 _  l611 _  l612 _  l613 _  l614 _  l615 _
+      l616 _  l617 _  l618 _  l619 _  l620 _  l621 _  l622 _  l623 _
+      l624 _  l625 _  l626 _  l627 _  l628 _  l629 _  l630 _  l631 _
+      l632 _  l633 _  l634 _  l635 _  l636 _  l637 _  l638 _  l639 _
+      l640 _  l641 _  l642 _  l643 _  l644 _  l645 _  l646 _  l647 _
+      l648 _  l649 _  l650 _  l651 _  l652 _  l653 _  l654 _  l655 _
+      l656 _  l657 _  l658 _  l659 _  l660 _  l661 _  l662 _  l663 _
+      l664 _  l665 _  l666 _  l667 _  l668 _  l669 _  l670 _  l671 _
+      l672 _  l673 _  l674 _  l675 _  l676 _  l677 _  l678 _  l679 _
+      l680 _  l681 _  l682 _  l683 _  l684 _  l685 _  l686 _  l687 _
+      l688 _  l689 _  l690 _  l691 _  l692 _  l693 _  l694 _  l695 _
+      l696 _  l697 _  l698 _  l699 _  l700 _  l701 _  l702 _  l703 _
+      l704 _  l705 _  l706 _  l707 _  l708 _  l709 _  l710 _  l711 _
+      l712 _  l713 _  l714 _  l715 _  l716 _  l717 _  l718 _  l719 _
+      l720 _  l721 _  l722 _  l723 _  l724 _  l725 _  l726 _  l727 _
+      l728 _  l729 _  l730 _  l731 _  l732 _  l733 _  l734 _  l735 _
+      l736 _  l737 _  l738 _  l739 _  l740 _  l741 _  l742 _  l743 _
+      l744 _  l745 _  l746 _  l747 _  l748 _  l749 _  l750 _  l751 _
+      l752 _  l753 _  l754 _  l755 _  l756 _  l757 _  l758 _  l759 _
+      l760 _  l761 _  l762 _  l763 _  l764 _  l765 _  l766 _  l767 _
+      l768 _  l769 _  l770 _  l771 _  l772 _  l773 _  l774 _  l775 _
+      l776 _  l777 _  l778 _  l779 _  l780 _  l781 _  l782 _  l783 _
+      l784 _  l785 _  l786 _  l787 _  l788 _  l789 _  l790 _  l791 _
+      l792 _  l793 _  l794 _  l795 _  l796 _  l797 _  l798 _  l799 _
+      l800 _  l801 _  l802 _  l803 _  l804 _  l805 _  l806 _  l807 _
+      l808 _  l809 _  l810 _  l811 _  l812 _  l813 _  l814 _  l815 _
+      l816 _  l817 _  l818 _  l819 _  l820 _  l821 _  l822 _  l823 _
+      l824 _  l825 _  l826 _  l827 _  l828 _  l829 _  l830 _  l831 _
+      l832 _  l833 _  l834 _  l835 _  l836 _  l837 _  l838 _  l839 _
+      l840 _  l841 _  l842 _  l843 _  l844 _  l845 _  l846 _  l847 _
+      l848 _  l849 _  l850 _  l851 _  l852 _  l853 _  l854 _  l855 _
+      l856 _  l857 _  l858 _  l859 _  l860 _  l861 _  l862 _  l863 _
+      l864 _  l865 _  l866 _  l867 _  l868 _  l869 _  l870 _  l871 _
+      l872 _  l873 _  l874 _  l875 _  l876 _  l877 _  l878 _  l879 _
+      l880 _  l881 _  l882 _  l883 _  l884 _  l885 _  l886 _  l887 _
+      l888 _  l889 _  l890 _  l891 _  l892 _  l893 _  l894 _  l895 _
+      l896 _  l897 _  l898 _  l899 _  l900 _  l901 _  l902 _  l903 _
+      l904 _  l905 _  l906 _  l907 _  l908 _  l909 _  l910 _  l911 _
+      l912 _  l913 _  l914 _  l915 _  l916 _  l917 _  l918 _  l919 _
+      l920 _  l921 _  l922 _  l923 _  l924 _  l925 _  l926 _  l927 _
+      l928 _  l929 _  l930 _  l931 _  l932 _  l933 _  l934 _  l935 _
+      l936 _  l937 _  l938 _  l939 _  l940 _  l941 _  l942 _  l943 _
+      l944 _  l945 _  l946 _  l947 _  l948 _  l949 _  l950 _  l951 _
+      l952 _  l953 _  l954 _  l955 _  l956 _  l957 _  l958 _  l959 _
+      l960 _  l961 _  l962 _  l963 _  l964 _  l965 _  l966 _  l967 _
+      l968 _  l969 _  l970 _  l971 _  l972 _  l973 _  l974 _  l975 _
+      l976 _  l977 _  l978 _  l979 _  l980 _  l981 _  l982 _  l983 _
+      l984 _  l985 _  l986 _  l987 _  l988 _  l989 _  l990 _  l991 _
+      l992 _  l993 _  l994 _  l995 _  l996 _  l997 _  l998 _  l999 _
+     l1000 _ l1001 _ l1002 _ l1003 _ l1004 _ l1005 _ l1006 _ l1007 _
+     l1008 _ l1009 _ l1010 _ l1011 _ l1012 _ l1013 _ l1014 _ l1015 _
+     l1016 _ l1017 _ l1018 _ l1019 _ l1020 _ l1021 _ l1022 _ l1023 _
+     l1024 _ l1025 _ l1026 _ l1027 _ l1028 _ l1029 _ l1030 _ l1031 _
+     l1032 _ l1033 _ l1034 _ l1035 _ l1036 _ l1037 _ l1038 _ l1039 _
+     l1040 _ l1041 _ l1042 _ l1043 _ l1044 _ l1045 _ l1046 _ l1047 _
+     l1048 _ l1049 _ l1050 _ l1051 _ l1052 _ l1053 _ l1054 _ l1055 _
+     l1056 _ l1057 _ l1058 _ l1059 _ l1060 _ l1061 _ l1062 _ l1063 _
+     l1064 _ l1065 _ l1066 _ l1067 _ l1068 _ l1069 _ l1070 _ l1071 _
+     l1072 _ l1073 _ l1074 _ l1075 _ l1076 _ l1077 _ l1078 _ l1079 _
+     l1080 _ l1081 _ l1082 _ l1083 _ l1084 _ l1085 _ l1086 _ l1087 _
+     l1088 _ l1089 _ l1090 _ l1091 _ l1092 _ l1093 _ l1094 _ l1095 _
+     l1096 _ l1097 _ l1098 _ l1099 _ l1100 _ l1101 _ l1102 _ l1103 _
+     l1104 _ l1105 _ l1106 _ l1107 _ l1108 _ l1109 _ l1110 _ l1111 _
+     l1112 _ l1113 _ l1114 _ l1115 _ l1116 _ l1117 _ l1118 _ l1119 _
+     l1120 _ l1121 _ l1122 _ l1123 _ l1124 _ l1125 _ l1126 _ l1127 _
+     l1128 _ l1129 _ l1130 _ l1131 _ l1132 _ l1133 _ l1134 _ l1135 _
+     l1136 _ l1137 _ l1138 _ l1139 _ l1140 _ l1141 _ l1142 _ l1143 _
+     l1144 _ l1145 _ l1146 _ l1147 _ l1148 _ l1149 _ l1150 _ l1151 _
+     l1152 _ l1153 _ l1154 _ l1155 _ l1156 _ l1157 _ l1158 _ l1159 _
+     l1160 _ l1161 _ l1162 _ l1163 _ l1164 _ l1165 _ l1166 _ l1167 _
+     l1168 _ l1169 _ l1170 _ l1171 _ l1172 _ l1173 _ l1174 _ l1175 _
+     l1176 _ l1177 _ l1178 _ l1179 _ l1180 _ l1181 _ l1182 _ l1183 _
+     l1184 _ l1185 _ l1186 _ l1187 _ l1188 _ l1189 _ l1190 _ l1191 _
+     l1192 _ l1193 _ l1194 _ l1195 _ l1196 _ l1197 _ l1198 _ l1199 _
+     l1200 _ l1201 _ l1202 _ l1203 _ l1204 _ l1205 _ l1206 _ l1207 _
+     l1208 _ l1209 _ l1210 _ l1211 _ l1212 _ l1213 _ l1214 _ l1215 _
+     l1216 _ l1217 _ l1218 _ l1219 _ l1220 _ l1221 _ l1222 _ l1223 _
+     l1224 _ l1225 _ l1226 _ l1227 _ l1228 _ l1229 _ l1230 _ l1231 _
+     l1232 _ l1233 _ l1234 _ l1235 _ l1236 _ l1237 _ l1238 _ l1239 _
+     l1240 _ l1241 _ l1242 _ l1243 _ l1244 _ l1245 _ l1246 _ l1247 _
+     l1248 _ l1249 _ l1250 _ l1251 _ l1252 _ l1253 _ l1254 _ l1255 _
+     l1256 _ l1257 _ l1258 _ l1259 _ l1260 _ l1261 _ l1262 _ l1263 _
+     l1264 _ l1265 _ l1266 _ l1267 _ l1268 _ l1269 _ l1270 _ l1271 _
+     l1272 _ l1273 _ l1274 _ l1275 _ l1276 _ l1277 _ l1278 _ l1279 _
+     l1280 _ l1281 _ l1282 _ l1283 _ l1284 _ l1285 _ l1286 _ l1287 _
+     l1288 _ l1289 _ l1290 _ l1291 _ l1292 _ l1293 _ l1294 _ l1295 _
+     l1296 _ l1297 _ l1298 _ l1299 _ l1300 _ l1301 _ l1302 _ l1303 _
+     l1304 _ l1305 _ l1306 _ l1307 _ l1308 _ l1309 _ l1310 _ l1311 _
+     l1312 _ l1313 _ l1314 _ l1315 _ l1316 _ l1317 _ l1318 _ l1319 _
+     l1320 _ l1321 _ l1322 _ l1323 _ l1324 _ l1325 _ l1326 _ l1327 _
+     l1328 _ l1329 _ l1330 _ l1331 _ l1332 _ l1333 _ l1334 _ l1335 _
+     l1336 _ l1337 _ l1338 _ l1339 _ l1340 _ l1341 _ l1342 _ l1343 _
+     l1344 _ l1345 _ l1346 _ l1347 _ l1348 _ l1349 _ l1350 _ l1351 _
+     l1352 _ l1353 _ l1354 _ l1355 _ l1356 _ l1357 _ l1358 _ l1359 _
+     l1360 _ l1361 _ l1362 _ l1363 _ l1364 _ l1365 _ l1366 _ l1367 _
+     l1368 _ l1369 _ l1370 _ l1371 _ l1372 _ l1373 _ l1374 _ l1375 _
+     l1376 _ l1377 _ l1378 _ l1379 _ l1380 _ l1381 _ l1382 _ l1383 _
+     l1384 _ l1385 _ l1386 _ l1387 _ l1388 _ l1389 _ l1390 _ l1391 _
+     l1392 _ l1393 _ l1394 _ l1395 _ l1396 _ l1397 _ l1398 _ l1399 _
+     l1400 _ l1401 _ l1402 _ l1403 _ l1404 _ l1405 _ l1406 _ l1407 _
+     l1408 _ l1409 _ l1410 _ l1411 _ l1412 _ l1413 _ l1414 _ l1415 _
+     l1416 _ l1417 _ l1418 _ l1419 _ l1420 _ l1421 _ l1422 _ l1423 _
+     l1424 _ l1425 _ l1426 _ l1427 _ l1428 _ l1429 _ l1430 _ l1431 _
+     l1432 _ l1433 _ l1434 _ l1435 _ l1436 _ l1437 _ l1438 _ l1439 _
+     l1440 _ l1441 _ l1442 _ l1443 _ l1444 _ l1445 _ l1446 _ l1447 _
+     l1448 _ l1449 _ l1450 _ l1451 _ l1452 _ l1453 _ l1454 _ l1455 _
+     l1456 _ l1457 _ l1458 _ l1459 _ l1460 _ l1461 _ l1462 _ l1463 _
+     l1464 _ l1465 _ l1466 _ l1467 _ l1468 _ l1469 _ l1470 _ l1471 _
+     l1472 _ l1473 _ l1474 _ l1475 _ l1476 _ l1477 _ l1478 _ l1479 _
+     l1480 _ l1481 _ l1482 _ l1483 _ l1484 _ l1485 _ l1486 _ l1487 _
+     l1488 _ l1489 _ l1490 _ l1491 _ l1492 _ l1493 _ l1494 _ l1495 _
+     l1496 _ l1497 _ l1498 _ l1499 _ l1500 _ l1501 _ l1502 _ l1503 _
+     l1504 _ l1505 _ l1506 _ l1507 _ l1508 _ l1509 _ l1510 _ l1511 _
+     l1512 _ l1513 _ l1514 _ l1515 _ l1516 _ l1517 _ l1518 _ l1519 _
+     l1520 _ l1521 _ l1522 _ l1523 _ l1524 _ l1525 _ l1526 _ l1527 _
+     l1528 _ l1529 _ l1530 _ l1531 _ l1532 _ l1533 _ l1534 _ l1535 _
+     l1536 _ l1537 _ l1538 _ l1539 _ l1540 _ l1541 _ l1542 _ l1543 _
+     l1544 _ l1545 _ l1546 _ l1547 _ l1548 _ l1549 _ l1550 _ l1551 _
+     l1552 _ l1553 _ l1554 _ l1555 _ l1556 _ l1557 _ l1558 _ l1559 _
+     l1560 _ l1561 _ l1562 _ l1563 _ l1564 _ l1565 _ l1566 _ l1567 _
+     l1568 _ l1569 _ l1570 _ l1571 _ l1572 _ l1573 _ l1574 _ l1575 _
+     l1576 _ l1577 _ l1578 _ l1579 _ l1580 _ l1581 _ l1582 _ l1583 _
+     l1584 _ l1585 _ l1586 _ l1587 _ l1588 _ l1589 _ l1590 _ l1591 _
+     l1592 _ l1593 _ l1594 _ l1595 _ l1596 _ l1597 _ l1598 _ l1599 _
+     l1600 _ l1601 _ l1602 _ l1603 _ l1604 _ l1605 _ l1606 _ l1607 _
+     l1608 _ l1609 _ l1610 _ l1611 _ l1612 _ l1613 _ l1614 _ l1615 _
+     l1616 _ l1617 _ l1618 _ l1619 _ l1620 _ l1621 _ l1622 _ l1623 _
+     l1624 _ l1625 _ l1626 _ l1627 _ l1628 _ l1629 _ l1630 _ l1631 _
+     l1632 _ l1633 _ l1634 _ l1635 _ l1636 _ l1637 _ l1638 _ l1639 _
+     l1640 _ l1641 _ l1642 _ l1643 _ l1644 _ l1645 _ l1646 _ l1647 _
+     l1648 _ l1649 _ l1650 _ l1651 _ l1652 _ l1653 _ l1654 _ l1655 _
+     l1656 _ l1657 _ l1658 _ l1659 _ l1660 _ l1661 _ l1662 _ l1663 _
+     l1664 _ l1665 _ l1666 _ l1667 _ l1668 _ l1669 _ l1670 _ l1671 _
+     l1672 _ l1673 _ l1674 _ l1675 _ l1676 _ l1677 _ l1678 _ l1679 _
+     l1680 _ l1681 _ l1682 _ l1683 _ l1684 _ l1685 _ l1686 _ l1687 _
+     l1688 _ l1689 _ l1690 _ l1691 _ l1692 _ l1693 _ l1694 _ l1695 _
+     l1696 _ l1697 _ l1698 _ l1699 _ l1700 _ l1701 _ l1702 _ l1703 _
+     l1704 _ l1705 _ l1706 _ l1707 _ l1708 _ l1709 _ l1710 _ l1711 _
+     l1712 _ l1713 _ l1714 _ l1715 _ l1716 _ l1717 _ l1718 _ l1719 _
+     l1720 _ l1721 _ l1722 _ l1723 _ l1724 _ l1725 _ l1726 _ l1727 _
+     l1728 _ l1729 _ l1730 _ l1731 _ l1732 _ l1733 _ l1734 _ l1735 _
+     l1736 _ l1737 _ l1738 _ l1739 _ l1740 _ l1741 _ l1742 _ l1743 _
+     l1744 _ l1745 _ l1746 _ l1747 _ l1748 _ l1749 _ l1750 _ l1751 _
+     l1752 _ l1753 _ l1754 _ l1755 _ l1756 _ l1757 _ l1758 _ l1759 _
+     l1760 _ l1761 _ l1762 _ l1763 _ l1764 _ l1765 _ l1766 _ l1767 _
+     l1768 _ l1769 _ l1770 _ l1771 _ l1772 _ l1773 _ l1774 _ l1775 _
+     l1776 _ l1777 _ l1778 _ l1779 _ l1780 _ l1781 _ l1782 _ l1783 _
+     l1784 _ l1785 _ l1786 _ l1787 _ l1788 _ l1789 _ l1790 _ l1791 _
+     l1792 _ l1793 _ l1794 _ l1795 _ l1796 _ l1797 _ l1798 _ l1799 _
+     l1800 _ l1801 _ l1802 _ l1803 _ l1804 _ l1805 _ l1806 _ l1807 _
+     l1808 _ l1809 _ l1810 _ l1811 _ l1812 _ l1813 _ l1814 _ l1815 _
+     l1816 _ l1817 _ l1818 _ l1819 _ l1820 _ l1821 _ l1822 _ l1823 _
+     l1824 _ l1825 _ l1826 _ l1827 _ l1828 _ l1829 _ l1830 _ l1831 _
+     l1832 _ l1833 _ l1834 _ l1835 _ l1836 _ l1837 _ l1838 _ l1839 _
+     l1840 _ l1841 _ l1842 _ l1843 _ l1844 _ l1845 _ l1846 _ l1847 _
+     l1848 _ l1849 _ l1850 _ l1851 _ l1852 _ l1853 _ l1854 _ l1855 _
+     l1856 _ l1857 _ l1858 _ l1859 _ l1860 _ l1861 _ l1862 _ l1863 _
+     l1864 _ l1865 _ l1866 _ l1867 _ l1868 _ l1869 _ l1870 _ l1871 _
+     l1872 _ l1873 _ l1874 _ l1875 _ l1876 _ l1877 _ l1878 _ l1879 _
+     l1880 _ l1881 _ l1882 _ l1883 _ l1884 _ l1885 _ l1886 _ l1887 _
+     l1888 _ l1889 _ l1890 _ l1891 _ l1892 _ l1893 _ l1894 _ l1895 _
+     l1896 _ l1897 _ l1898 _ l1899 _ l1900 _ l1901 _ l1902 _ l1903 _
+     l1904 _ l1905 _ l1906 _ l1907 _ l1908 _ l1909 _ l1910 _ l1911 _
+     l1912 _ l1913 _ l1914 _ l1915 _ l1916 _ l1917 _ l1918 _ l1919 _
+     l1920 _ l1921 _ l1922 _ l1923 _ l1924 _ l1925 _ l1926 _ l1927 _
+     l1928 _ l1929 _ l1930 _ l1931 _ l1932 _ l1933 _ l1934 _ l1935 _
+     l1936 _ l1937 _ l1938 _ l1939 _ l1940 _ l1941 _ l1942 _ l1943 _
+     l1944 _ l1945 _ l1946 _ l1947 _ l1948 _ l1949 _ l1950 _ l1951 _
+     l1952 _ l1953 _ l1954 _ l1955 _ l1956 _ l1957 _ l1958 _ l1959 _
+     l1960 _ l1961 _ l1962 _ l1963 _ l1964 _ l1965 _ l1966 _ l1967 _
+     l1968 _ l1969 _ l1970 _ l1971 _ l1972 _ l1973 _ l1974 _ l1975 _
+     l1976 _ l1977 _ l1978 _ l1979 _ l1980 _ l1981 _ l1982 _ l1983 _
+     l1984 _ l1985 _ l1986 _ l1987 _ l1988 _ l1989 _ l1990 _ l1991 _
+     l1992 _ l1993 _ l1994 _ l1995 _ l1996 _ l1997 _ l1998 _ l1999 _
+     l2000 _ l2001 _ l2002 _ l2003 _ l2004 _ l2005 _ l2006 _ l2007 _
+     l2008 _ l2009 _ l2010 _ l2011 _ l2012 _ l2013 _ l2014 _ l2015 _
+     l2016 _ l2017 _ l2018 _ l2019 _ l2020 _ l2021 _ l2022 _ l2023 _
+     l2024 _ l2025 _ l2026 _ l2027 _ l2028 _ l2029 _ l2030 _ l2031 _
+     l2032 _ l2033 _ l2034 _ l2035 _ l2036 _ l2037 _ l2038 _ l2039 _
+     l2040 _ l2041 _ l2042 _ l2043 _ l2044 _ l2045 _ l2046 _ l2047 _
+     l2048 _ l2049 _ l2050 _ l2051 _ l2052 _ l2053 _ l2054 _ l2055 _
+     l2056 _ l2057 _ l2058 _ l2059 _ l2060 _ l2061 _ l2062 _ l2063 _
+     l2064 _ l2065 _ l2066 _ l2067 _ l2068 _ l2069 _ l2070 _ l2071 _
+     l2072 _ l2073 _ l2074 _ l2075 _ l2076 _ l2077 _ l2078 _ l2079 _
+     l2080 _ l2081 _ l2082 _ l2083 _ l2084 _ l2085 _ l2086 _ l2087 _
+     l2088 _ l2089 _ l2090 _ l2091 _ l2092 _ l2093 _ l2094 _ l2095 _
+     l2096 _ l2097 _ l2098 _ l2099 _ l2100 _ l2101 _ l2102 _ l2103 _
+     l2104 _ l2105 _ l2106 _ l2107 _ l2108 _ l2109 _ l2110 _ l2111 _
+     l2112 _ l2113 _ l2114 _ l2115 _ l2116 _ l2117 _ l2118 _ l2119 _
+     l2120 _ l2121 _ l2122 _ l2123 _ l2124 _ l2125 _ l2126 _ l2127 _
+     l2128 _ l2129 _ l2130 _ l2131 _ l2132 _ l2133 _ l2134 _ l2135 _
+     l2136 _ l2137 _ l2138 _ l2139 _ l2140 _ l2141 _ l2142 _ l2143 _
+     l2144 _ l2145 _ l2146 _ l2147 _ l2148 _ l2149 _ l2150 _ l2151 _
+     l2152 _ l2153 _ l2154 _ l2155 _ l2156 _ l2157 _ l2158 _ l2159 _
+     l2160 _ l2161 _ l2162 _ l2163 _ l2164 _ l2165 _ l2166 _ l2167 _
+     l2168 _ l2169 _ l2170 _ l2171 _ l2172 _ l2173 _ l2174 _ l2175 _
+     l2176 _ l2177 _ l2178 _ l2179 _ l2180 _ l2181 _ l2182 _ l2183 _
+     l2184 _ l2185 _ l2186 _ l2187 _ l2188 _ l2189 _ l2190 _ l2191 _
+     l2192 _ l2193 _ l2194 _ l2195 _ l2196 _ l2197 _ l2198 _ l2199 _
+     l2200 _ l2201 _ l2202 _ l2203 _ l2204 _ l2205 _ l2206 _ l2207 _
+     l2208 _ l2209 _ l2210 _ l2211 _ l2212 _ l2213 _ l2214 _ l2215 _
+     l2216 _ l2217 _ l2218 _ l2219 _ l2220 _ l2221 _ l2222 _ l2223 _
+     l2224 _ l2225 _ l2226 _ l2227 _ l2228 _ l2229 _ l2230 _ l2231 _
+     l2232 _ l2233 _ l2234 _ l2235 _ l2236 _ l2237 _ l2238 _ l2239 _
+     l2240 _ l2241 _ l2242 _ l2243 _ l2244 _ l2245 _ l2246 _ l2247 _
+     l2248 _ l2249 _ l2250 _ l2251 _ l2252 _ l2253 _ l2254 _ l2255 _
+     l2256 _ l2257 _ l2258 _ l2259 _ l2260 _ l2261 _ l2262 _ l2263 _
+     l2264 _ l2265 _ l2266 _ l2267 _ l2268 _ l2269 _ l2270 _ l2271 _
+     l2272 _ l2273 _ l2274 _ l2275 _ l2276 _ l2277 _ l2278 _ l2279 _
+     l2280 _ l2281 _ l2282 _ l2283 _ l2284 _ l2285 _ l2286 _ l2287 _
+     l2288 _ l2289 _ l2290 _ l2291 _ l2292 _ l2293 _ l2294 _ l2295 _
+     l2296 _ l2297 _ l2298 _ l2299 _ l2300 _ l2301 _ l2302 _ l2303 _
+     l2304 _ l2305 _ l2306 _ l2307 _ l2308 _ l2309 _ l2310 _ l2311 _
+     l2312 _ l2313 _ l2314 _ l2315 _ l2316 _ l2317 _ l2318 _ l2319 _
+     l2320 _ l2321 _ l2322 _ l2323 _ l2324 _ l2325 _ l2326 _ l2327 _
+     l2328 _ l2329 _ l2330 _ l2331 _ l2332 _ l2333 _ l2334 _ l2335 _
+     l2336 _ l2337 _ l2338 _ l2339 _ l2340 _ l2341 _ l2342 _ l2343 _
+     l2344 _ l2345 _ l2346 _ l2347 _ l2348 _ l2349 _ l2350 _ l2351 _
+     l2352 _ l2353 _ l2354 _ l2355 _ l2356 _ l2357 _ l2358 _ l2359 _
+     l2360 _ l2361 _ l2362 _ l2363 _ l2364 _ l2365 _ l2366 _ l2367 _
+     l2368 _ l2369 _ l2370 _ l2371 _ l2372 _ l2373 _ l2374 _ l2375 _
+     l2376 _ l2377 _ l2378 _ l2379 _ l2380 _ l2381 _ l2382 _ l2383 _
+     l2384 _ l2385 _ l2386 _ l2387 _ l2388 _ l2389 _ l2390 _ l2391 _
+     l2392 _ l2393 _ l2394 _ l2395 _ l2396 _ l2397 _ l2398 _ l2399 _
+     l2400 _ l2401 _ l2402 _ l2403 _ l2404 _ l2405 _ l2406 _ l2407 _
+     l2408 _ l2409 _ l2410 _ l2411 _ l2412 _ l2413 _ l2414 _ l2415 _
+     l2416 _ l2417 _ l2418 _ l2419 _ l2420 _ l2421 _ l2422 _ l2423 _
+     l2424 _ l2425 _ l2426 _ l2427 _ l2428 _ l2429 _ l2430 _ l2431 _
+     l2432 _ l2433 _ l2434 _ l2435 _ l2436 _ l2437 _ l2438 _ l2439 _
+     l2440 _ l2441 _ l2442 _ l2443 _ l2444 _ l2445 _ l2446 _ l2447 _
+     l2448 _ l2449 _ l2450 _ l2451 _ l2452 _ l2453 _ l2454 _ l2455 _
+     l2456 _ l2457 _ l2458 _ l2459 _ l2460 _ l2461 _ l2462 _ l2463 _
+     l2464 _ l2465 _ l2466 _ l2467 _ l2468 _ l2469 _ l2470 _ l2471 _
+     l2472 _ l2473 _ l2474 _ l2475 _ l2476 _ l2477 _ l2478 _ l2479 _
+     l2480 _ l2481 _ l2482 _ l2483 _ l2484 _ l2485 _ l2486 _ l2487 _
+     l2488 _ l2489 _ l2490 _ l2491 _ l2492 _ l2493 _ l2494 _ l2495 _
+     l2496 _ l2497 _ l2498 _ l2499 _ l2500 _ l2501 _ l2502 _ l2503 _
+     l2504 _ l2505 _ l2506 _ l2507 _ l2508 _ l2509 _ l2510 _ l2511 _
+     l2512 _ l2513 _ l2514 _ l2515 _ l2516 _ l2517 _ l2518 _ l2519 _
+     l2520 _ l2521 _ l2522 _ l2523 _ l2524 _ l2525 _ l2526 _ l2527 _
+     l2528 _ l2529 _ l2530 _ l2531 _ l2532 _ l2533 _ l2534 _ l2535 _
+     l2536 _ l2537 _ l2538 _ l2539 _ l2540 _ l2541 _ l2542 _ l2543 _
+     l2544 _ l2545 _ l2546 _ l2547 _ l2548 _ l2549 _ l2550 _ l2551 _
+     l2552 _ l2553 _ l2554 _ l2555 _ l2556 _ l2557 _ l2558 _ l2559 _
+     l2560 _ l2561 _ l2562 _ l2563 _ l2564 _ l2565 _ l2566 _ l2567 _
+     l2568 _ l2569 _ l2570 _ l2571 _ l2572 _ l2573 _ l2574 _ l2575 _
+     l2576 _ l2577 _ l2578 _ l2579 _ l2580 _ l2581 _ l2582 _ l2583 _
+     l2584 _ l2585 _ l2586 _ l2587 _ l2588 _ l2589 _ l2590 _ l2591 _
+     l2592 _ l2593 _ l2594 _ l2595 _ l2596 _ l2597 _ l2598 _ l2599 _
+     l2600 _ l2601 _ l2602 _ l2603 _ l2604 _ l2605 _ l2606 _ l2607 _
+     l2608 _ l2609 _ l2610 _ l2611 _ l2612 _ l2613 _ l2614 _ l2615 _
+     l2616 _ l2617 _ l2618 _ l2619 _ l2620 _ l2621 _ l2622 _ l2623 _
+     l2624 _ l2625 _ l2626 _ l2627 _ l2628 _ l2629 _ l2630 _ l2631 _
+     l2632 _ l2633 _ l2634 _ l2635 _ l2636 _ l2637 _ l2638 _ l2639 _
+     l2640 _ l2641 _ l2642 _ l2643 _ l2644 _ l2645 _ l2646 _ l2647 _
+     l2648 _ l2649 _ l2650 _ l2651 _ l2652 _ l2653 _ l2654 _ l2655 _
+     l2656 _ l2657 _ l2658 _ l2659 _ l2660 _ l2661 _ l2662 _ l2663 _
+     l2664 _ l2665 _ l2666 _ l2667 _ l2668 _ l2669 _ l2670 _ l2671 _
+     l2672 _ l2673 _ l2674 _ l2675 _ l2676 _ l2677 _ l2678 _ l2679 _
+     l2680 _ l2681 _ l2682 _ l2683 _ l2684 _ l2685 _ l2686 _ l2687 _
+     l2688 _ l2689 _ l2690 _ l2691 _ l2692 _ l2693 _ l2694 _ l2695 _
+     l2696 _ l2697 _ l2698 _ l2699 _ l2700 _ l2701 _ l2702 _ l2703 _
+     l2704 _ l2705 _ l2706 _ l2707 _ l2708 _ l2709 _ l2710 _ l2711 _
+     l2712 _ l2713 _ l2714 _ l2715 _ l2716 _ l2717 _ l2718 _ l2719 _
+     l2720 _ l2721 _ l2722 _ l2723 _ l2724 _ l2725 _ l2726 _ l2727 _
+     l2728 _ l2729 _ l2730 _ l2731 _ l2732 _ l2733 _ l2734 _ l2735 _
+     l2736 _ l2737 _ l2738 _ l2739 _ l2740 _ l2741 _ l2742 _ l2743 _
+     l2744 _ l2745 _ l2746 _ l2747 _ l2748 _ l2749 _ l2750 _ l2751 _
+     l2752 _ l2753 _ l2754 _ l2755 _ l2756 _ l2757 _ l2758 _ l2759 _
+     l2760 _ l2761 _ l2762 _ l2763 _ l2764 _ l2765 _ l2766 _ l2767 _
+     l2768 _ l2769 _ l2770 _ l2771 _ l2772 _ l2773 _ l2774 _ l2775 _
+     l2776 _ l2777 _ l2778 _ l2779 _ l2780 _ l2781 _ l2782 _ l2783 _
+     l2784 _ l2785 _ l2786 _ l2787 _ l2788 _ l2789 _ l2790 _ l2791 _
+     l2792 _ l2793 _ l2794 _ l2795 _ l2796 _ l2797 _ l2798 _ l2799 _
+     l2800 _ l2801 _ l2802 _ l2803 _ l2804 _ l2805 _ l2806 _ l2807 _
+     l2808 _ l2809 _ l2810 _ l2811 _ l2812 _ l2813 _ l2814 _ l2815 _
+     l2816 _ l2817 _ l2818 _ l2819 _ l2820 _ l2821 _ l2822 _ l2823 _
+     l2824 _ l2825 _ l2826 _ l2827 _ l2828 _ l2829 _ l2830 _ l2831 _
+     l2832 _ l2833 _ l2834 _ l2835 _ l2836 _ l2837 _ l2838 _ l2839 _
+     l2840 _ l2841 _ l2842 _ l2843 _ l2844 _ l2845 _ l2846 _ l2847 _
+     l2848 _ l2849 _ l2850 _ l2851 _ l2852 _ l2853 _ l2854 _ l2855 _
+     l2856 _ l2857 _ l2858 _ l2859 _ l2860 _ l2861 _ l2862 _ l2863 _
+     l2864 _ l2865 _ l2866 _ l2867 _ l2868 _ l2869 _ l2870 _ l2871 _
+     l2872 _ l2873 _ l2874 _ l2875 _ l2876 _ l2877 _ l2878 _ l2879 _
+     l2880 _ l2881 _ l2882 _ l2883 _ l2884 _ l2885 _ l2886 _ l2887 _
+     l2888 _ l2889 _ l2890 _ l2891 _ l2892 _ l2893 _ l2894 _ l2895 _
+     l2896 _ l2897 _ l2898 _ l2899 _ l2900 _ l2901 _ l2902 _ l2903 _
+     l2904 _ l2905 _ l2906 _ l2907 _ l2908 _ l2909 _ l2910 _ l2911 _
+     l2912 _ l2913 _ l2914 _ l2915 _ l2916 _ l2917 _ l2918 _ l2919 _
+     l2920 _ l2921 _ l2922 _ l2923 _ l2924 _ l2925 _ l2926 _ l2927 _
+     l2928 _ l2929 _ l2930 _ l2931 _ l2932 _ l2933 _ l2934 _ l2935 _
+     l2936 _ l2937 _ l2938 _ l2939 _ l2940 _ l2941 _ l2942 _ l2943 _
+     l2944 _ l2945 _ l2946 _ l2947 _ l2948 _ l2949 _ l2950 _ l2951 _
+     l2952 _ l2953 _ l2954 _ l2955 _ l2956 _ l2957 _ l2958 _ l2959 _
+     l2960 _ l2961 _ l2962 _ l2963 _ l2964 _ l2965 _ l2966 _ l2967 _
+     l2968 _ l2969 _ l2970 _ l2971 _ l2972 _ l2973 _ l2974 _ l2975 _
+     l2976 _ l2977 _ l2978 _ l2979 _ l2980 _ l2981 _ l2982 _ l2983 _
+     l2984 _ l2985 _ l2986 _ l2987 _ l2988 _ l2989 _ l2990 _ l2991 _
+     l2992 _ l2993 _ l2994 _ l2995 _ l2996 _ l2997 _ l2998 _ l2999 _
+     l3000 _ l3001 _ l3002 _ l3003 _ l3004 _ l3005 _ l3006 _ l3007 _
+     l3008 _ l3009 _ l3010 _ l3011 _ l3012 _ l3013 _ l3014 _ l3015 _
+     l3016 _ l3017 _ l3018 _ l3019 _ l3020 _ l3021 _ l3022 _ l3023 _
+     l3024 _ l3025 _ l3026 _ l3027 _ l3028 _ l3029 _ l3030 _ l3031 _
+     l3032 _ l3033 _ l3034 _ l3035 _ l3036 _ l3037 _ l3038 _ l3039 _
+     l3040 _ l3041 _ l3042 _ l3043 _ l3044 _ l3045 _ l3046 _ l3047 _
+     l3048 _ l3049 _ l3050 _ l3051 _ l3052 _ l3053 _ l3054 _ l3055 _
+     l3056 _ l3057 _ l3058 _ l3059 _ l3060 _ l3061 _ l3062 _ l3063 _
+     l3064 _ l3065 _ l3066 _ l3067 _ l3068 _ l3069 _ l3070 _ l3071 _
+     l3072 _ l3073 _ l3074 _ l3075 _ l3076 _ l3077 _ l3078 _ l3079 _
+     l3080 _ l3081 _ l3082 _ l3083 _ l3084 _ l3085 _ l3086 _ l3087 _
+     l3088 _ l3089 _ l3090 _ l3091 _ l3092 _ l3093 _ l3094 _ l3095 _
+     l3096 _ l3097 _ l3098 _ l3099 _ l3100 _ l3101 _ l3102 _ l3103 _
+     l3104 _ l3105 _ l3106 _ l3107 _ l3108 _ l3109 _ l3110 _ l3111 _
+     l3112 _ l3113 _ l3114 _ l3115 _ l3116 _ l3117 _ l3118 _ l3119 _
+     l3120 _ l3121 _ l3122 _ l3123 _ l3124 _ l3125 _ l3126 _ l3127 _
+     l3128 _ l3129 _ l3130 _ l3131 _ l3132 _ l3133 _ l3134 _ l3135 _
+     l3136 _ l3137 _ l3138 _ l3139 _ l3140 _ l3141 _ l3142 _ l3143 _
+     l3144 _ l3145 _ l3146 _ l3147 _ l3148 _ l3149 _ l3150 _ l3151 _
+     l3152 _ l3153 _ l3154 _ l3155 _ l3156 _ l3157 _ l3158 _ l3159 _
+     l3160 _ l3161 _ l3162 _ l3163 _ l3164 _ l3165 _ l3166 _ l3167 _
+     l3168 _ l3169 _ l3170 _ l3171 _ l3172 _ l3173 _ l3174 _ l3175 _
+     l3176 _ l3177 _ l3178 _ l3179 _ l3180 _ l3181 _ l3182 _ l3183 _
+     l3184 _ l3185 _ l3186 _ l3187 _ l3188 _ l3189 _ l3190 _ l3191 _
+     l3192 _ l3193 _ l3194 _ l3195 _ l3196 _ l3197 _ l3198 _ l3199 _
+     l3200 _ l3201 _ l3202 _ l3203 _ l3204 _ l3205 _ l3206 _ l3207 _
+     l3208 _ l3209 _ l3210 _ l3211 _ l3212 _ l3213 _ l3214 _ l3215 _
+     l3216 _ l3217 _ l3218 _ l3219 _ l3220 _ l3221 _ l3222 _ l3223 _
+     l3224 _ l3225 _ l3226 _ l3227 _ l3228 _ l3229 _ l3230 _ l3231 _
+     l3232 _ l3233 _ l3234 _ l3235 _ l3236 _ l3237 _ l3238 _ l3239 _
+     l3240 _ l3241 _ l3242 _ l3243 _ l3244 _ l3245 _ l3246 _ l3247 _
+     l3248 _ l3249 _ l3250 _ l3251 _ l3252 _ l3253 _ l3254 _ l3255 _
+     l3256 _ l3257 _ l3258 _ l3259 _ l3260 _ l3261 _ l3262 _ l3263 _
+     l3264 _ l3265 _ l3266 _ l3267 _ l3268 _ l3269 _ l3270 _ l3271 _
+     l3272 _ l3273 _ l3274 _ l3275 _ l3276 _ l3277 _ l3278 _ l3279 _
+     l3280 _ l3281 _ l3282 _ l3283 _ l3284 _ l3285 _ l3286 _ l3287 _
+     l3288 _ l3289 _ l3290 _ l3291 _ l3292 _ l3293 _ l3294 _ l3295 _
+     l3296 _ l3297 _ l3298 _ l3299 _ l3300 _ l3301 _ l3302 _ l3303 _
+     l3304 _ l3305 _ l3306 _ l3307 _ l3308 _ l3309 _ l3310 _ l3311 _
+     l3312 _ l3313 _ l3314 _ l3315 _ l3316 _ l3317 _ l3318 _ l3319 _
+     l3320 _ l3321 _ l3322 _ l3323 _ l3324 _ l3325 _ l3326 _ l3327 _
+     l3328 _ l3329 _ l3330 _ l3331 _ l3332 _ l3333 _ l3334 _ l3335 _
+     l3336 _ l3337 _ l3338 _ l3339 _ l3340 _ l3341 _ l3342 _ l3343 _
+     l3344 _ l3345 _ l3346 _ l3347 _ l3348 _ l3349 _ l3350 _ l3351 _
+     l3352 _ l3353 _ l3354 _ l3355 _ l3356 _ l3357 _ l3358 _ l3359 _
+     l3360 _ l3361 _ l3362 _ l3363 _ l3364 _ l3365 _ l3366 _ l3367 _
+     l3368 _ l3369 _ l3370 _ l3371 _ l3372 _ l3373 _ l3374 _ l3375 _
+     l3376 _ l3377 _ l3378 _ l3379 _ l3380 _ l3381 _ l3382 _ l3383 _
+     l3384 _ l3385 _ l3386 _ l3387 _ l3388 _ l3389 _ l3390 _ l3391 _
+     l3392 _ l3393 _ l3394 _ l3395 _ l3396 _ l3397 _ l3398 _ l3399 _
+     l3400 _ l3401 _ l3402 _ l3403 _ l3404 _ l3405 _ l3406 _ l3407 _
+     l3408 _ l3409 _ l3410 _ l3411 _ l3412 _ l3413 _ l3414 _ l3415 _
+     l3416 _ l3417 _ l3418 _ l3419 _ l3420 _ l3421 _ l3422 _ l3423 _
+     l3424 _ l3425 _ l3426 _ l3427 _ l3428 _ l3429 _ l3430 _ l3431 _
+     l3432 _ l3433 _ l3434 _ l3435 _ l3436 _ l3437 _ l3438 _ l3439 _
+     l3440 _ l3441 _ l3442 _ l3443 _ l3444 _ l3445 _ l3446 _ l3447 _
+     l3448 _ l3449 _ l3450 _ l3451 _ l3452 _ l3453 _ l3454 _ l3455 _
+     l3456 _ l3457 _ l3458 _ l3459 _ l3460 _ l3461 _ l3462 _ l3463 _
+     l3464 _ l3465 _ l3466 _ l3467 _ l3468 _ l3469 _ l3470 _ l3471 _
+     l3472 _ l3473 _ l3474 _ l3475 _ l3476 _ l3477 _ l3478 _ l3479 _
+     l3480 _ l3481 _ l3482 _ l3483 _ l3484 _ l3485 _ l3486 _ l3487 _
+     l3488 _ l3489 _ l3490 _ l3491 _ l3492 _ l3493 _ l3494 _ l3495 _
+     l3496 _ l3497 _ l3498 _ l3499 _ l3500 _ l3501 _ l3502 _ l3503 _
+     l3504 _ l3505 _ l3506 _ l3507 _ l3508 _ l3509 _ l3510 _ l3511 _
+     l3512 _ l3513 _ l3514 _ l3515 _ l3516 _ l3517 _ l3518 _ l3519 _
+     l3520 _ l3521 _ l3522 _ l3523 _ l3524 _ l3525 _ l3526 _ l3527 _
+     l3528 _ l3529 _ l3530 _ l3531 _ l3532 _ l3533 _ l3534 _ l3535 _
+     l3536 _ l3537 _ l3538 _ l3539 _ l3540 _ l3541 _ l3542 _ l3543 _
+     l3544 _ l3545 _ l3546 _ l3547 _ l3548 _ l3549 _ l3550 _ l3551 _
+     l3552 _ l3553 _ l3554 _ l3555 _ l3556 _ l3557 _ l3558 _ l3559 _
+     l3560 _ l3561 _ l3562 _ l3563 _ l3564 _ l3565 _ l3566 _ l3567 _
+     l3568 _ l3569 _ l3570 _ l3571 _ l3572 _ l3573 _ l3574 _ l3575 _
+     l3576 _ l3577 _ l3578 _ l3579 _ l3580 _ l3581 _ l3582 _ l3583 _
+     l3584 _ l3585 _ l3586 _ l3587 _ l3588 _ l3589 _ l3590 _ l3591 _
+     l3592 _ l3593 _ l3594 _ l3595 _ l3596 _ l3597 _ l3598 _ l3599 _
+     l3600 _ l3601 _ l3602 _ l3603 _ l3604 _ l3605 _ l3606 _ l3607 _
+     l3608 _ l3609 _ l3610 _ l3611 _ l3612 _ l3613 _ l3614 _ l3615 _
+     l3616 _ l3617 _ l3618 _ l3619 _ l3620 _ l3621 _ l3622 _ l3623 _
+     l3624 _ l3625 _ l3626 _ l3627 _ l3628 _ l3629 _ l3630 _ l3631 _
+     l3632 _ l3633 _ l3634 _ l3635 _ l3636 _ l3637 _ l3638 _ l3639 _
+     l3640 _ l3641 _ l3642 _ l3643 _ l3644 _ l3645 _ l3646 _ l3647 _
+     l3648 _ l3649 _ l3650 _ l3651 _ l3652 _ l3653 _ l3654 _ l3655 _
+     l3656 _ l3657 _ l3658 _ l3659 _ l3660 _ l3661 _ l3662 _ l3663 _
+     l3664 _ l3665 _ l3666 _ l3667 _ l3668 _ l3669 _ l3670 _ l3671 _
+     l3672 _ l3673 _ l3674 _ l3675 _ l3676 _ l3677 _ l3678 _ l3679 _
+     l3680 _ l3681 _ l3682 _ l3683 _ l3684 _ l3685 _ l3686 _ l3687 _
+     l3688 _ l3689 _ l3690 _ l3691 _ l3692 _ l3693 _ l3694 _ l3695 _
+     l3696 _ l3697 _ l3698 _ l3699 _ l3700 _ l3701 _ l3702 _ l3703 _
+     l3704 _ l3705 _ l3706 _ l3707 _ l3708 _ l3709 _ l3710 _ l3711 _
+     l3712 _ l3713 _ l3714 _ l3715 _ l3716 _ l3717 _ l3718 _ l3719 _
+     l3720 _ l3721 _ l3722 _ l3723 _ l3724 _ l3725 _ l3726 _ l3727 _
+     l3728 _ l3729 _ l3730 _ l3731 _ l3732 _ l3733 _ l3734 _ l3735 _
+     l3736 _ l3737 _ l3738 _ l3739 _ l3740 _ l3741 _ l3742 _ l3743 _
+     l3744 _ l3745 _ l3746 _ l3747 _ l3748 _ l3749 _ l3750 _ l3751 _
+     l3752 _ l3753 _ l3754 _ l3755 _ l3756 _ l3757 _ l3758 _ l3759 _
+     l3760 _ l3761 _ l3762 _ l3763 _ l3764 _ l3765 _ l3766 _ l3767 _
+     l3768 _ l3769 _ l3770 _ l3771 _ l3772 _ l3773 _ l3774 _ l3775 _
+     l3776 _ l3777 _ l3778 _ l3779 _ l3780 _ l3781 _ l3782 _ l3783 _
+     l3784 _ l3785 _ l3786 _ l3787 _ l3788 _ l3789 _ l3790 _ l3791 _
+     l3792 _ l3793 _ l3794 _ l3795 _ l3796 _ l3797 _ l3798 _ l3799 _
+     l3800 _ l3801 _ l3802 _ l3803 _ l3804 _ l3805 _ l3806 _ l3807 _
+     l3808 _ l3809 _ l3810 _ l3811 _ l3812 _ l3813 _ l3814 _ l3815 _
+     l3816 _ l3817 _ l3818 _ l3819 _ l3820 _ l3821 _ l3822 _ l3823 _
+     l3824 _ l3825 _ l3826 _ l3827 _ l3828 _ l3829 _ l3830 _ l3831 _
+     l3832 _ l3833 _ l3834 _ l3835 _ l3836 _ l3837 _ l3838 _ l3839 _
+     l3840 _ l3841 _ l3842 _ l3843 _ l3844 _ l3845 _ l3846 _ l3847 _
+     l3848 _ l3849 _ l3850 _ l3851 _ l3852 _ l3853 _ l3854 _ l3855 _
+     l3856 _ l3857 _ l3858 _ l3859 _ l3860 _ l3861 _ l3862 _ l3863 _
+     l3864 _ l3865 _ l3866 _ l3867 _ l3868 _ l3869 _ l3870 _ l3871 _
+     l3872 _ l3873 _ l3874 _ l3875 _ l3876 _ l3877 _ l3878 _ l3879 _
+     l3880 _ l3881 _ l3882 _ l3883 _ l3884 _ l3885 _ l3886 _ l3887 _
+     l3888 _ l3889 _ l3890 _ l3891 _ l3892 _ l3893 _ l3894 _ l3895 _
+     l3896 _ l3897 _ l3898 _ l3899 _ l3900 _ l3901 _ l3902 _ l3903 _
+     l3904 _ l3905 _ l3906 _ l3907 _ l3908 _ l3909 _ l3910 _ l3911 _
+     l3912 _ l3913 _ l3914 _ l3915 _ l3916 _ l3917 _ l3918 _ l3919 _
+     l3920 _ l3921 _ l3922 _ l3923 _ l3924 _ l3925 _ l3926 _ l3927 _
+     l3928 _ l3929 _ l3930 _ l3931 _ l3932 _ l3933 _ l3934 _ l3935 _
+     l3936 _ l3937 _ l3938 _ l3939 _ l3940 _ l3941 _ l3942 _ l3943 _
+     l3944 _ l3945 _ l3946 _ l3947 _ l3948 _ l3949 _ l3950 _ l3951 _
+     l3952 _ l3953 _ l3954 _ l3955 _ l3956 _ l3957 _ l3958 _ l3959 _
+     l3960 _ l3961 _ l3962 _ l3963 _ l3964 _ l3965 _ l3966 _ l3967 _
+     l3968 _ l3969 _ l3970 _ l3971 _ l3972 _ l3973 _ l3974 _ l3975 _
+     l3976 _ l3977 _ l3978 _ l3979 _ l3980 _ l3981 _ l3982 _ l3983 _
+     l3984 _ l3985 _ l3986 _ l3987 _ l3988 _ l3989 _ l3990 _ l3991 _
+     l3992 _ l3993 _ l3994 _ l3995 _ l3996 _ l3997 _ l3998 _ l3999 _
+     l4000 _ l4001 _ l4002 _ l4003 _ l4004 _ l4005 _ l4006 _ l4007 _
+     l4008 _ l4009 _ l4010 _ l4011 _ l4012 _ l4013 _ l4014 _ l4015 _
+     l4016 _ l4017 _ l4018 _ l4019 _ l4020 _ l4021 _ l4022 _ l4023 _
+     l4024 _ l4025 _ l4026 _ l4027 _ l4028 _ l4029 _ l4030 _ l4031 _
+     l4032 _ l4033 _ l4034 _ l4035 _ l4036 _ l4037 _ l4038 _ l4039 _
+     l4040 _ l4041 _ l4042 _ l4043 _ l4044 _ l4045 _ l4046 _ l4047 _
+     l4048 _ l4049 _ l4050 _ l4051 _ l4052 _ l4053 _ l4054 _ l4055 _
+     l4056 _ l4057 _ l4058 _ l4059 _ l4060 _ l4061 _ l4062 _ l4063 _
+     l4064 _ l4065 _ l4066 _ l4067 _ l4068 _ l4069 _ l4070 _ l4071 _
+     l4072 _ l4073 _ l4074 _ l4075 _ l4076 _ l4077 _ l4078 _ l4079 _
+     l4080 _ l4081 _ l4082 _ l4083 _ l4084 _ l4085 _ l4086 _ l4087 _
+     l4088 _ l4089 _ l4090 _ l4091 _ l4092 _ l4093 _ l4094 _ l4095 _
+];
+
+# Artificial registers used to hold function inputs
+define register offset=0x20000000 size=8 [
+      i0q   i1q   i2q   i3q   i4q   i5q   i6q   i7q
+      i8q   i9q  i10q  i11q  i12q  i13q  i14q  i15q
+     i16q  i17q  i18q  i19q  i20q  i21q  i22q  i23q
+     i24q  i25q  i26q  i27q  i28q  i29q  i30q  i31q
+     i32q  i33q  i34q  i35q  i36q  i37q  i38q  i39q
+     i40q  i41q  i42q  i43q  i44q  i45q  i46q  i47q
+     i48q  i49q  i50q  i51q  i52q  i53q  i54q  i55q
+     i56q  i57q  i58q  i59q  i60q  i61q  i62q  i63q
+     i64q  i65q  i66q  i67q  i68q  i69q  i70q  i71q
+     i72q  i73q  i74q  i75q  i76q  i77q  i78q  i79q
+     i80q  i81q  i82q  i83q  i84q  i85q  i86q  i87q
+     i88q  i89q  i90q  i91q  i92q  i93q  i94q  i95q
+     i96q  i97q  i98q  i99q i100q i101q i102q i103q
+    i104q i105q i106q i107q i108q i109q i110q i111q
+    i112q i113q i114q i115q i116q i117q i118q i119q
+    i120q i121q i122q i123q i124q i125q i126q i127q
+    i128q i129q i130q i131q i132q i133q i134q i135q
+    i136q i137q i138q i139q i140q i141q i142q i143q
+    i144q i145q i146q i147q i148q i149q i150q i151q
+    i152q i153q i154q i155q i156q i157q i158q i159q
+    i160q i161q i162q i163q i164q i165q i166q i167q
+    i168q i169q i170q i171q i172q i173q i174q i175q
+    i176q i177q i178q i179q i180q i181q i182q i183q
+    i184q i185q i186q i187q i188q i189q i190q i191q
+    i192q i193q i194q i195q i196q i197q i198q i199q
+    i200q i201q i202q i203q i204q i205q i206q i207q
+    i208q i209q i210q i211q i212q i213q i214q i215q
+    i216q i217q i218q i219q i220q i221q i222q i223q
+    i224q i225q i226q i227q i228q i229q i230q i231q
+    i232q i233q i234q i235q i236q i237q i238q i239q
+    i240q i241q i242q i243q i244q i245q i246q i247q
+    i248q i249q i250q i251q i252q i253q i254q i255q
+];
+define register offset=0x20000000 size=4 [
+      i0 _   i1 _   i2 _   i3 _   i4 _   i5 _   i6 _   i7 _
+      i8 _   i9 _  i10 _  i11 _  i12 _  i13 _  i14 _  i15 _
+     i16 _  i17 _  i18 _  i19 _  i20 _  i21 _  i22 _  i23 _
+     i24 _  i25 _  i26 _  i27 _  i28 _  i29 _  i30 _  i31 _
+     i32 _  i33 _  i34 _  i35 _  i36 _  i37 _  i38 _  i39 _
+     i40 _  i41 _  i42 _  i43 _  i44 _  i45 _  i46 _  i47 _
+     i48 _  i49 _  i50 _  i51 _  i52 _  i53 _  i54 _  i55 _
+     i56 _  i57 _  i58 _  i59 _  i60 _  i61 _  i62 _  i63 _
+     i64 _  i65 _  i66 _  i67 _  i68 _  i69 _  i70 _  i71 _
+     i72 _  i73 _  i74 _  i75 _  i76 _  i77 _  i78 _  i79 _
+     i80 _  i81 _  i82 _  i83 _  i84 _  i85 _  i86 _  i87 _
+     i88 _  i89 _  i90 _  i91 _  i92 _  i93 _  i94 _  i95 _
+     i96 _  i97 _  i98 _  i99 _ i100 _ i101 _ i102 _ i103 _
+    i104 _ i105 _ i106 _ i107 _ i108 _ i109 _ i110 _ i111 _
+    i112 _ i113 _ i114 _ i115 _ i116 _ i117 _ i118 _ i119 _
+    i120 _ i121 _ i122 _ i123 _ i124 _ i125 _ i126 _ i127 _
+    i128 _ i129 _ i130 _ i131 _ i132 _ i133 _ i134 _ i135 _
+    i136 _ i137 _ i138 _ i139 _ i140 _ i141 _ i142 _ i143 _
+    i144 _ i145 _ i146 _ i147 _ i148 _ i149 _ i150 _ i151 _
+    i152 _ i153 _ i154 _ i155 _ i156 _ i157 _ i158 _ i159 _
+    i160 _ i161 _ i162 _ i163 _ i164 _ i165 _ i166 _ i167 _
+    i168 _ i169 _ i170 _ i171 _ i172 _ i173 _ i174 _ i175 _
+    i176 _ i177 _ i178 _ i179 _ i180 _ i181 _ i182 _ i183 _
+    i184 _ i185 _ i186 _ i187 _ i188 _ i189 _ i190 _ i191 _
+    i192 _ i193 _ i194 _ i195 _ i196 _ i197 _ i198 _ i199 _
+    i200 _ i201 _ i202 _ i203 _ i204 _ i205 _ i206 _ i207 _
+    i208 _ i209 _ i210 _ i211 _ i212 _ i213 _ i214 _ i215 _
+    i216 _ i217 _ i218 _ i219 _ i220 _ i221 _ i222 _ i223 _
+    i224 _ i225 _ i226 _ i227 _ i228 _ i229 _ i230 _ i231 _
+    i232 _ i233 _ i234 _ i235 _ i236 _ i237 _ i238 _ i239 _
+    i240 _ i241 _ i242 _ i243 _ i244 _ i245 _ i246 _ i247 _
+    i248 _ i249 _ i250 _ i251 _ i252 _ i253 _ i254 _ i255 _
+];
+
+# Artificial registers used to hold function outputs
+define register offset=0x30000000 size=8 [
+      o0q   o1q   o2q   o3q   o4q   o5q   o6q   o7q
+      o8q   o9q  o10q  o11q  o12q  o13q  o14q  o15q
+     o16q  o17q  o18q  o19q  o20q  o21q  o22q  o23q
+     o24q  o25q  o26q  o27q  o28q  o29q  o30q  o31q
+     o32q  o33q  o34q  o35q  o36q  o37q  o38q  o39q
+     o40q  o41q  o42q  o43q  o44q  o45q  o46q  o47q
+     o48q  o49q  o50q  o51q  o52q  o53q  o54q  o55q
+     o56q  o57q  o58q  o59q  o60q  o61q  o62q  o63q
+     o64q  o65q  o66q  o67q  o68q  o69q  o70q  o71q
+     o72q  o73q  o74q  o75q  o76q  o77q  o78q  o79q
+     o80q  o81q  o82q  o83q  o84q  o85q  o86q  o87q
+     o88q  o89q  o90q  o91q  o92q  o93q  o94q  o95q
+     o96q  o97q  o98q  o99q o100q o101q o102q o103q
+    o104q o105q o106q o107q o108q o109q o110q o111q
+    o112q o113q o114q o115q o116q o117q o118q o119q
+    o120q o121q o122q o123q o124q o125q o126q o127q
+    o128q o129q o130q o131q o132q o133q o134q o135q
+    o136q o137q o138q o139q o140q o141q o142q o143q
+    o144q o145q o146q o147q o148q o149q o150q o151q
+    o152q o153q o154q o155q o156q o157q o158q o159q
+    o160q o161q o162q o163q o164q o165q o166q o167q
+    o168q o169q o170q o171q o172q o173q o174q o175q
+    o176q o177q o178q o179q o180q o181q o182q o183q
+    o184q o185q o186q o187q o188q o189q o190q o191q
+    o192q o193q o194q o195q o196q o197q o198q o199q
+    o200q o201q o202q o203q o204q o205q o206q o207q
+    o208q o209q o210q o211q o212q o213q o214q o215q
+    o216q o217q o218q o219q o220q o221q o222q o223q
+    o224q o225q o226q o227q o228q o229q o230q o231q
+    o232q o233q o234q o235q o236q o237q o238q o239q
+    o240q o241q o242q o243q o244q o245q o246q o247q
+    o248q o249q o250q o251q o252q o253q o254q o255q
+];
+define register offset=0x30000000 size=4 [
+      o0 _   o1 _   o2 _   o3 _   o4 _   o5 _   o6 _   o7 _
+      o8 _   o9 _  o10 _  o11 _  o12 _  o13 _  o14 _  o15 _
+     o16 _  o17 _  o18 _  o19 _  o20 _  o21 _  o22 _  o23 _
+     o24 _  o25 _  o26 _  o27 _  o28 _  o29 _  o30 _  o31 _
+     o32 _  o33 _  o34 _  o35 _  o36 _  o37 _  o38 _  o39 _
+     o40 _  o41 _  o42 _  o43 _  o44 _  o45 _  o46 _  o47 _
+     o48 _  o49 _  o50 _  o51 _  o52 _  o53 _  o54 _  o55 _
+     o56 _  o57 _  o58 _  o59 _  o60 _  o61 _  o62 _  o63 _
+     o64 _  o65 _  o66 _  o67 _  o68 _  o69 _  o70 _  o71 _
+     o72 _  o73 _  o74 _  o75 _  o76 _  o77 _  o78 _  o79 _
+     o80 _  o81 _  o82 _  o83 _  o84 _  o85 _  o86 _  o87 _
+     o88 _  o89 _  o90 _  o91 _  o92 _  o93 _  o94 _  o95 _
+     o96 _  o97 _  o98 _  o99 _ o100 _ o101 _ o102 _ o103 _
+    o104 _ o105 _ o106 _ o107 _ o108 _ o109 _ o110 _ o111 _
+    o112 _ o113 _ o114 _ o115 _ o116 _ o117 _ o118 _ o119 _
+    o120 _ o121 _ o122 _ o123 _ o124 _ o125 _ o126 _ o127 _
+    o128 _ o129 _ o130 _ o131 _ o132 _ o133 _ o134 _ o135 _
+    o136 _ o137 _ o138 _ o139 _ o140 _ o141 _ o142 _ o143 _
+    o144 _ o145 _ o146 _ o147 _ o148 _ o149 _ o150 _ o151 _
+    o152 _ o153 _ o154 _ o155 _ o156 _ o157 _ o158 _ o159 _
+    o160 _ o161 _ o162 _ o163 _ o164 _ o165 _ o166 _ o167 _
+    o168 _ o169 _ o170 _ o171 _ o172 _ o173 _ o174 _ o175 _
+    o176 _ o177 _ o178 _ o179 _ o180 _ o181 _ o182 _ o183 _
+    o184 _ o185 _ o186 _ o187 _ o188 _ o189 _ o190 _ o191 _
+    o192 _ o193 _ o194 _ o195 _ o196 _ o197 _ o198 _ o199 _
+    o200 _ o201 _ o202 _ o203 _ o204 _ o205 _ o206 _ o207 _
+    o208 _ o209 _ o210 _ o211 _ o212 _ o213 _ o214 _ o215 _
+    o216 _ o217 _ o218 _ o219 _ o220 _ o221 _ o222 _ o223 _
+    o224 _ o225 _ o226 _ o227 _ o228 _ o229 _ o230 _ o231 _
+    o232 _ o233 _ o234 _ o235 _ o236 _ o237 _ o238 _ o239 _
+    o240 _ o241 _ o242 _ o243 _ o244 _ o245 _ o246 _ o247 _
+    o248 _ o249 _ o250 _ o251 _ o252 _ o253 _ o254 _ o255 _
+];
+
+# Artificial temporary registers used to hold block arguments during branches
+define register offset=0x40000000 size=8 [ t0 ];
+
+# All context registers are set by the pre-analyzer
+define context contextreg
+	ctx_is_op64 = (0, 0) noflow
+	ctx_is_directive = (1, 1) noflow
+	ctx_is_return = (2, 2) noflow
+	ctx_is_global_sp = (3, 3) noflow
+	ctx_directive_type = (4, 6) noflow
+	ctx_case_index = (32, 63) noflow
+	ctx_br_target = (64, 95) noflow
+	ctx_sp = (96, 127) noflow
+;
+
+@define DIRECTIVE_CASE 0
+@define DIRECTIVE_DEFAULT 1
+@define DIRECTIVE_LOCALS 2
+@define DIRECTIVE_LOCAL 3
+
+# Include contents of WebAssembly.sinc file
+@include "WebAssembly.sinc"
diff --git a/Ghidra/Processors/WebAssembly/ghidra_scripts/analyze_dyncalls.py b/Ghidra/Processors/WebAssembly/ghidra_scripts/analyze_dyncalls.py
new file mode 100644
index 000000000000..4cfe3385ea8e
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/ghidra_scripts/analyze_dyncalls.py
@@ -0,0 +1,117 @@
+## ###
+#  IP: GHIDRA
+# 
+#  Licensed under the Apache License, Version 2.0 (the "License");
+#  you may not use this file except in compliance with the License.
+#  You may obtain a copy of the License at
+#  
+#       http://www.apache.org/licenses/LICENSE-2.0
+#  
+#  Unless required by applicable law or agreed to in writing, software
+#  distributed under the License is distributed on an "AS IS" BASIS,
+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+#  See the License for the specific language governing permissions and
+#  limitations under the License.
+##
+
+# Analyze Emscripten export::dynCall_* functions to identify which table
+# elements they call, and rename functions listed in the table by their dynCall
+# type and index. These dynCall indices are often used as function pointers in
+# compiled C/C++ code.
+# @author nneonneo
+# @category Analysis.Wasm
+# @keybinding
+# @menupath
+# @toolbar
+
+from __future__ import print_function
+from ghidra.program.model.symbol import SourceType
+
+l0 = currentProgram.getRegister("l0")
+progspace = currentProgram.addressFactory.getAddressSpace("ram")
+tablespace = currentProgram.addressFactory.getAddressSpace("table")
+# We insert every dynCall index into a special namespace so that function pointers
+# can be easily resolved.
+# The format is dynCall::func_{calltype}_{index}.
+dynCallNamespace = currentProgram.symbolTable.getOrCreateNameSpace(currentProgram.globalNamespace, "dynCall", SourceType.USER_DEFINED)
+dynCalls = {}
+
+def getConst(inst):
+    if inst.mnemonicString != "i32.const":
+        raise Exception("Expected a constant")
+    return inst.getOpObjects(0)[0].value
+
+def getTableFunction(offset):
+    funcAddr = getLong(tablespace.getAddress(offset * 8)) & 0xffffffff
+    return getFunctionAt(progspace.getAddress(funcAddr))
+
+def analyzeDyncall(function, calltype=None):
+    if calltype is None:
+        calltype = function.name.split("_", 1)[1]
+    # Iterate instructions backwards
+    instIterator = currentProgram.listing.getInstructions(function.body, False)
+    for inst in instIterator:
+        if inst.mnemonicString == "call_indirect":
+            break
+        elif inst.mnemonicString == "call":
+            # forwarding to another function
+            addr = inst.getOpObjects(0)[0]
+            func = getFunctionAt(addr)
+            # Note: name the new function in the global namespace,
+            # unlike the parent function which is in the export namespace
+            func.setName("dynCall_" + calltype, SourceType.USER_DEFINED)
+            return analyzeDyncall(func, calltype)
+    else:
+        raise Exception("call_indirect not found")
+
+    offset = 0
+    mask = 0xffffffff
+    while 1:
+        inst = next(instIterator)
+        if inst.mnemonicString == "i32.add":
+            offset = getConst(next(instIterator))
+        elif inst.mnemonicString == "i32.and":
+            mask = getConst(next(instIterator))
+        elif inst.mnemonicString == "i32.const":
+            offset = getConst(inst)
+            mask = 0
+            break
+        elif inst.mnemonicString == "local.get":
+            if inst.getRegister(0) != l0:
+                raise Exception("source is not l0?")
+            break
+        else:
+            raise Exception("Unrecognized instruction " + str(inst))
+
+    dynCalls[calltype] = (offset, mask)
+
+def renameDyncalls(calltype):
+    offset, mask = dynCalls.get(calltype, (0, 0))
+    nullFunc = getTableFunction(offset)
+    if nullFunc:
+        nullFunc.setName("nullFuncPtr_" + calltype, SourceType.USER_DEFINED)
+    else:
+        print("Warning: table index %d is invalid - has the table been loaded?" % offset)
+    monitor.setMessage("Renaming " + calltype + " functions")
+    monitor.initialize(mask)
+    for i in range(mask+1):
+        monitor.setProgress(i)
+        func = getTableFunction(offset + i)
+        if func:
+            name = "func_" + calltype + "_%d" % i
+            if func.name.startswith("unnamed_function_"):
+                func.setName(name, SourceType.ANALYSIS)
+            currentProgram.symbolTable.createLabel(func.entryPoint, name, dynCallNamespace, SourceType.USER_DEFINED)
+        else:
+            print("Warning: table index %d is invalid - has the table been loaded?" % (offset + i))
+
+for function in currentProgram.functionManager.getFunctions(True):
+    if function.parentNamespace.name == "export" and function.name.startswith("dynCall_"):
+        monitor.setMessage("Analyzing " + function.name)
+        try:
+            analyzeDyncall(function)
+        except Exception as e:
+            print("Failed to analyze %s: %s" % (function, e))
+
+for calltype in dynCalls:
+    renameDyncalls(calltype)
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
new file mode 100644
index 000000000000..e09b1902e283
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
@@ -0,0 +1,703 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+
+import ghidra.app.util.MemoryBlockUtils;
+import ghidra.app.util.Option;
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.ByteProvider;
+import ghidra.app.util.importer.MessageLog;
+import ghidra.app.util.opinion.AbstractLibrarySupportLoader;
+import ghidra.app.util.opinion.LoadSpec;
+import ghidra.program.database.mem.FileBytes;
+import ghidra.program.model.address.Address;
+import ghidra.program.model.address.AddressSet;
+import ghidra.program.model.address.AddressSpace;
+import ghidra.program.model.data.ArrayDataType;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.DataTypeConflictException;
+import ghidra.program.model.data.DataUtilities;
+import ghidra.program.model.data.DataUtilities.ClearDataMode;
+import ghidra.program.model.lang.LanguageCompilerSpecPair;
+import ghidra.program.model.listing.CodeUnit;
+import ghidra.program.model.listing.Data;
+import ghidra.program.model.listing.Function;
+import ghidra.program.model.listing.Listing;
+import ghidra.program.model.listing.Program;
+import ghidra.program.model.mem.MemoryBlock;
+import ghidra.program.model.symbol.ExternalLocation;
+import ghidra.program.model.symbol.Namespace;
+import ghidra.program.model.symbol.RefType;
+import ghidra.program.model.symbol.SourceType;
+import ghidra.program.model.symbol.Symbol;
+import ghidra.program.model.symbol.SymbolUtilities;
+import ghidra.program.model.util.CodeUnitInsertionException;
+import ghidra.util.Msg;
+import ghidra.util.exception.InvalidInputException;
+import ghidra.util.task.TaskMonitor;
+import wasm.format.WasmConstants;
+import wasm.format.WasmEnums.WasmExternalKind;
+import wasm.format.WasmHeader;
+import wasm.format.WasmModule;
+import wasm.format.sections.WasmNameSection;
+import wasm.format.sections.WasmSection;
+import wasm.format.sections.WasmSection.WasmSectionId;
+import wasm.format.sections.WasmUnknownCustomSection;
+import wasm.format.sections.structures.WasmDataSegment;
+import wasm.format.sections.structures.WasmElementSegment;
+import wasm.format.sections.structures.WasmExportEntry;
+import wasm.format.sections.structures.WasmCodeEntry;
+import wasm.format.sections.structures.WasmGlobalEntry;
+import wasm.format.sections.structures.WasmGlobalType;
+import wasm.format.sections.structures.WasmImportEntry;
+import wasm.format.sections.structures.WasmResizableLimits;
+import wasm.format.sections.structures.WasmTableType;
+
+public class WasmLoader extends AbstractLibrarySupportLoader {
+
+	public final static String WEBASSEMBLY = "WebAssembly";
+
+	public final static long CODE_BASE = 0x80000000L;
+
+	@Override
+	public String getName() {
+		return WEBASSEMBLY;
+	}
+
+	@Override
+	public Collection<LoadSpec> findSupportedLoadSpecs(ByteProvider provider) throws IOException {
+		List<LoadSpec> loadSpecs = new ArrayList<>();
+
+		BinaryReader reader = new BinaryReader(provider, true);
+		WasmHeader header = new WasmHeader(reader);
+
+		if (Arrays.equals(WasmConstants.WASM_MAGIC, header.getMagic()) && WasmConstants.WASM_VERSION == header.getVersion()) {
+			loadSpecs.add(new LoadSpec(this, CODE_BASE, new LanguageCompilerSpecPair("Wasm:LE:32:default", "default"), true));
+		}
+
+		return loadSpecs;
+	}
+
+	// #region Address computations
+	public static long getFunctionAddressOffset(WasmModule module, int funcidx) {
+		List<WasmImportEntry> imports = module.getImports(WasmExternalKind.EXT_FUNCTION);
+		if (funcidx < imports.size()) {
+			return CODE_BASE + imports.get(funcidx).getEntryOffset();
+		} else {
+			WasmCodeEntry codeEntry = module.getNonImportedFunctions().get(funcidx - imports.size());
+			return CODE_BASE + codeEntry.getOffset();
+		}
+	}
+
+	public static long getFunctionSize(Program program, WasmModule module, int funcidx) {
+		List<WasmImportEntry> imports = module.getImports(WasmExternalKind.EXT_FUNCTION);
+		if (funcidx < imports.size()) {
+			return imports.get(funcidx).getEntrySize();
+		} else {
+			WasmCodeEntry codeEntry = module.getNonImportedFunctions().get(funcidx - imports.size());
+			return codeEntry.getCodeSize();
+		}
+	}
+
+	public static Address getFunctionAddress(Program program, WasmModule module, int funcidx) {
+		return program.getAddressFactory().getAddressSpace("ram").getAddress(getFunctionAddressOffset(module, funcidx));
+	}
+
+	public static Address getTableAddress(Program program, int tableidx, long itemIndex) {
+		return program.getAddressFactory().getAddressSpace("table").getAddress((((long) tableidx) << 32) + (itemIndex * 8));
+	}
+
+	public static Address getMemoryAddress(Program program, int memidx, long offset) {
+		if (memidx != 0) {
+			/* only handle memory 0 for now */
+			throw new IllegalArgumentException("non-zero memidx is not supported");
+		}
+
+		return program.getAddressFactory().getAddressSpace("ram").getAddress(offset);
+	}
+
+	public static Address getGlobalAddress(Program program, int globalidx) {
+		return program.getAddressFactory().getAddressSpace("global").getAddress(((long) globalidx) * 8);
+	}
+
+	private static Address getCodeAddress(Program program, long fileOffset) {
+		return program.getAddressFactory().getAddressSpace("ram").getAddress(CODE_BASE + fileOffset);
+	}
+	// #endregion
+
+	// #region Naming
+	private static Symbol createLabel(Program program, Address address, String name, Namespace namespace, SourceType sourceType) throws InvalidInputException {
+		if (name == null || name.isEmpty()) {
+			name = "unnamed";
+		}
+
+		// Make spaces into non-breaking spaces to avoid invalid chars
+		name = name.replace(" ", "\u00A0");
+		// Replace any other invalid chars with _
+		name = SymbolUtilities.replaceInvalidChars(name, true);
+		// Leave room for a suffix if necessary
+		int maxLen = SymbolUtilities.MAX_SYMBOL_NAME_LENGTH - 16;
+		if (name.length() > maxLen) {
+			name = name.substring(0, maxLen);
+		}
+		String newname = name;
+		int suffix = 0;
+		while (!program.getSymbolTable().getSymbols(newname, namespace).isEmpty()) {
+			suffix++;
+			newname = name + "_" + suffix;
+		}
+
+		return program.getSymbolTable().createLabel(address, newname, namespace, sourceType);
+	}
+
+	private static Namespace getNamespace(Program program, Namespace parent, String name) {
+		try {
+			return program.getSymbolTable().getOrCreateNameSpace(parent, name, SourceType.IMPORTED);
+		} catch (Exception e) {
+			return parent;
+		}
+	}
+
+	private static Namespace getObjectNamespace(Program program, WasmModule module, WasmExternalKind objectKind, int objidx) {
+		Namespace globalNamespace = program.getGlobalNamespace();
+
+		List<WasmImportEntry> imports = module.getImports(objectKind);
+		if (objidx < imports.size()) {
+			Namespace importNamespace = getNamespace(program, globalNamespace, "import");
+			return getNamespace(program, importNamespace, imports.get(objidx).getModule());
+		}
+		WasmExportEntry entry = module.findExport(objectKind, objidx);
+		if (entry != null) {
+			return getNamespace(program, globalNamespace, "export");
+		}
+		return globalNamespace;
+	}
+
+	private static String getObjectName(Program program, WasmModule module, WasmExternalKind objectKind, int objidx) {
+		List<WasmImportEntry> imports = module.getImports(objectKind);
+		if (objidx < imports.size()) {
+			return imports.get(objidx).getName();
+		}
+		WasmExportEntry entry = module.findExport(objectKind, objidx);
+		if (entry != null) {
+			return entry.getName();
+		}
+		return null;
+	}
+
+	public static Namespace getFunctionNamespace(Program program, WasmModule module, int funcidx) {
+		return getObjectNamespace(program, module, WasmExternalKind.EXT_FUNCTION, funcidx);
+	}
+
+	public static String getFunctionName(Program program, WasmModule module, int funcidx) {
+		String name;
+		WasmNameSection nameSection = module.getNameSection();
+		if (nameSection != null) {
+			name = nameSection.getFunctionName(funcidx);
+			if (name != null) {
+				return name;
+			}
+		}
+		name = getObjectName(program, module, WasmExternalKind.EXT_FUNCTION, funcidx);
+		if (name != null) {
+			return name;
+		}
+		return "unnamed_function_" + funcidx;
+	}
+
+	public static Namespace getGlobalNamespace(Program program, WasmModule module, int globalidx) {
+		return getObjectNamespace(program, module, WasmExternalKind.EXT_GLOBAL, globalidx);
+	}
+
+	public static String getGlobalName(Program program, WasmModule module, int globalidx) {
+		String name;
+		WasmNameSection nameSection = module.getNameSection();
+		if (nameSection != null) {
+			name = nameSection.getGlobalName(globalidx);
+			if (name != null) {
+				return name;
+			}
+		}
+		name = getObjectName(program, module, WasmExternalKind.EXT_GLOBAL, globalidx);
+		if (name != null) {
+			return name;
+		}
+		return "global_" + globalidx;
+	}
+	// #endregion
+
+	// #region Memory blocks
+	private static Data createData(Program program, Listing listing, Address address, DataType dt) {
+		try {
+			Data d = listing.getDataAt(address);
+			if (d == null || !dt.isEquivalent(d.getDataType())) {
+				d = DataUtilities.createData(program, address, dt, -1, false,
+						ClearDataMode.CLEAR_ALL_UNDEFINED_CONFLICT_DATA);
+			}
+			return d;
+		} catch (CodeUnitInsertionException e) {
+			Msg.warn(WasmLoader.class, "Data markup conflict at " + address, e);
+		} catch (DataTypeConflictException e) {
+			Msg.error(WasmLoader.class, "Data type markup conflict:" + e.getMessage(), e);
+		}
+		return null;
+	}
+
+	private static MemoryBlock createModuleBlock(Program program, FileBytes fileBytes) throws Exception {
+		Address start = AddressSpace.OTHER_SPACE.getAddress(0L);
+		MemoryBlock block = program.getMemory().createInitializedBlock(".module", start, fileBytes, 0, fileBytes.getSize(), false);
+		block.setRead(true);
+		block.setWrite(false);
+		block.setExecute(false);
+		block.setSourceName("Wasm Module");
+		block.setComment("The full file contents of the Wasm module");
+		return block;
+	}
+
+	private static void createImportStubBlock(Program program, Address startAddress, long length) {
+		try {
+			MemoryBlock block = program.getMemory().createUninitializedBlock(MemoryBlock.EXTERNAL_BLOCK_NAME, startAddress, length, false);
+			block.setRead(true);
+			block.setWrite(false);
+			block.setExecute(true);
+			block.setComment("NOTE: This block is artificial and is used to represent imported functions");
+		} catch (Exception e) {
+			Msg.error(WasmLoader.class, "Failed to create imported function block at " + startAddress, e);
+		}
+	}
+
+	private static void createFunctionCodeBlock(Program program, FileBytes fileBytes, long fileOffset, Address startAddress, long length) {
+		try {
+			MemoryBlock block = program.getMemory().createInitializedBlock(".function", startAddress, fileBytes, fileOffset, length, false);
+			block.setRead(true);
+			block.setWrite(false);
+			block.setExecute(true);
+			block.setSourceName("Wasm Function");
+		} catch (Exception e) {
+			Msg.error(WasmLoader.class, "Failed to create function block at " + startAddress, e);
+		}
+	}
+
+	private static void createTableBlock(Program program, DataType elementDataType, long numElements, int tableidx, TaskMonitor monitor) {
+		long byteSize = elementDataType.getLength() * numElements;
+		Address dataStart = getTableAddress(program, tableidx, 0);
+		try {
+			MemoryBlock block = program.getMemory().createInitializedBlock(".table" + tableidx, dataStart, byteSize, (byte) 0xff, monitor, false);
+			block.setRead(true);
+			block.setWrite(true);
+			block.setExecute(false);
+			DataType tableDataType = new ArrayDataType(elementDataType, (int) numElements, elementDataType.getLength());
+			createData(program, program.getListing(), dataStart, tableDataType);
+			createLabel(program, dataStart, "table" + tableidx, program.getGlobalNamespace(), SourceType.IMPORTED);
+		} catch (Exception e) {
+			Msg.error(WasmLoader.class, "Failed to create table block " + tableidx + " at " + dataStart, e);
+		}
+	}
+
+	private static void createMemoryBlock(Program program, int memidx, long length, TaskMonitor monitor) {
+		Address dataStart = getMemoryAddress(program, memidx, 0);
+		try {
+			MemoryBlock block = program.getMemory().createInitializedBlock(".memory" + memidx, dataStart, length, (byte) 0x00, monitor, false);
+			block.setRead(true);
+			block.setWrite(true);
+			block.setExecute(false);
+			block.setSourceName("Wasm Memory");
+		} catch (Exception e) {
+			Msg.error(WasmLoader.class, "Failed to create memory block " + memidx + " at " + dataStart, e);
+		}
+	}
+
+	private static void createGlobalBlock(Program program, DataType dataType, byte[] initBytes, int globalidx, int mutability, TaskMonitor monitor) {
+		Address dataStart = getGlobalAddress(program, globalidx);
+		try {
+			MemoryBlock block;
+			if (initBytes == null) {
+				block = program.getMemory().createUninitializedBlock(".global" + globalidx, dataStart, dataType.getLength(), false);
+			} else {
+				block = program.getMemory().createInitializedBlock(".global" + globalidx, dataStart, dataType.getLength(), (byte) 0xff, monitor, false);
+				program.getMemory().setBytes(dataStart, initBytes);
+			}
+			block.setRead(true);
+			block.setWrite((mutability != 0) ? true : false);
+			block.setExecute(false);
+			createData(program, program.getListing(), dataStart, dataType);
+		} catch (Exception e) {
+			Msg.error(WasmLoader.class, "Failed to create global block " + globalidx + " at " + dataStart);
+		}
+	}
+	// #endregion
+
+	public void createImportExportSymbols(Program program, WasmModule module, int funcidx, Function function) throws Exception {
+
+		List<WasmImportEntry> imports = module.getImports(WasmExternalKind.EXT_FUNCTION);
+		// imported function
+		if (funcidx < imports.size()) {
+			WasmImportEntry importEntry = imports.get(funcidx);
+			// create Import symbol
+			ExternalLocation extLoc = program.getExternalManager().addExtFunction(
+					importEntry.getModule(), importEntry.getName(), function.getEntryPoint(),
+					SourceType.IMPORTED);
+			function.setThunkedFunction(extLoc.getFunction());
+			return;
+		}
+
+		WasmExportEntry entry = module.findExport(WasmExternalKind.EXT_FUNCTION, funcidx);
+		// exported function
+		if (entry != null) {
+			program.getSymbolTable().addExternalEntryPoint(function.getEntryPoint());
+		}
+	}
+
+	private void loadFunctions(Program program, FileBytes fileBytes, WasmModule module, TaskMonitor monitor) {
+		monitor.setMessage("Loading functions");
+		List<WasmImportEntry> imports = module.getImports(WasmExternalKind.EXT_FUNCTION);
+		List<WasmCodeEntry> codeEntries = module.getNonImportedFunctions();
+		int numFunctions = imports.size() + codeEntries.size();
+
+		/*
+		 * Create two memory blocks to hold the imported and non-imported functions.
+		 * While it would be cleaner (in memory) to load each function into its own
+		 * block, this can cause massive slowdowns for files with many functions.
+		 */
+		WasmSection importSection = module.getSection(WasmSectionId.SEC_IMPORT);
+		if (importSection != null) {
+			createImportStubBlock(program, getCodeAddress(program, importSection.getSectionOffset()), importSection.getSectionSize());
+		}
+		WasmSection codeSection = module.getSection(WasmSectionId.SEC_CODE);
+		if (codeSection != null) {
+			long codeOffset = codeSection.getSectionOffset();
+			createFunctionCodeBlock(program, fileBytes, codeOffset, getCodeAddress(program, codeOffset), codeSection.getSectionSize());
+		}
+
+		monitor.initialize(numFunctions);
+		for (int funcidx = 0; funcidx < numFunctions; funcidx++) {
+			if (monitor.isCancelled()) {
+				break;
+			}
+			monitor.incrementProgress(1);
+
+			Address startAddress = getFunctionAddress(program, module, funcidx);
+			long functionLength = getFunctionSize(program, module, funcidx);
+			String functionName = getFunctionName(program, module, funcidx);
+			Namespace functionNamespace = getFunctionNamespace(program, module, funcidx);
+
+			try {
+				Symbol symbol = createLabel(program, startAddress, functionName, functionNamespace, SourceType.IMPORTED);
+				Function function = program.getFunctionManager().createFunction(symbol.getName(false), symbol.getParentNamespace(),
+						startAddress, new AddressSet(startAddress, startAddress.add(functionLength - 1)), SourceType.IMPORTED);
+				try {
+					createImportExportSymbols(program, module, funcidx, function);
+				} catch (Exception e) {
+					Msg.error(this, "Failed to create import/export symbol for function index " + funcidx + " (" + functionName + ") at " + startAddress, e);
+				}
+			} catch (Exception e) {
+				Msg.error(this, "Failed to create function index " + funcidx + " (" + functionName + ") at " + startAddress, e);
+			}
+		}
+	}
+
+	private void loadTables(Program program, FileBytes fileBytes, WasmModule module, TaskMonitor monitor) {
+		monitor.setMessage("Loading tables");
+		List<WasmImportEntry> imports = module.getImports(WasmExternalKind.EXT_TABLE);
+		List<WasmTableType> tables = module.getNonImportedTables();
+		int numTables = imports.size() + tables.size();
+
+		monitor.initialize(numTables);
+		for (int tableidx = 0; tableidx < numTables; tableidx++) {
+			if (monitor.isCancelled()) {
+				break;
+			}
+			monitor.incrementProgress(1);
+
+			WasmTableType table;
+			if (tableidx < imports.size()) {
+				table = imports.get(tableidx).getTableType();
+			} else {
+				table = tables.get(tableidx - imports.size());
+			}
+
+			createTableBlock(program, table.getElementDataType(), table.getLimits().getInitial(), tableidx, monitor);
+		}
+	}
+
+	/**
+	 * Copy element segment to table.
+	 * 
+	 * This is public so that it can be called after loading, e.g. to load a passive
+	 * element segment once the dynamic table index and offset are known.
+	 *
+	 * For example, this could be called from a script as follows:
+	 * 
+	 * WasmLoader.loadElementsToTable(getCurrentProgram(),
+	 * WasmAnalysis.getState(getCurrentProgram()).getModule(), elemidx, tableidx,
+	 * offset, new ConsoleTaskMonitor())
+	 */
+	public static void loadElementsToTable(Program program, WasmModule module, int elemidx, int tableidx, long offset, TaskMonitor monitor) throws Exception {
+		WasmElementSegment elemSegment = module.getElementSegments().get(elemidx);
+
+		byte[] initBytes = elemSegment.getInitData(module);
+		if (initBytes == null)
+			return;
+
+		program.getMemory().setBytes(getTableAddress(program, tableidx, offset), initBytes);
+
+		Address[] refs = elemSegment.getAddresses(program, module);
+		for (int i = 0; i < refs.length; i++) {
+			if (refs[i] != null) {
+				Address elementAddr = getTableAddress(program, tableidx, offset + i);
+				program.getReferenceManager().removeAllReferencesFrom(elementAddr);
+				program.getReferenceManager().addMemoryReference(elementAddr, refs[i], RefType.DATA, SourceType.IMPORTED, 0);
+			}
+		}
+	}
+
+	private void loadElementSegments(Program program, FileBytes fileBytes, WasmModule module, TaskMonitor monitor) {
+		/* Load active element segments into tables */
+		monitor.setMessage("Loading table elements");
+		List<WasmElementSegment> entries = module.getElementSegments();
+
+		monitor.initialize(entries.size());
+		for (int elemidx = 0; elemidx < entries.size(); elemidx++) {
+			if (monitor.isCancelled()) {
+				break;
+			}
+			monitor.incrementProgress(1);
+
+			WasmElementSegment elemSegment = entries.get(elemidx);
+			int tableidx = (int) elemSegment.getTableIndex();
+
+			Long offset = elemSegment.getOffset();
+			if (offset == null)
+				continue;
+
+			try {
+				loadElementsToTable(program, module, elemidx, tableidx, offset, monitor);
+			} catch (Exception e) {
+				Msg.error(this, "Failed to initialize table " + tableidx + " with element segment " + elemidx + " at offset " + offset, e);
+			}
+		}
+	}
+
+	private void loadMemories(Program program, FileBytes fileBytes, WasmModule module, TaskMonitor monitor) {
+		monitor.setMessage("Loading memories");
+		List<WasmImportEntry> imports = module.getImports(WasmExternalKind.EXT_MEMORY);
+		List<WasmResizableLimits> memories = module.getNonImportedMemories();
+		int numMemories = imports.size() + memories.size();
+
+		monitor.initialize(numMemories);
+		for (int memidx = 0; memidx < numMemories; memidx++) {
+			if (monitor.isCancelled()) {
+				break;
+			}
+			monitor.incrementProgress(1);
+
+			if (memidx != 0) {
+				/* only handle memory 0 for now */
+				continue;
+			}
+			WasmResizableLimits mem;
+			if (memidx < imports.size()) {
+				mem = imports.get(memidx).getMemoryType();
+			} else {
+				mem = memories.get(memidx - imports.size());
+			}
+			createMemoryBlock(program, memidx, Math.min(mem.getInitial() * 65536L, CODE_BASE), monitor);
+		}
+	}
+
+	/**
+	 * Copy data segment to memory.
+	 * 
+	 * This is public so that it can be called after loading, e.g. to load a passive
+	 * data segment once the dynamic memory index and offset are known.
+	 *
+	 * For example, this could be called from a script as follows:
+	 * 
+	 * WasmLoader.loadDataToMemory(getCurrentProgram(),
+	 * WasmAnalysis.getState(getCurrentProgram()).getModule(), dataidx, memidx,
+	 * offset, new ConsoleTaskMonitor())
+	 */
+	public static void loadDataToMemory(Program program, WasmModule module, int dataidx, int memidx, long offset, TaskMonitor monitor) throws Exception {
+		WasmDataSegment dataSegment = module.getDataSegments().get(dataidx);
+		Address memStart = getMemoryAddress(program, memidx, offset);
+		program.getMemory().setBytes(memStart, dataSegment.getData());
+	}
+
+	private void loadDataSegments(Program program, FileBytes fileBytes, WasmModule module, TaskMonitor monitor) {
+		/* Load active data segments into memory */
+		monitor.setMessage("Loading data segments");
+		List<WasmDataSegment> dataSegments = module.getDataSegments();
+
+		monitor.initialize(dataSegments.size());
+		for (int dataidx = 0; dataidx < dataSegments.size(); dataidx++) {
+			if (monitor.isCancelled()) {
+				break;
+			}
+			monitor.incrementProgress(1);
+
+			WasmDataSegment dataSegment = dataSegments.get(dataidx);
+			int memidx = (int) dataSegment.getIndex();
+			if (memidx != 0) {
+				/* only handle memory 0 for now */
+				continue;
+			}
+
+			Long offset = dataSegment.getMemoryOffset();
+			if (offset == null) {
+				continue;
+			}
+
+			try {
+				loadDataToMemory(program, module, dataidx, memidx, offset, monitor);
+			} catch (Exception e) {
+				Address memStart = getMemoryAddress(program, memidx, offset);
+				Msg.error(this, "Failed to initialize memory " + memidx + " with data segment " + dataidx + " at " + memStart, e);
+			}
+		}
+	}
+
+	private void loadGlobals(Program program, FileBytes fileBytes, WasmModule module, TaskMonitor monitor) {
+		monitor.setMessage("Loading globals");
+		List<WasmImportEntry> imports = module.getImports(WasmExternalKind.EXT_GLOBAL);
+		List<WasmGlobalEntry> globals = module.getNonImportedGlobals();
+		int numGlobals = imports.size() + globals.size();
+
+		monitor.initialize(numGlobals);
+		for (int globalidx = 0; globalidx < numGlobals; globalidx++) {
+			if (monitor.isCancelled()) {
+				break;
+			}
+			monitor.incrementProgress(1);
+
+			WasmGlobalType globalType;
+			byte[] initBytes;
+			Address initRef;
+			Long initGlobal;
+			if (globalidx < imports.size()) {
+				globalType = imports.get(globalidx).getGlobalType();
+				initBytes = null;
+				initRef = null;
+				initGlobal = null;
+			} else {
+				WasmGlobalEntry entry = globals.get(globalidx - imports.size());
+				globalType = entry.getGlobalType();
+				initBytes = entry.asBytes(module);
+				initRef = entry.asAddress(program, module);
+				initGlobal = entry.asGlobalGet();
+			}
+
+			createGlobalBlock(program, globalType.getType().asDataType(), initBytes, globalidx, globalType.getMutability(), monitor);
+
+			Address dataStart = getGlobalAddress(program, globalidx);
+			Namespace namespace = getGlobalNamespace(program, module, globalidx);
+			String name = getGlobalName(program, module, globalidx);
+			try {
+				createLabel(program, dataStart, name, namespace, SourceType.IMPORTED);
+			} catch (Exception e) {
+				Msg.error(this, "Failed to label global " + globalidx + " (" + name + ") at " + dataStart, e);
+			}
+
+			if (initRef != null) {
+				program.getReferenceManager().removeAllReferencesFrom(dataStart);
+				program.getReferenceManager().addMemoryReference(dataStart, initRef, RefType.DATA, SourceType.IMPORTED, 0);
+			}
+			if (initGlobal != null) {
+				int commentType = CodeUnit.PLATE_COMMENT;
+				String currentComment = program.getListing().getComment(commentType, dataStart);
+				if (currentComment == null) {
+					currentComment = "";
+				} else if (!currentComment.isEmpty()) {
+					currentComment += "\n";
+				}
+				Address otherAddress = getGlobalAddress(program, (int) (long) initGlobal);
+				program.getListing().setComment(dataStart, commentType, currentComment + "Initializer: {@symbol " + otherAddress + "}");
+			}
+		}
+	}
+
+	private MemoryBlock createCustomSectionBlock(Program program, FileBytes fileBytes, WasmUnknownCustomSection customSection, Address address)
+			throws Exception {
+		MemoryBlock block = program.getMemory().createInitializedBlock(customSection.getCustomName(), address, fileBytes, customSection.getContentOffset(), customSection.getCustomSize(), false);
+		block.setRead(true);
+		block.setWrite(false);
+		block.setExecute(false);
+		block.setSourceName("Wasm Module");
+		return block;
+	}
+
+	private void createCustomSections(Program program, FileBytes fileBytes, WasmModule module, TaskMonitor monitor) {
+		monitor.setMessage("Creating custom sections");
+		// start right after the module block
+		Address address = AddressSpace.OTHER_SPACE.getAddress(fileBytes.getSize());
+		for (WasmSection section : module.getCustomSections()) {
+			if (!(section instanceof WasmUnknownCustomSection)) {
+				continue;
+			}
+			WasmUnknownCustomSection customSection = (WasmUnknownCustomSection) section;
+			try {
+				monitor.setMessage("Creating custom section " + section.getName());
+				MemoryBlock block = createCustomSectionBlock(program, fileBytes, customSection, address);
+				address = address.add(block.getSize());
+			} catch (Exception e) {
+				Msg.error(this, "Failed to load Wasm Custom section " + customSection.getCustomName(), e);
+			}
+		}
+	}
+
+	@Override
+	protected void load(ByteProvider provider, LoadSpec loadSpec, List<Option> options,
+			Program program, TaskMonitor monitor, MessageLog log) throws IOException {
+
+		monitor.setMessage("Start loading");
+
+		try {
+			doLoad(provider, program, monitor);
+		} catch (Exception e) {
+			monitor.setMessage("Error");
+			Msg.error(this, "Failed to load Wasm module", e);
+		}
+	}
+
+	private void doLoad(ByteProvider provider, Program program, TaskMonitor monitor) throws Exception {
+		BinaryReader reader = new BinaryReader(provider, true);
+		WasmModule module = new WasmModule(reader);
+
+		FileBytes fileBytes = MemoryBlockUtils.createFileBytes(program, provider, 0, provider.length(), monitor);
+
+		MemoryBlock moduleBlock = createModuleBlock(program, fileBytes);
+		createData(program, program.getListing(), moduleBlock.getStart(), module.getHeader().toDataType());
+
+		for (WasmSection section : module.getSections()) {
+			monitor.setMessage("Creating section " + section.getName());
+			createData(program, program.getListing(), moduleBlock.getStart().add(section.getSectionOffset()), section.toDataType());
+		}
+
+		createCustomSections(program, fileBytes, module, monitor);
+
+		loadFunctions(program, fileBytes, module, monitor);
+		loadTables(program, fileBytes, module, monitor);
+		loadElementSegments(program, fileBytes, module, monitor);
+		loadMemories(program, fileBytes, module, monitor);
+		loadDataSegments(program, fileBytes, module, monitor);
+		loadGlobals(program, fileBytes, module, monitor);
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/ValidationException.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/ValidationException.java
new file mode 100644
index 000000000000..a5029b78b663
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/ValidationException.java
@@ -0,0 +1,32 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.analysis;
+
+import ghidra.program.model.address.Address;
+
+public class ValidationException extends RuntimeException {
+	private Address instAddress;
+
+	public ValidationException(Address instAddress, String message) {
+		super(message);
+		this.instAddress = instAddress;
+	}
+
+	@Override
+	public String getMessage() {
+		return "Validation error at address " + instAddress + ": " + super.getMessage();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmAnalysis.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmAnalysis.java
new file mode 100644
index 000000000000..2bc0a7789d43
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmAnalysis.java
@@ -0,0 +1,156 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.analysis;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import ghidra.app.plugin.core.analysis.AnalysisState;
+import ghidra.app.plugin.core.analysis.AnalysisStateInfo;
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.ByteProvider;
+import ghidra.app.util.bin.MemoryByteProvider;
+import ghidra.program.model.address.Address;
+import ghidra.program.model.listing.Function;
+import ghidra.program.model.listing.Program;
+import ghidra.program.model.mem.Memory;
+import ghidra.program.model.symbol.Symbol;
+import ghidra.util.Msg;
+import wasm.WasmLoader;
+import wasm.format.WasmEnums.ValType;
+import wasm.format.WasmModule;
+import wasm.format.sections.structures.WasmFuncType;
+
+public class WasmAnalysis implements AnalysisState {
+	/**
+	 * Return persistent <code>ClassFileAnalysisState</code> which corresponds to
+	 * the specified program instance.
+	 * 
+	 * @param program
+	 * @return <code>ClassFileAnalysisState</code> for specified program instance
+	 */
+	public static synchronized WasmAnalysis getState(Program program) {
+		WasmAnalysis analysisState = AnalysisStateInfo.getAnalysisState(program, WasmAnalysis.class);
+		if (analysisState == null) {
+			analysisState = new WasmAnalysis(program);
+			AnalysisStateInfo.putAnalysisState(program, analysisState);
+		}
+		return analysisState;
+	}
+
+	private Program program;
+	private WasmModule module = null;
+	private List<WasmFuncSignature> functions = null;
+	private Map<Address, WasmFuncSignature> functionsByAddress = new HashMap<>();
+	private Map<Function, WasmFunctionAnalysis> functionAnalyses = new HashMap<>();
+
+	public WasmAnalysis(Program program) {
+		Memory mem = program.getMemory();
+		Address moduleStart = mem.getBlock(".module").getStart();
+		ByteProvider memByteProvider = new MemoryByteProvider(mem, moduleStart);
+		BinaryReader memBinaryReader = new BinaryReader(memByteProvider, true);
+		try {
+			module = new WasmModule(memBinaryReader);
+		} catch (IOException e) {
+			Msg.error(this, "Failed to construct WasmModule", e);
+		}
+
+		this.program = program;
+		this.functions = getFunctions(program, module);
+		for (WasmFuncSignature func : functions) {
+			functionsByAddress.put(func.getStartAddr(), func);
+		}
+	}
+
+	public WasmModule getModule() {
+		return module;
+	}
+
+	public List<WasmFuncSignature> getFunctions() {
+		return Collections.unmodifiableList(functions);
+	}
+
+	public WasmFuncSignature getFunction(int funcIdx) {
+		return functions.get(funcIdx);
+	}
+
+	public WasmFuncSignature getFunctionByAddress(Address address) {
+		return functionsByAddress.get(address);
+	}
+
+	public synchronized WasmFunctionAnalysis getFunctionAnalysis(Function f) {
+		if (!functionAnalyses.containsKey(f)) {
+			WasmFuncSignature func = getFunctionByAddress(f.getEntryPoint());
+			BinaryReader codeReader = new BinaryReader(new MemoryByteProvider(program.getMemory(), func.getStartAddr()), true);
+			WasmFunctionAnalysis funcAnalysis = new WasmFunctionAnalysis(func);
+			try {
+				funcAnalysis.analyzeFunction(program, codeReader);
+				functionAnalyses.put(f, funcAnalysis);
+			} catch (Exception e) {
+				Msg.error(this, "Failed to analyze function " + func.getName(), e);
+				f.setComment("WARNING: Wasm function analysis failed, output may be incorrect: " + e);
+			}
+		}
+		return functionAnalyses.get(f);
+	}
+
+	public WasmFuncType getType(int typeidx) {
+		return module.getType(typeidx);
+	}
+
+	public ValType getGlobalType(int globalidx) {
+		return module.getGlobalType(globalidx).getType();
+	}
+
+	public ValType getTableType(int tableidx) {
+		return module.getTableType(tableidx).getElementType();
+	}
+
+	private static List<WasmFuncSignature> getFunctions(Program program, WasmModule module) {
+		int numFunctions = module.getFunctionCount();
+		List<WasmFuncSignature> functions = new ArrayList<>(numFunctions);
+		for (int funcidx = 0; funcidx < numFunctions; funcidx++) {
+			WasmFuncType funcType = module.getFunctionType(funcidx);
+			Address startAddress = WasmLoader.getFunctionAddress(program, module, funcidx);
+			Address endAddress = startAddress.add(WasmLoader.getFunctionSize(program, module, funcidx) - 1);
+
+			String name = null;
+			Symbol[] labels = program.getSymbolTable().getSymbols(startAddress);
+			if (labels.length > 0) {
+				name = labels[0].getName();
+			}
+
+			ValType[] params = funcType.getParamTypes();
+			ValType[] returns = funcType.getReturnTypes();
+			ValType[] nonParamLocals = module.getFunctionLocals(funcidx);
+			if (nonParamLocals == null) {
+				/* import */
+				functions.add(new WasmFuncSignature(params, returns, name, startAddress));
+			} else {
+				ValType[] locals = new ValType[params.length + nonParamLocals.length];
+
+				System.arraycopy(params, 0, locals, 0, params.length);
+				System.arraycopy(nonParamLocals, 0, locals, params.length, nonParamLocals.length);
+				functions.add(new WasmFuncSignature(params, returns, name, startAddress, endAddress, locals));
+			}
+		}
+		return functions;
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmDWARFAnalyzer.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmDWARFAnalyzer.java
new file mode 100644
index 000000000000..771295f7ba08
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmDWARFAnalyzer.java
@@ -0,0 +1,35 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.analysis;
+
+import ghidra.app.plugin.core.analysis.DWARFAnalyzer;
+import ghidra.app.util.bin.format.dwarf4.next.sectionprovider.DWARFSectionProviderFactory;
+import ghidra.program.model.listing.Program;
+import wasm.WasmLoader;
+
+public class WasmDWARFAnalyzer extends DWARFAnalyzer {
+
+	@Override
+	public boolean canAnalyze(Program program) {
+		String format = program.getExecutableFormat();
+
+		if (WasmLoader.WEBASSEMBLY.equals(format)
+				&& DWARFSectionProviderFactory.createSectionProviderFor(program) != null) {
+			return true;
+		}
+		return false;
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFuncSignature.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFuncSignature.java
new file mode 100644
index 000000000000..20af3fc81515
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFuncSignature.java
@@ -0,0 +1,74 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.analysis;
+
+import ghidra.program.model.address.Address;
+import wasm.format.WasmEnums.ValType;
+
+public class WasmFuncSignature {
+	private ValType[] params;
+	private ValType[] returns;
+	private String name;
+	private Address startAddr;
+	private Address endAddr; // address of last byte in the function (inclusive)
+	private ValType[] locals;
+
+	public ValType[] getParams() {
+		return params;
+	}
+
+	public ValType[] getReturns() {
+		return returns;
+	}
+
+	public ValType[] getLocals() {
+		return locals;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public Address getStartAddr() {
+		return startAddr;
+	}
+
+	public Address getEndAddr() {
+		return endAddr;
+	}
+
+	public boolean isImport() {
+		return locals == null;
+	}
+
+	public WasmFuncSignature(ValType[] paramTypes, ValType[] returnTypes, String name, Address addr) {
+		this.name = name;
+		this.startAddr = addr;
+		this.params = paramTypes;
+		this.returns = returnTypes;
+	}
+
+	public WasmFuncSignature(ValType[] paramTypes, ValType[] returnTypes, String name, Address startAddr, Address endAddr, ValType[] locals) {
+		this(paramTypes, returnTypes, name, startAddr);
+		this.endAddr = endAddr;
+		this.locals = locals;
+	}
+
+	@Override
+	public String toString() {
+		return String.format("%s @ %s %dT -> %dT", name, startAddr.toString(), params.length, returns.length);
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
new file mode 100644
index 000000000000..9274a35b2617
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
@@ -0,0 +1,1097 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.analysis;
+
+import java.io.IOException;
+import java.math.BigInteger;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.program.model.address.Address;
+import ghidra.program.model.lang.Register;
+import ghidra.program.model.lang.RegisterValue;
+import ghidra.program.model.listing.ContextChangeException;
+import ghidra.program.model.listing.Program;
+import ghidra.program.model.listing.ProgramContext;
+import ghidra.util.Msg;
+import wasm.format.WasmEnums.ValType;
+import wasm.format.sections.structures.WasmFuncType;
+
+/**
+ * This preanalysis pass is partially patterned after the validation algorithm
+ * described in the Appendix:
+ * https://webassembly.github.io/spec/core/appendix/algorithm.html
+ */
+public class WasmFunctionAnalysis {
+
+	private WasmFuncSignature func;
+	/* null in the value stack means Unknown */
+	private List<ValType> valueStack = new ArrayList<>();
+	private List<ControlFrame> controlStack = new ArrayList<>();
+	private Map<Address, StackEffect> stackEffects = new HashMap<>();
+	private Map<Address, Long> globalGetSets = new HashMap<>();
+	private ContextRegister contextreg = new ContextRegister();
+
+	public WasmFunctionAnalysis(WasmFuncSignature func) {
+		this.func = func;
+	}
+
+	/*
+	 * Cache for program context changes so we can set the context register once,
+	 * instead of piece-by-piece
+	 */
+	private static class ContextRegister {
+		private static class RegisterDefinition {
+			private int start;
+			private int end;
+
+			public RegisterDefinition(int start, int end) {
+				this.start = start;
+				this.end = end;
+			}
+
+			public int getShift() {
+				return CONTEXT_REG_WIDTH - 1 - end;
+			}
+
+			public int getWidth() {
+				return end - start + 1;
+			}
+		}
+
+		/* These definitions must be synced with WebAssembly.slaspec */
+		private static final int CONTEXT_REG_WIDTH = 128;
+		private static final RegisterDefinition REG_IS_OP64 = new RegisterDefinition(0, 0);
+		private static final RegisterDefinition REG_IS_DIRECTIVE = new RegisterDefinition(1, 1);
+		private static final RegisterDefinition REG_IS_RETURN = new RegisterDefinition(2, 2);
+		private static final RegisterDefinition REG_IS_GLOBAL_SP = new RegisterDefinition(3, 3);
+		private static final RegisterDefinition REG_DIRECTIVE_TYPE = new RegisterDefinition(4, 6);
+		private static final RegisterDefinition REG_CASE_INDEX = new RegisterDefinition(32, 63);
+		private static final RegisterDefinition REG_BR_TARGET = new RegisterDefinition(64, 95);
+		private static final RegisterDefinition REG_SP = new RegisterDefinition(96, 127);
+
+		private static final int DIRECTIVE_CASE = 0;
+		private static final int DIRECTIVE_DEFAULT = 1;
+		private static final int DIRECTIVE_LOCALS = 2;
+		private static final int DIRECTIVE_LOCAL = 3;
+
+		private Map<Address, BigInteger> contextValues = new HashMap<>();
+
+		private void setRegister(Program program, Address address, RegisterDefinition reg, long value) {
+			if (!contextValues.containsKey(address)) {
+				if (program.getListing().getInstructionContaining(address) != null)
+					return;
+				contextValues.put(address, BigInteger.ZERO);
+			}
+
+			if (value < 0 || value > (1L << reg.getWidth()) - 1) {
+				throw new ArithmeticException("Context register value " + value + " is out of range");
+			}
+			contextValues.put(address, contextValues.get(address).or(BigInteger.valueOf(value).shiftLeft(reg.getShift())));
+		}
+
+		public void commitContext(Program program) {
+			ProgramContext context = program.getProgramContext();
+			Register contextRegister = context.getBaseContextRegister();
+			for (Map.Entry<Address, BigInteger> entry : contextValues.entrySet()) {
+				Address address = entry.getKey();
+				RegisterValue value = new RegisterValue(contextRegister, entry.getValue());
+				try {
+					context.setRegisterValue(address, address, value);
+				} catch (ContextChangeException e) {
+					Msg.error(this, "Failed to set context register at " + address, e);
+				}
+			}
+			contextValues.clear();
+		}
+
+		public void setIsReturn(Program program, Address address, int value) {
+			setRegister(program, address, REG_IS_RETURN, value);
+		}
+
+		/**
+		 * Set whether the instruction takes a 64-bit stack operand. This currently
+		 * affects local.*, global.* and select instructions.
+		 */
+		public void setIsOp64(Program program, Address address, ValType type) {
+			int value;
+			if (type == null || type == ValType.i32 || type == ValType.f32) {
+				/* 32-bit operand */
+				value = 0;
+			} else {
+				/* 64-bit operand */
+				value = 1;
+			}
+			setRegister(program, address, REG_IS_OP64, value);
+		}
+
+		/** Mark this global.* instruction as operating on the C stack pointer. */
+		public void setIsGlobalSp(Program program, Address address, boolean value) {
+			setRegister(program, address, REG_IS_GLOBAL_SP, value ? 1 : 0);
+		}
+
+		/** Set the address that this instruction branches to. */
+		public void setBranchTarget(Program program, Address address, Address target) {
+			setRegister(program, address, REG_BR_TARGET, target.getOffset());
+		}
+
+		/**
+		 * Set the virtual stack pointer. Our SLEIGH converts stack operations into
+		 * register operations by using the stack pointer to index a register file.
+		 */
+		public void setStackPointer(Program program, Address address, long value) {
+			setRegister(program, address, REG_SP, value);
+		}
+
+		/* Number of locals table entries */
+		public void setLocalsDeclaration(Program program, Address address) {
+			setRegister(program, address, REG_IS_DIRECTIVE, 1);
+			setRegister(program, address, REG_DIRECTIVE_TYPE, DIRECTIVE_LOCALS);
+		}
+
+		/* One entry in the function locals table */
+		public void setLocalDeclaration(Program program, Address address) {
+			setRegister(program, address, REG_IS_DIRECTIVE, 1);
+			setRegister(program, address, REG_DIRECTIVE_TYPE, DIRECTIVE_LOCAL);
+		}
+
+		/**
+		 * Disassemble this "instruction" as a case statement underneath a br_table. We
+		 * break out case statements individually in order to provide each one with a
+		 * unique branch target.
+		 */
+		public void setBrTableCase(Program program, Address address, int index) {
+			setRegister(program, address, REG_IS_DIRECTIVE, 1);
+			if (index == -1) {
+				setRegister(program, address, REG_DIRECTIVE_TYPE, DIRECTIVE_DEFAULT);
+			} else {
+				setRegister(program, address, REG_DIRECTIVE_TYPE, DIRECTIVE_CASE);
+				setRegister(program, address, REG_CASE_INDEX, index);
+			}
+		}
+	}
+
+	private static class BlockType {
+		ValType[] params;
+		ValType[] returns;
+
+		public BlockType(Program program, WasmFuncSignature func) {
+			/* A function's parameters are in local variables rather than the stack */
+			params = new ValType[0];
+			returns = func.getReturns();
+		}
+
+		public BlockType(Program program, long blocktype) {
+			WasmAnalysis analysis = WasmAnalysis.getState(program);
+			if (blocktype == -0x40) {
+				params = new ValType[0];
+				returns = new ValType[0];
+			} else if (blocktype < 0) {
+				params = new ValType[0];
+				returns = new ValType[] { ValType.fromByte((int) blocktype + 0x80) };
+			} else {
+				WasmFuncType type = analysis.getType((int) blocktype);
+				params = type.getParamTypes();
+				returns = type.getReturnTypes();
+			}
+		}
+	}
+
+	private enum BlockKind {
+		FUNCTION,
+		BLOCK,
+		IF,
+		LOOP
+	}
+
+	private class ControlFrame {
+		Address startAddress;
+		BlockKind blockKind;
+		BlockType blockType;
+		List<ValType> initialStack;
+		/** A list of instruction address which branch to this block. */
+		List<Address> branchAddresses = new ArrayList<>();
+		boolean unreachable = false;
+		boolean hasElse = false;
+
+		public ControlFrame(Program program, Address address, BlockType blockType) {
+			this.startAddress = address;
+			this.blockKind = BlockKind.FUNCTION;
+			this.blockType = blockType;
+			this.initialStack = new ArrayList<>();
+		}
+
+		public ControlFrame(Program program, Address address, BlockKind blockKind, BlockType blockType, List<ValType> stack) {
+			this.startAddress = address;
+			this.blockKind = blockKind;
+			this.blockType = blockType;
+			this.initialStack = new ArrayList<>(stack);
+		}
+
+		public ValType[] getBranchArguments() {
+			if (blockKind == BlockKind.LOOP) {
+				return blockType.params;
+			} else {
+				return blockType.returns;
+			}
+		}
+
+		/**
+		 * Track a branch to this block.
+		 * 
+		 * @param program
+		 * @param stack
+		 *            Value stack after the parameters ({@link #getBranchArguments})
+		 *            have been popped
+		 * @param address
+		 *            Address of the branch instruction
+		 */
+		public void addBranch(Program program, Address address) {
+			branchAddresses.add(address);
+		}
+
+		public void setElse(Program program, Address address) {
+			hasElse = true;
+			if (blockKind != BlockKind.IF) {
+				throw new ValidationException(address, "else without corresponding if");
+			}
+			contextreg.setBranchTarget(program, startAddress, address.add(1));
+		}
+
+		public void setEnd(Program program, Address address) {
+			if (blockKind == BlockKind.IF && !hasElse) {
+				contextreg.setBranchTarget(program, startAddress, address);
+			}
+
+			Address branchTarget;
+			if (blockKind == BlockKind.LOOP) {
+				branchTarget = startAddress;
+			} else {
+				branchTarget = address;
+			}
+			for (Address branch : branchAddresses) {
+				contextreg.setBranchTarget(program, branch, branchTarget);
+			}
+		}
+
+		@Override
+		public String toString() {
+			return blockKind + "@" + startAddress;
+		}
+	}
+
+	// #region Exported pre-analysis results
+	public static class StackEffect {
+		private int popHeight; // Height of the stack *after* the pops
+		private ValType[] toPop;
+		private int pushHeight; // Height of the stack *before* the pushes
+		private ValType[] toPush;
+
+		public StackEffect(int popHeight, ValType[] toPop, int pushHeight, ValType[] toPush) {
+			this.popHeight = popHeight;
+			this.toPop = toPop;
+			this.pushHeight = pushHeight;
+			this.toPush = toPush;
+		}
+
+		public int getPopHeight() {
+			return popHeight;
+		}
+
+		public ValType[] getToPop() {
+			if (toPop == null) {
+				return new ValType[0];
+			}
+			return toPop;
+		}
+
+		public int getPushHeight() {
+			return pushHeight;
+		}
+
+		public ValType[] getToPush() {
+			if (toPush == null) {
+				return new ValType[0];
+			}
+			return toPush;
+		}
+	}
+
+	public WasmFuncSignature getSignature() {
+		return func;
+	}
+
+	/**
+	 * Set the stack effect of this instruction - which types it pushes and pops.
+	 * This is used to handle variable-argument instructions, which currently
+	 * includes branch, call and return instructions. TODO: Ideally, these would be
+	 * saved to the program context, which would save us from having to re-analyze
+	 * functions when reopening the DB.
+	 */
+	private void setStackEffect(Program program, Address address, int popHeight, ValType[] toPop, int pushHeight, ValType[] toPush) {
+		stackEffects.put(address, new StackEffect(popHeight, toPop, pushHeight, toPush));
+	}
+
+	public StackEffect getStackEffect(Address address) {
+		return stackEffects.get(address);
+	}
+	// #endregion
+
+	// #region BinaryReader utilities
+	private static long readLeb128(BinaryReader reader) throws IOException {
+		return LEB128.readUnsignedValue(reader).asLong();
+	}
+
+	private static long readSignedLeb128(BinaryReader reader) throws IOException {
+		return LEB128.readSignedValue(reader).asLong();
+	}
+	// #endregion
+
+	// #region Value stack manipulation
+	private void pushValue(Address instAddress, ValType type) {
+		valueStack.add(type);
+	}
+
+	private ValType popValue(Address instAddress) {
+		ControlFrame curBlock = getBlock(instAddress, 0);
+		if (valueStack.size() <= curBlock.initialStack.size()) {
+			/* If our stack is polymorphic, popping off an empty stack is ok */
+			if (curBlock.unreachable)
+				return null;
+			throw new ValidationException(instAddress, "pop from empty stack");
+		}
+		return valueStack.remove(valueStack.size() - 1);
+	}
+
+	private ValType popValue(Address instAddress, ValType type) {
+		ValType top = popValue(instAddress);
+		if (type == null) {
+			return top;
+		}
+		if (top == null) {
+			return type;
+		}
+		if (top != type) {
+			throw new ValidationException(instAddress, "pop type mismatch: got " + top + ", expected " + type);
+		}
+		return top;
+	}
+
+	private void pushValues(Address instAddress, ValType[] types) {
+		for (int i = 0; i < types.length; i++) {
+			pushValue(instAddress, types[i]);
+		}
+	}
+
+	private void popValues(Address instAddress, ValType[] types) {
+		for (int i = types.length - 1; i >= 0; i--) {
+			popValue(instAddress, types[i]);
+		}
+	}
+	// #endregion
+
+	// #region Control stack manipulation
+	private void pushBlock(Address instAddress, ControlFrame block) {
+		controlStack.add(block);
+		pushValues(instAddress, block.blockType.params);
+	}
+
+	private ControlFrame popBlock(Address instAddress) {
+		if (controlStack.isEmpty()) {
+			throw new ValidationException(instAddress, "pop from empty block stack");
+		}
+		ControlFrame block = getBlock(instAddress, 0);
+		popValues(instAddress, block.blockType.returns);
+		if (valueStack.size() != block.initialStack.size()) {
+			throw new ValidationException(instAddress, "block end has wrong number of parameters");
+		}
+		controlStack.remove(controlStack.size() - 1);
+		return block;
+	}
+
+	private ControlFrame getBlock(Address instAddress, long labelidx) {
+		if (labelidx >= controlStack.size()) {
+			throw new ValidationException(instAddress, "invalid label index " + labelidx);
+		}
+		return controlStack.get(controlStack.size() - 1 - (int) labelidx);
+	}
+
+	/** Mark stack as polymorphic from this point to the end of the block */
+	private void markUnreachable(Address instAddress) {
+		ControlFrame curBlock = getBlock(instAddress, 0);
+		valueStack = new ArrayList<>(curBlock.initialStack);
+		curBlock.unreachable = true;
+	}
+	// #endregion
+
+	// #region Common instruction code
+	private void branchToBlock(Program program, Address instAddress, long labelidx) {
+		ControlFrame block = getBlock(instAddress, labelidx);
+		ValType[] arguments = block.getBranchArguments();
+		popValues(instAddress, arguments);
+		setStackEffect(program, instAddress, valueStack.size(), arguments, block.initialStack.size(), arguments);
+		block.addBranch(program, instAddress);
+		pushValues(instAddress, arguments);
+	}
+
+	private void memoryLoad(Program program, BinaryReader reader, Address instAddress, ValType destType) throws IOException {
+		readLeb128(reader); /* align */
+		readLeb128(reader); /* offset */
+		popValue(instAddress, ValType.i32);
+		pushValue(instAddress, destType);
+	}
+
+	private void memoryStore(Program program, BinaryReader reader, Address instAddress, ValType destType) throws IOException {
+		readLeb128(reader); /* align */
+		readLeb128(reader); /* offset */
+		popValue(instAddress, destType);
+		popValue(instAddress, ValType.i32);
+	}
+
+	private void unaryOp(Address instAddress, ValType srcType, ValType destType) {
+		popValue(instAddress, srcType);
+		pushValue(instAddress, destType);
+	}
+
+	private void binaryOp(Address instAddress, ValType srcType, ValType destType) {
+		popValue(instAddress, srcType);
+		popValue(instAddress, srcType);
+		pushValue(instAddress, destType);
+	}
+
+	// #endregion
+
+	private void analyzeOpcode(Program program, Address instAddress, BinaryReader reader) throws IOException {
+		contextreg.setStackPointer(program, instAddress, 8 * valueStack.size());
+		int opcode = reader.readNextUnsignedByte();
+		switch (opcode) {
+		case 0x00: /* unreachable */
+			markUnreachable(instAddress);
+			break;
+		case 0x01: /* nop */
+			break;
+
+		case 0x02: /* block bt */ {
+			BlockType blocktype = new BlockType(program, readSignedLeb128(reader));
+			popValues(instAddress, blocktype.params);
+			pushBlock(instAddress, this.new ControlFrame(program, instAddress, BlockKind.BLOCK, blocktype, valueStack));
+			break;
+		}
+		case 0x03: /* loop bt */ {
+			BlockType blocktype = new BlockType(program, readSignedLeb128(reader));
+			popValues(instAddress, blocktype.params);
+			pushBlock(instAddress, this.new ControlFrame(program, instAddress, BlockKind.LOOP, blocktype, valueStack));
+			break;
+		}
+		case 0x04: /* if bt */ {
+			BlockType blocktype = new BlockType(program, readSignedLeb128(reader));
+			popValue(instAddress, ValType.i32);
+			popValues(instAddress, blocktype.params);
+			pushBlock(instAddress, this.new ControlFrame(program, instAddress, BlockKind.IF, blocktype, valueStack));
+			break;
+		}
+		case 0x05: /* else */ {
+			ControlFrame block = popBlock(instAddress);
+			if (block.blockKind != BlockKind.IF) {
+				throw new ValidationException(instAddress, "else without matching if");
+			}
+
+			/*
+			 * The else instruction itself serves as a branch to the end of the block. The
+			 * branch from the if instruction will go to the instruction after the else.
+			 */
+			block.addBranch(program, instAddress);
+			block.setElse(program, instAddress);
+
+			block.unreachable = false;
+			pushBlock(instAddress, block);
+			break;
+		}
+		case 0x0B: /* end */ {
+			ControlFrame block = popBlock(instAddress);
+			// this stack effect will only be used by the final end
+			setStackEffect(program, instAddress, valueStack.size(), block.blockType.returns, 0, null);
+			pushValues(instAddress, block.blockType.returns);
+			block.setEnd(program, instAddress);
+			if (controlStack.isEmpty()) {
+				contextreg.setIsReturn(program, instAddress, 1);
+			}
+			break;
+		}
+
+		case 0x0C: /* br l */ {
+			long labelidx = readLeb128(reader);
+			branchToBlock(program, instAddress, labelidx);
+			markUnreachable(instAddress);
+			break;
+		}
+		case 0x0D: /* br_if l */ {
+			long labelidx = readLeb128(reader);
+			popValue(instAddress, ValType.i32);
+			branchToBlock(program, instAddress, labelidx);
+			break;
+		}
+		case 0x0E: /* br_table l* l */ {
+			long count = readLeb128(reader);
+			popValue(instAddress, ValType.i32);
+			for (int i = 0; i < count + 1; i++) {
+				Address caseAddress = func.getStartAddr().add(reader.getPointerIndex());
+				contextreg.setBrTableCase(program, caseAddress, (i < count) ? i : -1);
+				long labelidx = readLeb128(reader);
+				branchToBlock(program, caseAddress, labelidx);
+			}
+			markUnreachable(instAddress);
+			break;
+		}
+		case 0x0F: /* return */ {
+			popValues(instAddress, func.getReturns());
+			setStackEffect(program, instAddress, valueStack.size(), func.getReturns(), 0, null);
+			markUnreachable(instAddress);
+			break;
+		}
+		case 0x10: /* call x */ {
+			long funcidx = readLeb128(reader);
+			WasmAnalysis analysis = WasmAnalysis.getState(program);
+			WasmFuncSignature targetFunc = analysis.getFunction((int) funcidx);
+			ValType[] params = targetFunc.getParams();
+			ValType[] returns = targetFunc.getReturns();
+			popValues(instAddress, params);
+			setStackEffect(program, instAddress, valueStack.size(), params, valueStack.size(), returns);
+			contextreg.setBranchTarget(program, instAddress, targetFunc.getStartAddr());
+			pushValues(instAddress, returns);
+			break;
+		}
+		case 0x11: /* call_indirect x y */ {
+			long typeidx = readLeb128(reader);
+			long tableidx = readLeb128(reader);
+			WasmAnalysis analysis = WasmAnalysis.getState(program);
+			if (analysis.getTableType((int) tableidx) != ValType.funcref) {
+				throw new ValidationException(instAddress, "call_indirect does not reference a function table");
+			}
+			WasmFuncType type = analysis.getType((int) typeidx);
+
+			popValue(instAddress, ValType.i32);
+			ValType[] params = type.getParamTypes();
+			ValType[] returns = type.getReturnTypes();
+			popValues(instAddress, params);
+			setStackEffect(program, instAddress, valueStack.size(), params, valueStack.size(), returns);
+			pushValues(instAddress, returns);
+			break;
+		}
+
+		case 0x1A: /* drop */ {
+			popValue(instAddress);
+			break;
+		}
+		case 0x1B: /* select */ {
+			popValue(instAddress, ValType.i32);
+			ValType t1 = popValue(instAddress);
+			ValType t2 = popValue(instAddress);
+			if (t1 != null && t2 != null && t1 != t2) {
+				throw new ValidationException(instAddress, "inconsistent types in select");
+			}
+			ValType resultType = (t1 != null) ? t1 : t2;
+			contextreg.setIsOp64(program, instAddress, resultType);
+			pushValue(instAddress, resultType);
+			break;
+		}
+		case 0x1C: /* select t */ {
+			long count = readLeb128(reader);
+			if (count != 1) {
+				throw new ValidationException(instAddress, "only select t is supported");
+			}
+			ValType t = ValType.fromByte(reader.readNextUnsignedByte());
+			popValue(instAddress, ValType.i32);
+			popValue(instAddress, t);
+			popValue(instAddress, t);
+			pushValue(instAddress, t);
+			break;
+		}
+
+		case 0x20: /* local.get x */ {
+			long localidx = readLeb128(reader);
+			ValType type = func.getLocals()[(int) localidx];
+			contextreg.setIsOp64(program, instAddress, type);
+			pushValue(instAddress, type);
+			break;
+		}
+		case 0x21: /* local.set x */ {
+			long localidx = readLeb128(reader);
+			ValType type = func.getLocals()[(int) localidx];
+			contextreg.setIsOp64(program, instAddress, type);
+			popValue(instAddress, type);
+			break;
+		}
+		case 0x22: /* local.tee x */ {
+			long localidx = readLeb128(reader);
+			ValType type = func.getLocals()[(int) localidx];
+			contextreg.setIsOp64(program, instAddress, type);
+			popValue(instAddress, type);
+			pushValue(instAddress, type);
+			break;
+		}
+		case 0x23: /* global.get x */ {
+			long globalidx = readLeb128(reader);
+			ValType type = WasmAnalysis.getState(program).getGlobalType((int) globalidx);
+			contextreg.setIsOp64(program, instAddress, type);
+			globalGetSets.put(instAddress, globalidx);
+			pushValue(instAddress, type);
+			break;
+		}
+		case 0x24: /* global.set x */ {
+			long globalidx = readLeb128(reader);
+			ValType type = WasmAnalysis.getState(program).getGlobalType((int) globalidx);
+			contextreg.setIsOp64(program, instAddress, type);
+			globalGetSets.put(instAddress, globalidx);
+			popValue(instAddress, type);
+			break;
+		}
+
+		case 0x25: /* table.get x */ {
+			long tableidx = readLeb128(reader);
+			WasmAnalysis analysis = WasmAnalysis.getState(program);
+			ValType type = analysis.getTableType((int) tableidx);
+			popValue(instAddress, ValType.i32);
+			pushValue(instAddress, type);
+			break;
+		}
+		case 0x26: /* table.set x */ {
+			long tableidx = readLeb128(reader);
+			WasmAnalysis analysis = WasmAnalysis.getState(program);
+			ValType type = analysis.getTableType((int) tableidx);
+			popValue(instAddress, type);
+			popValue(instAddress, ValType.i32);
+			break;
+		}
+
+		case 0x28: /* i32.load memarg */
+		case 0x2C: /* i32.load8_s memarg */
+		case 0x2D: /* i32.load8_u memarg */
+		case 0x2E: /* i32.load16_s memarg */
+		case 0x2F: /* i32.load16_u memarg */
+			memoryLoad(program, reader, instAddress, ValType.i32);
+			break;
+		case 0x29: /* i64.load memarg */
+		case 0x30: /* i64.load8_s memarg */
+		case 0x31: /* i64.load8_u memarg */
+		case 0x32: /* i64.load16_s memarg */
+		case 0x33: /* i64.load16_u memarg */
+		case 0x34: /* i64.load32_s memarg */
+		case 0x35: /* i64.load32_u memarg */
+			memoryLoad(program, reader, instAddress, ValType.i64);
+			break;
+		case 0x2A: /* f32.load memarg */
+			memoryLoad(program, reader, instAddress, ValType.f32);
+			break;
+		case 0x2B: /* f64.load memarg */
+			memoryLoad(program, reader, instAddress, ValType.f64);
+			break;
+
+		case 0x36: /* i32.store memarg */
+		case 0x3A: /* i32.store8 memarg */
+		case 0x3B: /* i32.store16 memarg */
+			memoryStore(program, reader, instAddress, ValType.i32);
+			break;
+		case 0x37: /* i64.store memarg */
+		case 0x3C: /* i64.store8 memarg */
+		case 0x3D: /* i64.store16 memarg */
+		case 0x3E: /* i64.store32 memarg */
+			memoryStore(program, reader, instAddress, ValType.i64);
+			break;
+		case 0x38: /* f32.store memarg */
+			memoryStore(program, reader, instAddress, ValType.f32);
+			break;
+		case 0x39: /* f64.store memarg */
+			memoryStore(program, reader, instAddress, ValType.f64);
+			break;
+
+		case 0x3F: /* memory.size */ {
+			readLeb128(reader); /* memidx */
+			pushValue(instAddress, ValType.i32);
+			break;
+		}
+		case 0x40: /* memory.grow */ {
+			readLeb128(reader); /* memidx */
+			popValue(instAddress, ValType.i32);
+			pushValue(instAddress, ValType.i32);
+			break;
+		}
+
+		case 0x41: /* i32.const i32 */ {
+			readSignedLeb128(reader); /* value */
+			pushValue(instAddress, ValType.i32);
+			break;
+		}
+		case 0x42: /* i64.const i64 */ {
+			readSignedLeb128(reader); /* value */
+			pushValue(instAddress, ValType.i64);
+			break;
+		}
+		case 0x43: /* f32.const f32 */ {
+			reader.readNextByteArray(4); /* value */
+			pushValue(instAddress, ValType.f32);
+			break;
+		}
+		case 0x44: /* f64.const f64 */ {
+			reader.readNextByteArray(8); /* value */
+			pushValue(instAddress, ValType.f64);
+			break;
+		}
+
+		case 0x45: /* i32.eqz */
+			unaryOp(instAddress, ValType.i32, ValType.i32);
+			break;
+		case 0x46: /* i32.eq */
+		case 0x47: /* i32.ne */
+		case 0x48: /* i32.lt_s */
+		case 0x49: /* i32.lt_u */
+		case 0x4A: /* i32.gt_s */
+		case 0x4B: /* i32.gt_u */
+		case 0x4C: /* i32.le_s */
+		case 0x4D: /* i32.le_u */
+		case 0x4E: /* i32.ge_s */
+		case 0x4F: /* i32.ge_u */
+			binaryOp(instAddress, ValType.i32, ValType.i32);
+			break;
+		case 0x50: /* i64.eqz */
+			unaryOp(instAddress, ValType.i64, ValType.i32);
+			break;
+		case 0x51: /* i64.eq */
+		case 0x52: /* i64.ne */
+		case 0x53: /* i64.lt_s */
+		case 0x54: /* i64.lt_u */
+		case 0x55: /* i64.gt_s */
+		case 0x56: /* i64.gt_u */
+		case 0x57: /* i64.le_s */
+		case 0x58: /* i64.le_u */
+		case 0x59: /* i64.ge_s */
+		case 0x5A: /* i64.ge_u */
+			binaryOp(instAddress, ValType.i64, ValType.i32);
+			break;
+		case 0x5B: /* f32.eq */
+		case 0x5C: /* f32.ne */
+		case 0x5D: /* f32.lt */
+		case 0x5E: /* f32.gt */
+		case 0x5F: /* f32.le */
+		case 0x60: /* f32.ge */
+			binaryOp(instAddress, ValType.f32, ValType.i32);
+			break;
+		case 0x61: /* f64.eq */
+		case 0x62: /* f64.ne */
+		case 0x63: /* f64.lt */
+		case 0x64: /* f64.gt */
+		case 0x65: /* f64.le */
+		case 0x66: /* f64.ge */
+			binaryOp(instAddress, ValType.f64, ValType.i32);
+			break;
+		case 0x67: /* i32.clz */
+		case 0x68: /* i32.ctz */
+		case 0x69: /* i32.popcnt */
+			unaryOp(instAddress, ValType.i32, ValType.i32);
+			break;
+		case 0x6A: /* i32.add */
+		case 0x6B: /* i32.sub */
+		case 0x6C: /* i32.mul */
+		case 0x6D: /* i32.div_s */
+		case 0x6E: /* i32.div_u */
+		case 0x6F: /* i32.rem_s */
+		case 0x70: /* i32.rem_u */
+		case 0x71: /* i32.and */
+		case 0x72: /* i32.or */
+		case 0x73: /* i32.xor */
+		case 0x74: /* i32.shl */
+		case 0x75: /* i32.shr_s */
+		case 0x76: /* i32.shr_u */
+		case 0x77: /* i32.rotl */
+		case 0x78: /* i32.rotr */
+			binaryOp(instAddress, ValType.i32, ValType.i32);
+			break;
+		case 0x79: /* i64.clz */
+		case 0x7A: /* i64.ctz */
+		case 0x7B: /* i64.popcnt */
+			unaryOp(instAddress, ValType.i64, ValType.i64);
+			break;
+		case 0x7C: /* i64.add */
+		case 0x7D: /* i64.sub */
+		case 0x7E: /* i64.mul */
+		case 0x7F: /* i64.div_s */
+		case 0x80: /* i64.div_u */
+		case 0x81: /* i64.rem_s */
+		case 0x82: /* i64.rem_u */
+		case 0x83: /* i64.and */
+		case 0x84: /* i64.or */
+		case 0x85: /* i64.xor */
+		case 0x86: /* i64.shl */
+		case 0x87: /* i64.shr_s */
+		case 0x88: /* i64.shr_u */
+		case 0x89: /* i64.rotl */
+		case 0x8A: /* i64.rotr */
+			binaryOp(instAddress, ValType.i64, ValType.i64);
+			break;
+		case 0x8B: /* f32.abs */
+		case 0x8C: /* f32.neg */
+		case 0x8D: /* f32.ceil */
+		case 0x8E: /* f32.floor */
+		case 0x8F: /* f32.trunc */
+		case 0x90: /* f32.nearest */
+		case 0x91: /* f32.sqrt */
+			unaryOp(instAddress, ValType.f32, ValType.f32);
+			break;
+		case 0x92: /* f32.add */
+		case 0x93: /* f32.sub */
+		case 0x94: /* f32.mul */
+		case 0x95: /* f32.div */
+		case 0x96: /* f32.min */
+		case 0x97: /* f32.max */
+		case 0x98: /* f32.copysign */
+			binaryOp(instAddress, ValType.f32, ValType.f32);
+			break;
+		case 0x99: /* f64.abs */
+		case 0x9A: /* f64.neg */
+		case 0x9B: /* f64.ceil */
+		case 0x9C: /* f64.floor */
+		case 0x9D: /* f64.trunc */
+		case 0x9E: /* f64.nearest */
+		case 0x9F: /* f64.sqrt */
+			unaryOp(instAddress, ValType.f64, ValType.f64);
+			break;
+		case 0xA0: /* f64.add */
+		case 0xA1: /* f64.sub */
+		case 0xA2: /* f64.mul */
+		case 0xA3: /* f64.div */
+		case 0xA4: /* f64.min */
+		case 0xA5: /* f64.max */
+		case 0xA6: /* f64.copysign */
+			binaryOp(instAddress, ValType.f64, ValType.f64);
+			break;
+		case 0xA7: /* i32.wrap_i64 */
+			unaryOp(instAddress, ValType.i64, ValType.i32);
+			break;
+		case 0xA8: /* i32.trunc_f32_s */
+		case 0xA9: /* i32.trunc_f32_u */
+			unaryOp(instAddress, ValType.f32, ValType.i32);
+			break;
+		case 0xAA: /* i32.trunc_f64_s */
+		case 0xAB: /* i32.trunc_f64_u */
+			unaryOp(instAddress, ValType.f64, ValType.i32);
+			break;
+		case 0xAC: /* i64.extend_i32_s */
+		case 0xAD: /* i64.extend_i32_u */
+			unaryOp(instAddress, ValType.i32, ValType.i64);
+			break;
+		case 0xAE: /* i64.trunc_f32_s */
+		case 0xAF: /* i64.trunc_f32_u */
+			unaryOp(instAddress, ValType.f32, ValType.i64);
+			break;
+		case 0xB0: /* i64.trunc_f64_s */
+		case 0xB1: /* i64.trunc_f64_u */
+			unaryOp(instAddress, ValType.f64, ValType.i64);
+			break;
+		case 0xB2: /* f32.convert_i32_s */
+		case 0xB3: /* f32.convert_i32_u */
+			unaryOp(instAddress, ValType.i32, ValType.f32);
+			break;
+		case 0xB4: /* f32.convert_i64_s */
+		case 0xB5: /* f32.convert_i64_u */
+			unaryOp(instAddress, ValType.i64, ValType.f32);
+			break;
+		case 0xB6: /* f32.demote_f64 */
+			unaryOp(instAddress, ValType.f64, ValType.f32);
+			break;
+		case 0xB7: /* f64.convert_i32_s */
+		case 0xB8: /* f64.convert_i32_u */
+			unaryOp(instAddress, ValType.i32, ValType.f64);
+			break;
+		case 0xB9: /* f64.convert_i64_s */
+		case 0xBA: /* f64.convert_i64_u */
+			unaryOp(instAddress, ValType.i64, ValType.f64);
+			break;
+		case 0xBB: /* f64.promote_f32 */
+			unaryOp(instAddress, ValType.f32, ValType.f64);
+			break;
+		case 0xBC: /* i32.reinterpret_f32 */
+			unaryOp(instAddress, ValType.f32, ValType.i32);
+			break;
+		case 0xBD: /* i64.reinterpret_f64 */
+			unaryOp(instAddress, ValType.f64, ValType.i64);
+			break;
+		case 0xBE: /* f32.reinterpret_i32 */
+			unaryOp(instAddress, ValType.i32, ValType.f32);
+			break;
+		case 0xBF: /* f64.reinterpret_i64 */
+			unaryOp(instAddress, ValType.i64, ValType.f64);
+			break;
+		case 0xC0: /* i32.extend8_s */
+		case 0xC1: /* i32.extend16_s */
+			unaryOp(instAddress, ValType.i32, ValType.i32);
+			break;
+		case 0xC2: /* i64.extend8_s */
+		case 0xC3: /* i64.extend16_s */
+		case 0xC4: /* i64.extend32_s */
+			unaryOp(instAddress, ValType.i64, ValType.i64);
+			break;
+
+		case 0xD0: /* ref.null t */ {
+			ValType reftype = ValType.fromByte(reader.readNextUnsignedByte());
+			pushValue(instAddress, reftype);
+			break;
+		}
+		case 0xD1: /* ref.is_null */
+			popValue(instAddress);
+			pushValue(instAddress, ValType.i32);
+			break;
+		case 0xD2: /* ref.func x */ {
+			long funcidx = readLeb128(reader);
+			WasmAnalysis analysis = WasmAnalysis.getState(program);
+			WasmFuncSignature targetFunc = analysis.getFunction((int) funcidx);
+			contextreg.setBranchTarget(program, instAddress, targetFunc.getStartAddr());
+			pushValue(instAddress, ValType.funcref);
+			break;
+		}
+		case 0xFC: {
+			int opcode2 = reader.readNextUnsignedByte();
+			switch (opcode2) {
+			case 0x00: /* i32.trunc_sat_f32_s */
+			case 0x01: /* i32.trunc_sat_f32_u */
+				unaryOp(instAddress, ValType.f32, ValType.i32);
+				break;
+			case 0x02: /* i32.trunc_sat_f64_s */
+			case 0x03: /* i32.trunc_sat_f64_u */
+				unaryOp(instAddress, ValType.f64, ValType.i32);
+				break;
+			case 0x04: /* i64.trunc_sat_f32_s */
+			case 0x05: /* i64.trunc_sat_f32_u */
+				unaryOp(instAddress, ValType.f32, ValType.i64);
+				break;
+			case 0x06: /* i64.trunc_sat_f64_s */
+			case 0x07: /* i64.trunc_sat_f64_u */
+				unaryOp(instAddress, ValType.f64, ValType.i64);
+				break;
+			case 0x08: /* memory.init x */ {
+				readLeb128(reader); /* dataidx */
+				readLeb128(reader); /* memidx */
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress, ValType.i32);
+				break;
+			}
+			case 0x09: /* data.drop x */ {
+				readLeb128(reader); /* dataidx */
+				break;
+			}
+			case 0x0A: /* memory.copy */ {
+				readLeb128(reader); /* memidx */
+				readLeb128(reader); /* memidx2 */
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress, ValType.i32);
+				break;
+			}
+			case 0x0B: /* memory.fill */ {
+				readLeb128(reader); /* memidx */
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress, ValType.i32);
+				break;
+			}
+			case 0x0C: /* table.init x y */ {
+				readLeb128(reader); /* elemidx */
+				readLeb128(reader); /* tableidx */
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress, ValType.i32);
+				break;
+			}
+			case 0x0D: /* elem.drop x */ {
+				readLeb128(reader); /* elemidx */
+				break;
+			}
+			case 0x0E: /* table.copy x y */ {
+				readLeb128(reader); /* tableidx */
+				readLeb128(reader); /* tableidx2 */
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress, ValType.i32);
+				break;
+			}
+			case 0x0F: /* table.grow x */ {
+				readLeb128(reader); /* tableidx */
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress);
+				break;
+			}
+			case 0x10: /* table.size x */ {
+				readLeb128(reader); /* tableidx */
+				pushValue(instAddress, ValType.i32);
+				break;
+			}
+			case 0x11: /* table.fill x */ {
+				readLeb128(reader); /* tableidx */
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress);
+				popValue(instAddress, ValType.i32);
+				break;
+			}
+			default:
+				Msg.warn(this, "Illegal opcode 0xfc " + String.format("0x%02x", opcode2) + " at " + instAddress);
+				break;
+			}
+			break;
+		}
+		default:
+			Msg.warn(this, "Illegal opcode " + String.format("0x%02x", opcode) + " at " + instAddress);
+			break;
+		}
+	}
+
+	public void analyzeFunction(Program program, BinaryReader reader) throws IOException {
+		Address startAddress = func.getStartAddr();
+		long functionLength = func.getEndAddr().subtract(func.getStartAddr());
+
+		// read the function locals
+		Address instAddress;
+
+		instAddress = startAddress.add(reader.getPointerIndex());
+		contextreg.setLocalsDeclaration(program, instAddress);
+		long count = readLeb128(reader);
+		for (int i = 0; i < count; i++) {
+			instAddress = startAddress.add(reader.getPointerIndex());
+			contextreg.setLocalDeclaration(program, instAddress);
+			readLeb128(reader); /* count */
+			readLeb128(reader); /* type */
+		}
+
+		instAddress = startAddress.add(reader.getPointerIndex());
+		pushBlock(instAddress, new ControlFrame(program, instAddress, new BlockType(program, func)));
+		while (reader.getPointerIndex() <= functionLength) {
+			instAddress = startAddress.add(reader.getPointerIndex());
+			analyzeOpcode(program, instAddress, reader);
+		}
+	}
+
+	public void applyContext(Program program, int cStackGlobal) {
+		for (Map.Entry<Address, Long> entry : globalGetSets.entrySet()) {
+			if (entry.getValue() == cStackGlobal) {
+				contextreg.setIsGlobalSp(program, entry.getKey(), entry.getValue() == cStackGlobal);
+			}
+		}
+		contextreg.commitContext(program);
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmPreAnalyzer.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmPreAnalyzer.java
new file mode 100644
index 000000000000..3a7eee607bc0
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmPreAnalyzer.java
@@ -0,0 +1,189 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.analysis;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import ghidra.app.services.AbstractAnalyzer;
+import ghidra.app.services.AnalysisPriority;
+import ghidra.app.services.AnalyzerType;
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.MemoryByteProvider;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.app.util.importer.MessageLog;
+import ghidra.framework.options.Options;
+import ghidra.program.disassemble.Disassembler;
+import ghidra.program.disassemble.DisassemblerMessageListener;
+import ghidra.program.model.address.Address;
+import ghidra.program.model.address.AddressSet;
+import ghidra.program.model.address.AddressSetView;
+import ghidra.program.model.lang.Processor;
+import ghidra.program.model.listing.Function;
+import ghidra.program.model.listing.Program;
+import ghidra.util.HelpLocation;
+import ghidra.util.Msg;
+import ghidra.util.exception.CancelledException;
+import ghidra.util.task.TaskMonitor;
+
+public class WasmPreAnalyzer extends AbstractAnalyzer {
+	private final static String NAME = "Wasm Pre-Analyzer";
+	private final static String DESCRIPTION = "Analyze Wasm code before disassembly to resolve operand sizes and jump offsets";
+
+	private final static int CSTACK_GLOBAL_DISABLE = -1;
+	private final static int CSTACK_GLOBAL_AUTO = -2;
+
+	private final static String OPTION_NAME_CSTACK_GLOBAL = "C Stack Pointer";
+	private static final String OPTION_DESCRIPTION_CSTACK_GLOBAL = "0-based index of the global variable being used as the C stack pointer. Set to -1 to disable C stack inference. Set to -2 to guess C stack pointer automatically (default).";
+	private final static int OPTION_DEFAULT_CSTACK_GLOBAL = CSTACK_GLOBAL_AUTO;
+	private int cStackGlobal = OPTION_DEFAULT_CSTACK_GLOBAL;
+
+	public WasmPreAnalyzer() {
+		super(NAME, DESCRIPTION, AnalyzerType.BYTE_ANALYZER);
+		// run immediately before initial disassembly
+		setPriority(AnalysisPriority.BLOCK_ANALYSIS.before());
+		setDefaultEnablement(true);
+	}
+
+	@Override
+	public boolean canAnalyze(Program program) {
+		return program.getLanguage().getProcessor().equals(Processor.findOrPossiblyCreateProcessor("WebAssembly"));
+	}
+
+	@Override
+	public void registerOptions(Options options, Program program) {
+		HelpLocation helpLocation = new HelpLocation("AutoAnalysisPlugin", "Auto_Analysis_Option_Instructions");
+
+		options.registerOption(OPTION_NAME_CSTACK_GLOBAL, cStackGlobal, helpLocation,
+				OPTION_DESCRIPTION_CSTACK_GLOBAL);
+	}
+
+	@Override
+	public void optionsChanged(Options options, Program program) {
+		cStackGlobal = options.getInt(OPTION_NAME_CSTACK_GLOBAL, cStackGlobal);
+	}
+
+	private int guessCStackGlobalForFunction(Program program, Address funcAddress) throws IOException {
+		BinaryReader codeReader = new BinaryReader(new MemoryByteProvider(program.getMemory(), funcAddress), true);
+		int localsCount = LEB128.readAsInt32(codeReader);
+		for (int i = 0; i < localsCount; i++) {
+			LEB128.readAsInt32(codeReader); /* count */
+			LEB128.readAsInt32(codeReader); /* type */
+		}
+
+		/*
+		 * Look for a global.get at the start of the function, and assume that it loads
+		 * the C stack pointer if present
+		 */
+		if (codeReader.readNextUnsignedByte() != 0x23)
+			return -1;
+		return LEB128.readAsInt32(codeReader);
+	}
+
+	private int guessCStackGlobal(Program program, List<WasmFuncSignature> functions, TaskMonitor monitor) {
+		/* Guess the C stack global by looking at which global appears most often */
+		Map<Integer, Integer> cStackGuesses = new HashMap<>();
+		monitor.setMessage("Analyzing C stack...");
+		monitor.initialize(functions.size());
+		for (WasmFuncSignature function : functions) {
+			if (monitor.isCancelled()) {
+				return CSTACK_GLOBAL_AUTO;
+			}
+			monitor.incrementProgress(1);
+
+			if (function.isImport()) {
+				continue;
+			}
+
+			try {
+				int guessedGlobal = guessCStackGlobalForFunction(program, function.getStartAddr());
+				if (guessedGlobal != -1) {
+					int count = cStackGuesses.getOrDefault(guessedGlobal, 0);
+					cStackGuesses.put(guessedGlobal, count + 1);
+				}
+			} catch (IOException e) {
+				Msg.error(this, "Failed to analyze function " + function.getName(), e);
+			}
+		}
+
+		int bestGuess = CSTACK_GLOBAL_DISABLE;
+		int bestCount = -1;
+		for (Map.Entry<Integer, Integer> entry : cStackGuesses.entrySet()) {
+			if (entry.getValue() > bestCount) {
+				bestGuess = entry.getKey();
+				bestCount = entry.getValue();
+			}
+		}
+		Msg.info(this, "Guessed C stack global: " + bestGuess);
+		return bestGuess;
+	}
+
+	@Override
+	public boolean added(Program program, AddressSetView set, TaskMonitor monitor, MessageLog log) throws CancelledException {
+		monitor.setMessage("Parsing module...");
+		WasmAnalysis state = WasmAnalysis.getState(program);
+		List<WasmFuncSignature> functions = state.getFunctions();
+
+		if (cStackGlobal == CSTACK_GLOBAL_AUTO) {
+			cStackGlobal = guessCStackGlobal(program, functions, monitor);
+		}
+
+		monitor.setMessage("Analyzing functions...");
+		monitor.initialize(functions.size());
+
+		Disassembler disassembler = Disassembler.getDisassembler(program, monitor, new DisassemblerMessageListener() {
+			@Override
+			public void disassembleMessageReported(String msg) {
+				if (monitor != null) {
+					monitor.setMessage(msg);
+				}
+			}
+		});
+		disassembler.setRepeatPatternLimit(-1);
+
+		/*
+		 * TODO: Support reanalyzing changed functions, to handle patches and
+		 * significant function changes.
+		 * TODO: Support reanalyzing to change C stack pointer
+		 */
+		for (Function function : program.getListing().getFunctions(set, true)) {
+			if (monitor.isCancelled()) {
+				break;
+			}
+			monitor.incrementProgress(1);
+
+			WasmFuncSignature func = state.getFunctionByAddress(function.getEntryPoint());
+			if (func == null) {
+				Msg.error(this, "Function not defined in Wasm file: " + function.getEntryPoint());
+				continue;
+			}
+			if (func.isImport()) {
+				continue;
+			}
+			WasmFunctionAnalysis funcAnalysis = state.getFunctionAnalysis(function);
+			try {
+				funcAnalysis.applyContext(program, cStackGlobal);
+				AddressSet funcSet = new AddressSet(func.getStartAddr(), func.getEndAddr());
+				disassembler.disassemble(funcSet, funcSet, false);
+			} catch (Exception e) {
+				Msg.error(this, "Failed to analyze function " + func, e);
+			}
+		}
+		return true;
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmSignatureAnalyzer.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmSignatureAnalyzer.java
new file mode 100644
index 000000000000..1f1fee999aa9
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmSignatureAnalyzer.java
@@ -0,0 +1,118 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.analysis;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import ghidra.app.services.AbstractAnalyzer;
+import ghidra.app.services.AnalysisPriority;
+import ghidra.app.services.AnalyzerType;
+import ghidra.app.util.importer.MessageLog;
+import ghidra.program.model.address.AddressSetView;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.VoidDataType;
+import ghidra.program.model.lang.Processor;
+import ghidra.program.model.listing.Function;
+import ghidra.program.model.listing.Function.FunctionUpdateType;
+import ghidra.program.model.listing.Parameter;
+import ghidra.program.model.listing.ParameterImpl;
+import ghidra.program.model.listing.Program;
+import ghidra.program.model.symbol.SourceType;
+import ghidra.util.Msg;
+import ghidra.util.exception.CancelledException;
+import ghidra.util.task.TaskMonitor;
+import wasm.format.WasmEnums.ValType;
+
+public class WasmSignatureAnalyzer extends AbstractAnalyzer {
+	private final static String NAME = "Wasm Signature Analyzer";
+	private final static String DESCRIPTION = "Apply function signatures from Wasm metadata";
+
+	public WasmSignatureAnalyzer() {
+		super(NAME, DESCRIPTION, AnalyzerType.BYTE_ANALYZER);
+		// run immediately after Apply Data Archives, since that pass might introduce
+		// invalid signatures
+		setPriority(AnalysisPriority.FUNCTION_ID_ANALYSIS.after().after());
+		setDefaultEnablement(true);
+	}
+
+	@Override
+	public boolean canAnalyze(Program program) {
+		return program.getLanguage().getProcessor().equals(Processor.findOrPossiblyCreateProcessor("WebAssembly"));
+	}
+
+	private static boolean paramsMatch(List<Parameter> newParams, Parameter[] existingParams) {
+		/* TODO: what if existingParams has a struct which occupies multiple slots? */
+		if (newParams.size() != existingParams.length) {
+			return false;
+		}
+		for (int i = 0; i < existingParams.length; i++) {
+			if (newParams.get(i).getLength() != existingParams[i].getLength()) {
+				return false;
+			}
+		}
+		return true;
+	}
+
+	private static void setFunctionSignature(Program program, Function function, WasmFuncSignature sig) throws Exception {
+		DataType returnType;
+		if (sig.getReturns().length > 0) {
+			/* TODO handle multiple returns */
+			returnType = sig.getReturns()[0].asDataType();
+		} else {
+			returnType = VoidDataType.dataType;
+		}
+
+		function.setCallingConvention("__wasm");
+
+		if (returnType.getLength() != function.getReturnType().getLength()) {
+			/* function return type is wrong: reset it */
+			function.setReturnType(returnType, SourceType.IMPORTED);
+		}
+
+		List<Parameter> params = new ArrayList<>();
+		ValType[] rawParams = sig.getParams();
+		for (int i = 0; i < rawParams.length; i++) {
+			params.add(new ParameterImpl("param" + (i + 1), rawParams[i].asDataType(), program));
+		}
+
+		if (!paramsMatch(params, function.getParameters())) {
+			function.replaceParameters(params, FunctionUpdateType.DYNAMIC_STORAGE_ALL_PARAMS, true, SourceType.IMPORTED);
+		}
+	}
+
+	@Override
+	public boolean added(Program program, AddressSetView set, TaskMonitor monitor, MessageLog log) throws CancelledException {
+		WasmAnalysis state = WasmAnalysis.getState(program);
+		List<WasmFuncSignature> functions = state.getFunctions();
+		monitor.initialize(functions.size());
+		for (int i = 0; i < functions.size(); i++) {
+			if (monitor.isCancelled()) {
+				break;
+			}
+			monitor.setProgress(i);
+
+			WasmFuncSignature func = functions.get(i);
+			Function function = program.getListing().getFunctionAt(func.getStartAddr());
+			try {
+				setFunctionSignature(program, function, func);
+			} catch (Exception e) {
+				Msg.error(this, "Failed to set function signature for " + func.getName(), e);
+			}
+		}
+		return true;
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/StructureBuilder.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/StructureBuilder.java
new file mode 100644
index 000000000000..bf822bf460bb
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/StructureBuilder.java
@@ -0,0 +1,135 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.StructConverter;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.program.model.data.ArrayDataType;
+import ghidra.program.model.data.CategoryPath;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.DataTypeComponent;
+import ghidra.program.model.data.DataTypeComponentImpl;
+import ghidra.program.model.data.Structure;
+import ghidra.program.model.data.StructureDataType;
+import ghidra.util.exception.DuplicateNameException;
+
+public class StructureBuilder {
+	private class SBStructure extends StructureDataType {
+		public SBStructure(CategoryPath path, String name, int length) {
+			super(path, name, length);
+		}
+
+		/**
+		 * Add a component to this structure. This function does not repack the
+		 * structure after adding, in order to avoid quadratic behaviour when adding a
+		 * large number of structure elements. To ensure correct behaviour, the
+		 * structure should be repacked after components have been added.
+		 */
+		@Override
+		public DataTypeComponent add(DataType dataType, int length, String componentName, String comment) {
+			dataType = validateDataType(dataType);
+
+			dataType = dataType.clone(dataMgr);
+
+			checkAncestry(dataType);
+
+			DataTypeComponentImpl dtc;
+			int offset = structLength;
+			int ordinal = numComponents;
+
+			int componentLength = getPreferredComponentLength(dataType, length);
+
+			dtc = new DataTypeComponentImpl(dataType, this, componentLength, ordinal, offset,
+					componentName, comment);
+			dataType.addParent(this);
+			components.add(dtc);
+
+			int structureGrowth = dtc.getLength();
+			if (!isPackingEnabled() && length > 0) {
+				structureGrowth = length;
+			}
+
+			numComponents++;
+			structLength += structureGrowth;
+			return dtc;
+		}
+	}
+
+	private SBStructure structure;
+
+	public StructureBuilder(String name) {
+		CategoryPath path = new CategoryPath(CategoryPath.ROOT, "Wasm");
+		structure = new SBStructure(path, name, 0);
+	}
+
+	public Structure toStructure() {
+		StructureDataType newStructure = new StructureDataType(structure.getCategoryPath(), structure.getName(), 0);
+		newStructure.replaceWith(structure);
+		return newStructure;
+	}
+
+	public void add(DataType dataType, int length, String name, String comment) {
+		structure.add(dataType, length, name, comment);
+	}
+
+	public void add(DataType dataType, int length, String name) {
+		add(dataType, length, name, null);
+	}
+
+	public void add(DataType dataType, String name, String comment) {
+		structure.add(dataType, dataType.getLength(), name, comment);
+	}
+
+	public void add(DataType dataType, String name) {
+		add(dataType, name, null);
+	}
+
+	public void add(LEB128 leb128, String name, String comment) {
+		addArray(StructConverter.BYTE, leb128.getLength(), name, comment);
+	}
+
+	public void add(LEB128 leb128, String name) {
+		add(leb128, name, null);
+	}
+
+	public void add(StructConverter converter, String name, String comment) throws DuplicateNameException, IOException {
+		add(converter.toDataType(), name, comment);
+	}
+
+	public void add(StructConverter converter, String name) throws DuplicateNameException, IOException {
+		add(converter.toDataType(), name, null);
+	}
+
+	public void addArray(DataType dataType, int numElements, String name, String comment) {
+		if (numElements > 0)
+			structure.add(new ArrayDataType(dataType, numElements, dataType.getLength()), name, comment);
+	}
+
+	public void addArray(DataType dataType, int numElements, String name) {
+		addArray(dataType, numElements, name, null);
+	}
+
+	public void addString(int byteSize, String name, String comment) {
+		if (byteSize > 0)
+			structure.add(StructConverter.STRING, byteSize, name, comment);
+	}
+
+	public void addString(int byteSize, String name) {
+		addString(byteSize, name, null);
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmConstants.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmConstants.java
new file mode 100644
index 000000000000..dd6393541ef4
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmConstants.java
@@ -0,0 +1,21 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format;
+
+public class WasmConstants {
+	public final static byte[] WASM_MAGIC = new byte[] { 0, 0x61, 0x73, 0x6D };
+	public final static int WASM_VERSION = 1;
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmEnums.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmEnums.java
new file mode 100644
index 000000000000..b597d114de6c
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmEnums.java
@@ -0,0 +1,101 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format;
+
+import java.util.HashMap;
+
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.DoubleDataType;
+import ghidra.program.model.data.FloatDataType;
+import ghidra.program.model.data.Pointer64DataType;
+import ghidra.program.model.data.Undefined4DataType;
+import ghidra.program.model.data.Undefined8DataType;
+
+public class WasmEnums {
+	public enum WasmExternalKind {
+		EXT_FUNCTION,
+		EXT_TABLE,
+		EXT_MEMORY,
+		EXT_GLOBAL
+	}
+
+	public enum ValType {
+		i32(0x7f),
+		i64(0x7e),
+		f32(0x7d),
+		f64(0x7c),
+
+		funcref(0x70),
+		externref(0x6f);
+
+		private static final HashMap<Integer, ValType> BY_BYTE = new HashMap<>();
+		public final int typeByte;
+
+		static {
+			for (ValType t : ValType.values()) {
+				BY_BYTE.put(t.typeByte, t);
+			}
+		}
+
+		private ValType(int v) {
+			this.typeByte = v;
+		}
+
+		public DataType asDataType() {
+			switch (this) {
+			case i32:
+				return Undefined4DataType.dataType;
+			case i64:
+				return Undefined8DataType.dataType;
+			case f32:
+				return FloatDataType.dataType;
+			case f64:
+				return DoubleDataType.dataType;
+			case funcref:
+				return Pointer64DataType.dataType;
+			case externref:
+				return Undefined8DataType.dataType;
+			}
+			return null;
+		}
+
+		public int getSize() {
+			switch (this) {
+			case i32:
+			case f32:
+				return 4;
+			case i64:
+			case f64:
+			case funcref:
+			case externref:
+				return 8;
+			}
+			return 4;
+		}
+
+		public static ValType fromByte(int b) {
+			return BY_BYTE.get(b);
+		}
+
+		public static ValType[] fromBytes(byte[] types) {
+			ValType[] res = new ValType[types.length];
+			for (int i = 0; i < types.length; i++) {
+				res[i] = fromByte(types[i]);
+			}
+			return res;
+		}
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmHeader.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmHeader.java
new file mode 100644
index 000000000000..f17d0b7d542c
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmHeader.java
@@ -0,0 +1,54 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format;
+
+import java.io.IOException;
+import java.util.Arrays;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.StructConverter;
+import ghidra.program.model.data.DataType;
+import ghidra.util.exception.DuplicateNameException;
+
+public class WasmHeader implements StructConverter {
+
+	private byte[] magic;
+	private int version;
+
+	public WasmHeader(BinaryReader reader) throws IOException {
+		magic = reader.readNextByteArray(WasmConstants.WASM_MAGIC.length);
+		version = reader.readNextInt();
+		if (!Arrays.equals(WasmConstants.WASM_MAGIC, magic)) {
+			throw new IOException("not a wasm file.");
+		}
+	}
+
+	@Override
+	public DataType toDataType() throws DuplicateNameException, IOException {
+		StructureBuilder builder = new StructureBuilder("header");
+		builder.add(STRING, 4, "magic");
+		builder.add(DWORD, 4, "version");
+		return builder.toStructure();
+	}
+
+	public byte[] getMagic() {
+		return magic;
+	}
+
+	public int getVersion() {
+		return version;
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmModule.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmModule.java
new file mode 100644
index 000000000000..ee0463326690
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmModule.java
@@ -0,0 +1,273 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.Map;
+
+import ghidra.app.util.bin.BinaryReader;
+import wasm.format.WasmEnums.ValType;
+import wasm.format.WasmEnums.WasmExternalKind;
+import wasm.format.sections.WasmCodeSection;
+import wasm.format.sections.WasmCustomSection;
+import wasm.format.sections.WasmDataSection;
+import wasm.format.sections.WasmElementSection;
+import wasm.format.sections.WasmExportSection;
+import wasm.format.sections.WasmFunctionSection;
+import wasm.format.sections.WasmGlobalSection;
+import wasm.format.sections.WasmImportSection;
+import wasm.format.sections.WasmLinearMemorySection;
+import wasm.format.sections.WasmNameSection;
+import wasm.format.sections.WasmSection;
+import wasm.format.sections.WasmSection.WasmSectionId;
+import wasm.format.sections.WasmStartSection;
+import wasm.format.sections.WasmTableSection;
+import wasm.format.sections.WasmTypeSection;
+import wasm.format.sections.structures.WasmDataSegment;
+import wasm.format.sections.structures.WasmElementSegment;
+import wasm.format.sections.structures.WasmExportEntry;
+import wasm.format.sections.structures.WasmFuncType;
+import wasm.format.sections.structures.WasmCodeEntry;
+import wasm.format.sections.structures.WasmGlobalEntry;
+import wasm.format.sections.structures.WasmGlobalType;
+import wasm.format.sections.structures.WasmImportEntry;
+import wasm.format.sections.structures.WasmResizableLimits;
+import wasm.format.sections.structures.WasmTableType;
+
+public class WasmModule {
+
+	private WasmHeader header;
+	private List<WasmSection> sections = new ArrayList<>();
+	private List<WasmCustomSection> customSections = new ArrayList<>();
+	private Map<WasmSectionId, WasmSection> sectionMap = new EnumMap<>(WasmSectionId.class);
+
+	public WasmModule(BinaryReader reader) throws IOException {
+		header = new WasmHeader(reader);
+		while (reader.getPointerIndex() < reader.length()) {
+			WasmSection section = WasmSection.createSection(reader);
+			if (section == null)
+				continue;
+			sections.add(section);
+
+			/* Except for custom sections, all other sections may appear at most once. */
+			if (section.getId() == WasmSectionId.SEC_CUSTOM) {
+				customSections.add((WasmCustomSection) section);
+			} else {
+				sectionMap.put(section.getId(), section);
+			}
+		}
+	}
+
+	public WasmHeader getHeader() {
+		return header;
+	}
+
+	public List<WasmSection> getSections() {
+		return sections;
+	}
+
+	public WasmSection getSection(WasmSectionId sectionId) {
+		return sectionMap.get(sectionId);
+	}
+
+	// #region Sections which do not represent vectors of entries
+	public List<WasmCustomSection> getCustomSections() {
+		return Collections.unmodifiableList(customSections);
+	}
+
+	public WasmNameSection getNameSection() {
+		for (WasmCustomSection section : customSections) {
+			if (section instanceof WasmNameSection) {
+				return (WasmNameSection) section;
+			}
+		}
+		return null;
+	}
+
+	public WasmStartSection getStartSection() {
+		return (WasmStartSection) sectionMap.get(WasmSectionId.SEC_START);
+	}
+	// #endregion
+
+	// #region Sections which represent vectors of entries
+	private WasmTypeSection getTypeSection() {
+		return (WasmTypeSection) sectionMap.get(WasmSectionId.SEC_TYPE);
+	}
+
+	private WasmImportSection getImportSection() {
+		return (WasmImportSection) sectionMap.get(WasmSectionId.SEC_IMPORT);
+	}
+
+	private WasmFunctionSection getFunctionSection() {
+		return (WasmFunctionSection) sectionMap.get(WasmSectionId.SEC_FUNCTION);
+	}
+
+	private WasmTableSection getTableSection() {
+		return (WasmTableSection) sectionMap.get(WasmSectionId.SEC_TABLE);
+	}
+
+	private WasmLinearMemorySection getLinearMemorySection() {
+		return (WasmLinearMemorySection) sectionMap.get(WasmSectionId.SEC_LINEARMEMORY);
+	}
+
+	private WasmGlobalSection getGlobalSection() {
+		return (WasmGlobalSection) sectionMap.get(WasmSectionId.SEC_GLOBAL);
+	}
+
+	private WasmExportSection getExportSection() {
+		return (WasmExportSection) sectionMap.get(WasmSectionId.SEC_EXPORT);
+	}
+
+	private WasmElementSection getElementSection() {
+		return (WasmElementSection) sectionMap.get(WasmSectionId.SEC_ELEMENT);
+	}
+
+	private WasmCodeSection getCodeSection() {
+		return (WasmCodeSection) sectionMap.get(WasmSectionId.SEC_CODE);
+	}
+
+	private WasmDataSection getDataSection() {
+		return (WasmDataSection) sectionMap.get(WasmSectionId.SEC_DATA);
+	}
+
+	public WasmFuncType getType(int typeidx) {
+		WasmTypeSection typeSection = getTypeSection();
+		if (typeSection == null) {
+			throw new IndexOutOfBoundsException(typeidx);
+		}
+		return typeSection.getType(typeidx);
+	}
+
+	public List<WasmImportEntry> getImports(WasmExternalKind kind) {
+		WasmImportSection importSection = getImportSection();
+		if (importSection == null) {
+			return Collections.emptyList();
+		}
+		return importSection.getImports(kind);
+	}
+
+	public List<WasmTableType> getNonImportedTables() {
+		WasmTableSection tableSection = getTableSection();
+		if (tableSection == null) {
+			return Collections.emptyList();
+		}
+		return tableSection.getTables();
+	}
+
+	public List<WasmResizableLimits> getNonImportedMemories() {
+		WasmLinearMemorySection memorySection = getLinearMemorySection();
+		if (memorySection == null) {
+			return Collections.emptyList();
+		}
+		return memorySection.getMemories();
+	}
+
+	public List<WasmGlobalEntry> getNonImportedGlobals() {
+		WasmGlobalSection globalSection = getGlobalSection();
+		if (globalSection == null) {
+			return Collections.emptyList();
+		}
+		return globalSection.getEntries();
+	}
+
+	public List<WasmExportEntry> getExports(WasmExternalKind kind) {
+		WasmExportSection exportSection = getExportSection();
+		if (exportSection == null) {
+			return Collections.emptyList();
+		}
+		return exportSection.getExports(kind);
+	}
+
+	public List<WasmElementSegment> getElementSegments() {
+		WasmElementSection elementSection = getElementSection();
+		if (elementSection == null) {
+			return Collections.emptyList();
+		}
+		return elementSection.getSegments();
+	}
+
+	public List<WasmCodeEntry> getNonImportedFunctions() {
+		WasmCodeSection codeSection = getCodeSection();
+		if (codeSection == null) {
+			return Collections.emptyList();
+		}
+		return codeSection.getFunctions();
+	}
+
+	public List<WasmDataSegment> getDataSegments() {
+		WasmDataSection dataSection = getDataSection();
+		if (dataSection == null) {
+			return Collections.emptyList();
+		}
+		return dataSection.getSegments();
+	}
+	// #endregion
+
+	// #region Convenience functions
+	public int getFunctionCount() {
+		int numFunctions = getImports(WasmExternalKind.EXT_FUNCTION).size();
+		WasmFunctionSection functionSection = getFunctionSection();
+		if (functionSection != null) {
+			numFunctions += functionSection.getTypeCount();
+		}
+		return numFunctions;
+	}
+
+	public WasmFuncType getFunctionType(int funcidx) {
+		List<WasmImportEntry> imports = getImports(WasmExternalKind.EXT_FUNCTION);
+		if (funcidx < imports.size()) {
+			return getType(imports.get(funcidx).getFunctionType());
+		}
+		return getType(getFunctionSection().getTypeIdx(funcidx - imports.size()));
+	}
+
+	public ValType[] getFunctionLocals(int funcidx) {
+		List<WasmImportEntry> imports = getImports(WasmExternalKind.EXT_FUNCTION);
+		if (funcidx < imports.size()) {
+			return null;
+		}
+		return getNonImportedFunctions().get(funcidx - imports.size()).getLocals();
+	}
+
+	public WasmGlobalType getGlobalType(int globalidx) {
+		List<WasmImportEntry> imports = getImports(WasmExternalKind.EXT_GLOBAL);
+		if (globalidx < imports.size()) {
+			return imports.get(globalidx).getGlobalType();
+		}
+		return getNonImportedGlobals().get(globalidx - imports.size()).getGlobalType();
+	}
+
+	public WasmTableType getTableType(int tableidx) {
+		List<WasmImportEntry> imports = getImports(WasmExternalKind.EXT_TABLE);
+		if (tableidx < imports.size()) {
+			return imports.get(tableidx).getTableType();
+		}
+		return getNonImportedTables().get(tableidx - imports.size());
+	}
+
+	public WasmExportEntry findExport(WasmExternalKind kind, int idx) {
+		WasmExportSection exportSection = getExportSection();
+		if (exportSection == null) {
+			return null;
+		}
+		return exportSection.findEntry(kind, idx);
+	}
+	// #endregion
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCodeSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCodeSection.java
new file mode 100644
index 000000000000..10823223293d
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCodeSection.java
@@ -0,0 +1,58 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+import wasm.format.sections.structures.WasmCodeEntry;
+
+public class WasmCodeSection extends WasmSection {
+
+	private LEB128 count;
+	private List<WasmCodeEntry> functions = new ArrayList<WasmCodeEntry>();
+
+	public WasmCodeSection(BinaryReader reader) throws IOException {
+		super(reader);
+		count = LEB128.readUnsignedValue(reader);
+		for (int i = 0; i < count.asLong(); ++i) {
+			functions.add(new WasmCodeEntry(reader));
+		}
+	}
+
+	public List<WasmCodeEntry> getFunctions() {
+		return Collections.unmodifiableList(functions);
+	}
+
+	@Override
+	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
+		builder.add(count, "count");
+		for (int i = 0; i < functions.size(); i++) {
+			builder.add(functions.get(i), "function_" + i);
+		}
+	}
+
+	@Override
+	public String getName() {
+		return ".code";
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCustomSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCustomSection.java
new file mode 100644
index 000000000000..57b674f55259
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCustomSection.java
@@ -0,0 +1,64 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+import wasm.format.sections.structures.WasmName;
+
+public abstract class WasmCustomSection extends WasmSection {
+	private WasmName name;
+	private long customLength;
+
+	protected WasmCustomSection(BinaryReader reader) throws IOException {
+		super(reader);
+		name = new WasmName(reader);
+		customLength = getContentSize() - name.getSize();
+	}
+
+	public static WasmCustomSection create(BinaryReader reader) throws IOException {
+		long initialOffset = reader.getPointerIndex();
+		/* skip section header: id + contentLength */
+		reader.readNextUnsignedByte();
+		LEB128.readUnsignedValue(reader);
+
+		String name = new WasmName(reader).getValue();
+		reader.setPointerIndex(initialOffset);
+
+		if (name.equals("name")) {
+			return new WasmNameSection(reader);
+		}
+
+		return new WasmUnknownCustomSection(reader);
+	}
+
+	@Override
+	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
+		builder.add(name, "name");
+	}
+
+	public String getCustomName() {
+		return name.getValue();
+	}
+
+	public long getCustomSize() {
+		return customLength;
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmDataSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmDataSection.java
new file mode 100644
index 000000000000..18af527c2705
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmDataSection.java
@@ -0,0 +1,58 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+import wasm.format.sections.structures.WasmDataSegment;
+
+public class WasmDataSection extends WasmSection {
+
+	private LEB128 count;
+	private List<WasmDataSegment> dataSegments = new ArrayList<WasmDataSegment>();
+
+	public WasmDataSection(BinaryReader reader) throws IOException {
+		super(reader);
+		count = LEB128.readUnsignedValue(reader);
+		for (int i = 0; i < count.asLong(); ++i) {
+			dataSegments.add(new WasmDataSegment(reader));
+		}
+	}
+
+	public List<WasmDataSegment> getSegments() {
+		return Collections.unmodifiableList(dataSegments);
+	}
+
+	@Override
+	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
+		builder.add(count, "count");
+		for (int i = 0; i < dataSegments.size(); i++) {
+			builder.add(dataSegments.get(i), "segment_" + i);
+		}
+	}
+
+	@Override
+	public String getName() {
+		return ".data";
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmElementSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmElementSection.java
new file mode 100644
index 000000000000..f23aa1a0f126
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmElementSection.java
@@ -0,0 +1,58 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+import wasm.format.sections.structures.WasmElementSegment;
+
+public class WasmElementSection extends WasmSection {
+
+	private LEB128 count;
+	private List<WasmElementSegment> elements = new ArrayList<WasmElementSegment>();
+
+	public WasmElementSection(BinaryReader reader) throws IOException {
+		super(reader);
+		count = LEB128.readUnsignedValue(reader);
+		for (int i = 0; i < count.asLong(); ++i) {
+			elements.add(new WasmElementSegment(reader));
+		}
+	}
+
+	public List<WasmElementSegment> getSegments() {
+		return Collections.unmodifiableList(elements);
+	}
+
+	@Override
+	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
+		builder.add(count, "count");
+		for (int i = 0; i < elements.size(); i++) {
+			builder.add(elements.get(i), "element_" + i);
+		}
+	}
+
+	@Override
+	public String getName() {
+		return ".element";
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmExportSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmExportSection.java
new file mode 100644
index 000000000000..f0b1731cb0b8
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmExportSection.java
@@ -0,0 +1,77 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.Map;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+import wasm.format.WasmEnums.WasmExternalKind;
+import wasm.format.sections.structures.WasmExportEntry;
+
+public class WasmExportSection extends WasmSection {
+
+	private LEB128 count;
+	private List<WasmExportEntry> exportList = new ArrayList<>();
+	private Map<WasmExternalKind, List<WasmExportEntry>> exports = new EnumMap<>(WasmExternalKind.class);
+
+	public WasmExportSection(BinaryReader reader) throws IOException {
+		super(reader);
+		count = LEB128.readUnsignedValue(reader);
+		for (int i = 0; i < count.asLong(); ++i) {
+			WasmExportEntry entry = new WasmExportEntry(reader);
+			WasmExternalKind kind = entry.getKind();
+			if (!exports.containsKey(kind)) {
+				exports.put(kind, new ArrayList<WasmExportEntry>());
+			}
+			exports.get(kind).add(entry);
+			exportList.add(entry);
+		}
+	}
+
+	public List<WasmExportEntry> getExports(WasmExternalKind kind) {
+		return exports.getOrDefault(kind, Collections.emptyList());
+	}
+
+	public WasmExportEntry findEntry(WasmExternalKind kind, int id) {
+		for (WasmExportEntry entry : getExports(kind)) {
+			if (entry.getIndex() == id) {
+				return entry;
+			}
+		}
+		return null;
+	}
+
+	@Override
+	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
+		builder.add(count, "count");
+		for (int i = 0; i < exportList.size(); i++) {
+			builder.add(exportList.get(i), "export_" + i);
+		}
+	}
+
+	@Override
+	public String getName() {
+		return ".export";
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmFunctionSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmFunctionSection.java
new file mode 100644
index 000000000000..30b12cffa6b1
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmFunctionSection.java
@@ -0,0 +1,60 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+
+public class WasmFunctionSection extends WasmSection {
+
+	private LEB128 count;
+	private List<LEB128> types = new ArrayList<LEB128>();
+
+	public WasmFunctionSection(BinaryReader reader) throws IOException {
+		super(reader);
+		count = LEB128.readUnsignedValue(reader);
+		for (int i = 0; i < count.asLong(); ++i) {
+			types.add(LEB128.readUnsignedValue(reader));
+		}
+	}
+
+	public int getTypeIdx(int funcidx) {
+		return (int) types.get(funcidx).asLong();
+	}
+
+	public int getTypeCount() {
+		return types.size();
+	}
+
+	@Override
+	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
+		builder.add(count, "count");
+		for (int i = 0; i < types.size(); i++) {
+			builder.add(types.get(i), "function_" + i);
+		}
+	}
+
+	@Override
+	public String getName() {
+		return ".function";
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmGlobalSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmGlobalSection.java
new file mode 100644
index 000000000000..c80715af8174
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmGlobalSection.java
@@ -0,0 +1,58 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+import wasm.format.sections.structures.WasmGlobalEntry;
+
+public class WasmGlobalSection extends WasmSection {
+
+	private LEB128 count;
+	private List<WasmGlobalEntry> globals = new ArrayList<>();
+
+	public WasmGlobalSection(BinaryReader reader) throws IOException {
+		super(reader);
+		count = LEB128.readUnsignedValue(reader);
+		for (int i = 0; i < count.asLong(); ++i) {
+			globals.add(new WasmGlobalEntry(reader));
+		}
+	}
+
+	public List<WasmGlobalEntry> getEntries() {
+		return Collections.unmodifiableList(globals);
+	}
+
+	@Override
+	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
+		builder.add(count, "count");
+		for (int i = 0; i < globals.size(); i++) {
+			builder.add(globals.get(i), "global_" + i);
+		}
+	}
+
+	@Override
+	public String getName() {
+		return ".global";
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmImportSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmImportSection.java
new file mode 100644
index 000000000000..24a01428a859
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmImportSection.java
@@ -0,0 +1,68 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.Map;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+import wasm.format.WasmEnums.WasmExternalKind;
+import wasm.format.sections.structures.WasmImportEntry;
+
+public class WasmImportSection extends WasmSection {
+
+	private LEB128 count;
+	private List<WasmImportEntry> importList = new ArrayList<>();
+	private Map<WasmExternalKind, List<WasmImportEntry>> imports = new EnumMap<>(WasmExternalKind.class);
+
+	public WasmImportSection(BinaryReader reader) throws IOException {
+		super(reader);
+		count = LEB128.readUnsignedValue(reader);
+		for (int i = 0; i < count.asLong(); ++i) {
+			WasmImportEntry entry = new WasmImportEntry(reader);
+			WasmExternalKind kind = entry.getKind();
+			if (!imports.containsKey(kind)) {
+				imports.put(kind, new ArrayList<WasmImportEntry>());
+			}
+			imports.get(kind).add(entry);
+			importList.add(entry);
+		}
+	}
+
+	public List<WasmImportEntry> getImports(WasmExternalKind kind) {
+		return imports.getOrDefault(kind, Collections.emptyList());
+	}
+
+	@Override
+	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
+		builder.add(count, "count");
+		for (int i = 0; i < importList.size(); i++) {
+			builder.add(importList.get(i), "import_" + i);
+		}
+	}
+
+	@Override
+	public String getName() {
+		return ".import";
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmLinearMemorySection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmLinearMemorySection.java
new file mode 100644
index 000000000000..1c0528684620
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmLinearMemorySection.java
@@ -0,0 +1,58 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+import wasm.format.sections.structures.WasmResizableLimits;
+
+public class WasmLinearMemorySection extends WasmSection {
+
+	private LEB128 count;
+	private List<WasmResizableLimits> limits = new ArrayList<WasmResizableLimits>();
+
+	public WasmLinearMemorySection(BinaryReader reader) throws IOException {
+		super(reader);
+		count = LEB128.readUnsignedValue(reader);
+		for (int i = 0; i < count.asLong(); ++i) {
+			limits.add(new WasmResizableLimits(reader));
+		}
+	}
+
+	public List<WasmResizableLimits> getMemories() {
+		return Collections.unmodifiableList(limits);
+	}
+
+	@Override
+	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
+		builder.add(count, "count");
+		for (int i = 0; i < limits.size(); i++) {
+			builder.add(limits.get(i), "memory_type_" + i);
+		}
+	}
+
+	@Override
+	public String getName() {
+		return ".linearMemory";
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmNameSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmNameSection.java
new file mode 100644
index 000000000000..e7c83c194590
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmNameSection.java
@@ -0,0 +1,97 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.Map;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+import wasm.format.sections.structures.WasmNameLocalSubsection;
+import wasm.format.sections.structures.WasmNameMapSubsection;
+import wasm.format.sections.structures.WasmNameModuleSubsection;
+import wasm.format.sections.structures.WasmNameSubsection;
+import wasm.format.sections.structures.WasmNameSubsection.WasmNameSubsectionId;;
+
+public class WasmNameSection extends WasmCustomSection {
+	private List<WasmNameSubsection> subsections = new ArrayList<>();
+	private Map<WasmNameSubsectionId, WasmNameSubsection> subsectionMap = new EnumMap<>(WasmNameSubsectionId.class);
+
+	public WasmNameSection(BinaryReader reader) throws IOException {
+		super(reader);
+		long sectionEnd = getSectionOffset() + getSectionSize();
+		while (reader.getPointerIndex() < sectionEnd) {
+			WasmNameSubsection subsection = WasmNameSubsection.createSubsection(reader);
+			if (subsection == null)
+				continue;
+			subsections.add(subsection);
+			if (subsection.getId() != null)
+				subsectionMap.put(subsection.getId(), subsection);
+		}
+	}
+
+	@Override
+	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
+		super.addToStructure(builder);
+		for (int i = 0; i < subsections.size(); i++) {
+			builder.add(subsections.get(i), subsections.get(i).getName());
+		}
+	}
+
+	public String getModuleName() {
+		WasmNameSubsection subsection = subsectionMap.get(WasmNameSubsectionId.NAME_MODULE);
+		if (subsection == null)
+			return null;
+		return ((WasmNameModuleSubsection) subsection).getModuleName();
+	}
+
+	public String getFunctionName(int idx) {
+		WasmNameSubsection subsection = subsectionMap.get(WasmNameSubsectionId.NAME_FUNCTION);
+		if (subsection == null)
+			return null;
+		return ((WasmNameMapSubsection) subsection).getName(idx);
+	}
+
+	public String getLocalName(int funcidx, int localidx) {
+		WasmNameSubsection subsection = subsectionMap.get(WasmNameSubsectionId.NAME_LOCAL);
+		if (subsection == null)
+			return null;
+		return ((WasmNameLocalSubsection) subsection).getLocalName(funcidx, localidx);
+	}
+
+	public String getGlobalName(int idx) {
+		WasmNameSubsection subsection = subsectionMap.get(WasmNameSubsectionId.NAME_GLOBAL);
+		if (subsection == null)
+			return null;
+		return ((WasmNameMapSubsection) subsection).getName(idx);
+	}
+
+	public String getDataName(int idx) {
+		WasmNameSubsection subsection = subsectionMap.get(WasmNameSubsectionId.NAME_DATA);
+		if (subsection == null)
+			return null;
+		return ((WasmNameMapSubsection) subsection).getName(idx);
+	}
+
+	@Override
+	public String getName() {
+		return ".name";
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmSection.java
new file mode 100644
index 000000000000..c8701a0a5ea4
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmSection.java
@@ -0,0 +1,123 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.StructConverter;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.program.model.data.DataType;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+
+public abstract class WasmSection implements StructConverter {
+	
+	private WasmSectionId id;
+	private LEB128 contentLength;
+	private long sectionOffset;
+
+	public enum WasmSectionId {
+		SEC_CUSTOM,
+		SEC_TYPE,
+		SEC_IMPORT,
+		SEC_FUNCTION,
+		SEC_TABLE,
+		SEC_LINEARMEMORY,
+		SEC_GLOBAL,
+		SEC_EXPORT,
+		SEC_START,
+		SEC_ELEMENT,
+		SEC_CODE,
+		SEC_DATA
+	}
+	
+	public static WasmSection createSection(BinaryReader reader) throws IOException {
+		long sectionOffset = reader.getPointerIndex();
+		int id = reader.readNextUnsignedByte();
+		LEB128 contentLength = LEB128.readUnsignedValue(reader);
+		reader.setPointerIndex(reader.getPointerIndex() + contentLength.asLong());
+
+		if(id >= WasmSectionId.values().length)
+			return null;
+
+		BinaryReader sectionReader = reader.clone(sectionOffset);
+
+		switch (WasmSectionId.values()[id]) {
+			case SEC_CUSTOM:
+				return WasmCustomSection.create(sectionReader);
+			case SEC_TYPE:
+				return new WasmTypeSection(sectionReader);
+			case SEC_IMPORT:
+				return new WasmImportSection(sectionReader);
+			case SEC_FUNCTION:
+				return new WasmFunctionSection(sectionReader);
+			case SEC_TABLE:
+				return new WasmTableSection(sectionReader);
+			case SEC_LINEARMEMORY:
+				return new WasmLinearMemorySection(sectionReader);
+			case SEC_GLOBAL:
+				return new WasmGlobalSection(sectionReader);
+			case SEC_EXPORT:
+				return new WasmExportSection(sectionReader);
+			case SEC_START:
+				return new WasmStartSection(sectionReader);
+			case SEC_ELEMENT:
+				return new WasmElementSection(sectionReader);
+			case SEC_CODE:
+				return new WasmCodeSection(sectionReader);
+			case SEC_DATA:
+				return new WasmDataSection(sectionReader);
+			default:
+				return null;
+		}
+	}
+	
+	protected WasmSection(BinaryReader reader) throws IOException {
+		sectionOffset = reader.getPointerIndex();
+		id = WasmSectionId.values()[reader.readNextUnsignedByte()];
+		contentLength = LEB128.readUnsignedValue(reader);
+	}
+	
+	@Override
+	public DataType toDataType() throws DuplicateNameException, IOException {
+		StructureBuilder builder = new StructureBuilder(getName());
+		builder.add(BYTE, "id");
+		builder.add(contentLength, "size");
+		addToStructure(builder);
+		return builder.toStructure();
+	}
+	
+	public abstract String getName();
+
+	protected abstract void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException;
+
+	public WasmSectionId getId() {
+		return id;
+	}
+
+	public long getSectionOffset() {
+		return sectionOffset;
+	}
+
+	public long getContentSize() {
+		return contentLength.asLong();
+	}
+
+	public long getSectionSize() {
+		return 1 + contentLength.getLength() + contentLength.asLong();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmStartSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmStartSection.java
new file mode 100644
index 000000000000..76c620e29073
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmStartSection.java
@@ -0,0 +1,47 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+
+public class WasmStartSection extends WasmSection {
+
+	private LEB128 funcIdx;
+
+	public WasmStartSection(BinaryReader reader) throws IOException {
+		super(reader);
+		funcIdx = LEB128.readUnsignedValue(reader);
+	}
+
+	public long getStartFunctionIndex() {
+		return funcIdx.asLong();
+	}
+
+	@Override
+	public void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
+		builder.add(funcIdx, "func");
+	}
+
+	@Override
+	public String getName() {
+		return ".start";
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmTableSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmTableSection.java
new file mode 100644
index 000000000000..552a9ac44f02
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmTableSection.java
@@ -0,0 +1,58 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+import wasm.format.sections.structures.WasmTableType;
+
+public class WasmTableSection extends WasmSection {
+
+	private LEB128 count;
+	private List<WasmTableType> tables = new ArrayList<WasmTableType>();
+
+	public WasmTableSection(BinaryReader reader) throws IOException {
+		super(reader);
+		count = LEB128.readUnsignedValue(reader);
+		for (int i = 0; i < count.asLong(); ++i) {
+			tables.add(new WasmTableType(reader));
+		}
+	}
+
+	public List<WasmTableType> getTables() {
+		return Collections.unmodifiableList(tables);
+	}
+
+	@Override
+	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
+		builder.add(count, "count");
+		for (int i = 0; i < tables.size(); i++) {
+			builder.add(tables.get(i), "table_" + i);
+		}
+	}
+
+	@Override
+	public String getName() {
+		return ".table";
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmTypeSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmTypeSection.java
new file mode 100644
index 000000000000..2ca53528b093
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmTypeSection.java
@@ -0,0 +1,61 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+import wasm.format.sections.structures.WasmFuncType;
+
+public class WasmTypeSection extends WasmSection {
+
+	private LEB128 count;
+	private List<WasmFuncType> types = new ArrayList<WasmFuncType>();
+
+	public WasmTypeSection(BinaryReader reader) throws IOException {
+		super(reader);
+		count = LEB128.readUnsignedValue(reader);
+		for (int i = 0; i < count.asLong(); ++i) {
+			types.add(new WasmFuncType(reader));
+		}
+	}
+
+	public WasmFuncType getType(int typeidx) {
+		return types.get(typeidx);
+	}
+
+	public int getNumTypes() {
+		return types.size();
+	}
+
+	@Override
+	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
+		builder.add(count, "count");
+		for (int i = 0; i < types.size(); i++) {
+			builder.add(types.get(i), "type_" + i);
+		}
+	}
+
+	@Override
+	public String getName() {
+		return ".type";
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmUnknownCustomSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmUnknownCustomSection.java
new file mode 100644
index 000000000000..9496a8b45f6b
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmUnknownCustomSection.java
@@ -0,0 +1,52 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+
+public class WasmUnknownCustomSection extends WasmCustomSection {
+	private long contentOffset;
+	private byte[] contents;
+
+	public WasmUnknownCustomSection(BinaryReader reader) throws IOException {
+		super(reader);
+		contentOffset = reader.getPointerIndex();
+		contents = reader.readNextByteArray((int) getCustomSize());
+	}
+
+	@Override
+	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
+		super.addToStructure(builder);
+		builder.addArray(BYTE, (int) getCustomSize(), "custom");
+	}
+
+	@Override
+	public String getName() {
+		return ".custom" + getCustomName(); // to avoid DataType conflict
+	}
+
+	public long getContentOffset() {
+		return contentOffset;
+	}
+
+	public byte[] getContents() {
+		return contents;
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java
new file mode 100644
index 000000000000..022629c71146
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java
@@ -0,0 +1,201 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.StructConverter;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.program.model.address.Address;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.Float4DataType;
+import ghidra.program.model.data.Float8DataType;
+import ghidra.program.model.listing.Program;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.WasmLoader;
+import wasm.format.StructureBuilder;
+import wasm.format.WasmModule;
+
+/* A reader for expressions containing a single constant instruction.
+
+In principle, constant expressions could contain more than one 
+
+Such expressions consist of an instruction from the following list:
+- t.const c
+- ref.null
+- ref.func x
+- global.get x
+followed by an explicit end byte (0x0b).
+*/
+public final class ConstantExpression implements StructConverter {
+
+	private ConstantInstruction type;
+	private Object value;
+
+	private enum ConstantInstruction {
+		I32_CONST, /* i32.const n: value is LEB128 */
+		I64_CONST, /* i64.const n: value is LEB128 */
+		F32_CONST, /* f32.const z: value is byte[4] */
+		F64_CONST, /* f64.const z: value is byte[8] */
+		REF_NULL_FUNCREF, /* ref.null funcref: value is null */
+		REF_NULL_EXTERNREF, /* ref.null externref: value is null */
+		REF_FUNC, /* ref.func x: value is LEB128 funcidx */
+		GLOBAL_GET, /* global.get x: value is LEB128 globalidx */
+	}
+
+	public ConstantExpression(BinaryReader reader) throws IOException, IllegalArgumentException {
+		int typeCode = reader.readNextUnsignedByte();
+
+		switch (typeCode) {
+		case 0x23:
+			type = ConstantInstruction.GLOBAL_GET;
+			value = LEB128.readUnsignedValue(reader);
+			break;
+		case 0x41:
+			type = ConstantInstruction.I32_CONST;
+			value = LEB128.readUnsignedValue(reader);
+			break;
+		case 0x42:
+			type = ConstantInstruction.I64_CONST;
+			value = LEB128.readUnsignedValue(reader);
+			break;
+		case 0x43:
+			type = ConstantInstruction.F32_CONST;
+			value = reader.readNextByteArray(4);
+			break;
+		case 0x44:
+			type = ConstantInstruction.F64_CONST;
+			value = reader.readNextByteArray(8);
+			break;
+		case 0xD0: {
+			int refTypeCode = reader.readNextUnsignedByte();
+			if (refTypeCode == 0x6F) {
+				type = ConstantInstruction.REF_NULL_EXTERNREF;
+			} else if (refTypeCode == 0x70) {
+				type = ConstantInstruction.REF_NULL_FUNCREF;
+			} else {
+				throw new IllegalArgumentException("Invalid ref.null reftype " + refTypeCode);
+			}
+			value = null;
+			break;
+		}
+		case 0xD2:
+			type = ConstantInstruction.REF_FUNC;
+			value = LEB128.readUnsignedValue(reader);
+			break;
+		default:
+			throw new IllegalArgumentException("Invalid instruction opcode " + typeCode + " in constant expression");
+		}
+
+		int end = reader.readNextUnsignedByte();
+		if (end != 0x0b) {
+			throw new IllegalArgumentException("Missing end byte");
+		}
+	}
+
+	public static byte[] intToBytes(int value) {
+		byte[] result = new byte[4];
+		for (int i = 0; i < 4; i++) {
+			result[i] = (byte) value;
+			value >>= 8;
+		}
+		return result;
+	}
+
+	public static byte[] longToBytes(long value) {
+		byte[] result = new byte[8];
+		for (int i = 0; i < 8; i++) {
+			result[i] = (byte) value;
+			value >>= 8;
+		}
+		return result;
+	}
+
+	/**
+	 * Return the bytes that correspond to the value produced, i.e. 4 bytes for
+	 * i32.const, 8 bytes for ref.null, etc. Return null if the initializer cannot
+	 * be determined (e.g. global) This needs a reference to the module so that
+	 * function references can be resolved to their static addresses.
+	 */
+	public byte[] asBytes(WasmModule module) {
+		switch (type) {
+		case I32_CONST:
+			return intToBytes((int) ((LEB128) value).asLong());
+		case I64_CONST:
+			return longToBytes(((LEB128) value).asLong());
+		case REF_FUNC:
+			return longToBytes(WasmLoader.getFunctionAddressOffset(module, (int) ((LEB128) value).asLong()));
+		case F32_CONST:
+		case F64_CONST:
+			return (byte[]) value;
+		case REF_NULL_FUNCREF:
+		case REF_NULL_EXTERNREF:
+			return new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 };
+		case GLOBAL_GET:
+			return null;
+		default:
+			return null;
+		}
+	}
+
+	public Address asAddress(Program program, WasmModule module) {
+		if (type == ConstantInstruction.REF_FUNC) {
+			return WasmLoader.getFunctionAddress(program, module, (int) ((LEB128) value).asLong());
+		}
+		return null;
+	}
+
+	public Long asI32() {
+		if (type == ConstantInstruction.I32_CONST) {
+			return ((LEB128) value).asLong();
+		}
+		return null;
+	}
+
+	public Long asGlobalGet() {
+		if (type == ConstantInstruction.GLOBAL_GET) {
+			return ((LEB128) value).asLong();
+		}
+		return null;
+	}
+
+	@Override
+	public DataType toDataType() throws DuplicateNameException, IOException {
+		StructureBuilder builder = new StructureBuilder("expr");
+		builder.add(BYTE, "opcode");
+		switch (type) {
+		case I32_CONST:
+		case I64_CONST:
+		case REF_FUNC:
+		case GLOBAL_GET:
+			builder.add((LEB128) value, "value");
+			break;
+		case F32_CONST:
+			builder.add(Float4DataType.dataType, "value");
+			break;
+		case F64_CONST:
+			builder.add(Float8DataType.dataType, "value");
+			break;
+		case REF_NULL_FUNCREF:
+		case REF_NULL_EXTERNREF:
+			builder.add(BYTE, "nulltype");
+			break;
+		}
+		builder.add(BYTE, "end_opcode");
+		return builder.toStructure();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmCodeEntry.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmCodeEntry.java
new file mode 100644
index 000000000000..5803e4214ac0
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmCodeEntry.java
@@ -0,0 +1,87 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.StructConverter;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.program.model.data.DataType;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+import wasm.format.WasmEnums.ValType;
+
+public class WasmCodeEntry implements StructConverter {
+
+	private LEB128 codeSize;
+	private List<WasmLocalEntry> locals = new ArrayList<WasmLocalEntry>();
+	private LEB128 localCount;
+	private long codeOffset;
+	private byte[] instructions;
+
+	public WasmCodeEntry(BinaryReader reader) throws IOException {
+		codeSize = LEB128.readUnsignedValue(reader);
+		codeOffset = reader.getPointerIndex();
+		localCount = LEB128.readUnsignedValue(reader);
+		for (int i = 0; i < localCount.asLong(); ++i) {
+			locals.add(new WasmLocalEntry(reader));
+		}
+		int instructionOffset = (int) reader.getPointerIndex();
+		instructions = reader.readNextByteArray((int) (codeOffset + codeSize.asLong() - instructionOffset));
+	}
+
+	public long getCodeSize() {
+		return codeSize.asLong();
+	}
+
+	public long getOffset() {
+		return codeOffset;
+	}
+
+	public byte[] getInstructions() {
+		return instructions;
+	}
+
+	public ValType[] getLocals() {
+		int localCount = 0;
+		for (WasmLocalEntry local : locals) {
+			localCount += local.getCount();
+		}
+		ValType[] result = new ValType[localCount];
+		int pos = 0;
+		for (WasmLocalEntry local : locals) {
+			Arrays.fill(result, pos, pos + local.getCount(), ValType.fromByte(local.getType()));
+			pos += local.getCount();
+		}
+		return result;
+	}
+
+	@Override
+	public DataType toDataType() throws DuplicateNameException, IOException {
+		StructureBuilder builder = new StructureBuilder("code_" + codeOffset);
+		builder.add(codeSize, "code_size");
+		builder.add(localCount, "local_count");
+		for (int i = 0; i < localCount.asLong(); i++) {
+			builder.add(locals.get(i).toDataType(), "local_" + i);
+		}
+		builder.addArray(BYTE, instructions.length, "instructions");
+		return builder.toStructure();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmDataSegment.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmDataSegment.java
new file mode 100644
index 000000000000..4e95a645320c
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmDataSegment.java
@@ -0,0 +1,103 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.StructConverter;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.program.model.data.DataType;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+
+public class WasmDataSegment implements StructConverter {
+
+	private LEB128 index;
+	private ConstantExpression offsetExpr;
+	private long fileOffset;
+	private LEB128 size;
+	private byte[] data;
+
+	public WasmDataSegment(BinaryReader reader) throws IOException {
+		int mode = reader.readNextUnsignedByte();
+		if (mode == 2) {
+			index = LEB128.readUnsignedValue(reader);
+		} else {
+			/* for mode < 2, index defaults to 0 */
+			index = null;
+		}
+
+		if (mode == 0 || mode == 2) {
+			/* "active" segment with predefined offset */
+			offsetExpr = new ConstantExpression(reader);
+		} else {
+			/* "passive" segment loaded dynamically at runtime */
+			offsetExpr = null;
+		}
+
+		size = LEB128.readUnsignedValue(reader);
+		fileOffset = reader.getPointerIndex();
+		data = reader.readNextByteArray((int) size.asLong());
+	}
+
+	public long getIndex() {
+		if (index == null)
+			return 0;
+		return index.asLong();
+	}
+
+	public long getFileOffset() {
+		return fileOffset;
+	}
+
+	public Long getMemoryOffset() {
+		if (offsetExpr != null) {
+			return offsetExpr.asI32();
+		}
+		return null;
+	}
+
+	public long getSize() {
+		return size.asLong();
+	}
+
+	public byte[] getData() {
+		return data;
+	}
+
+	@Override
+	public DataType toDataType() throws DuplicateNameException, IOException {
+		String structName = "data_segment_" + getIndex();
+		if (getMemoryOffset() != null) {
+			structName += "_" + getMemoryOffset();
+		}
+		StructureBuilder builder = new StructureBuilder(structName);
+
+		builder.add(BYTE, "mode");
+		if (index != null) {
+			builder.add(index, "index");
+		}
+		if (offsetExpr != null) {
+			builder.add(offsetExpr, "offset");
+		}
+		builder.add(size, "size");
+		if (data.length != 0) {
+			builder.addArray(BYTE, data.length, "data");
+		}
+		return builder.toStructure();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmElementSegment.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmElementSegment.java
new file mode 100644
index 000000000000..155c91e5dd58
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmElementSegment.java
@@ -0,0 +1,214 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.StructConverter;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.program.model.address.Address;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.listing.Program;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.WasmLoader;
+import wasm.format.StructureBuilder;
+import wasm.format.WasmEnums.ValType;
+import wasm.format.WasmModule;
+
+public class WasmElementSegment implements StructConverter {
+
+	private int flags;
+	private ElementSegmentMode mode;
+
+	private LEB128 tableidx; /* if (flags & 3) == 2 */
+	private ConstantExpression offset; /* if (flags & 1) == 0 */
+	private LEB128 count;
+
+	int elemkind; /* if (flags & 4) == 0 */
+	private List<LEB128> funcidxs; /* if (flags & 4) == 0 */
+
+	ValType elemtype; /* if (flags & 4) != 0 */
+	private List<ConstantExpression> exprs; /* if (flags & 4) != 0 */
+
+	public enum ElementSegmentMode {
+		active,
+		passive,
+		declarative,
+	}
+
+	public WasmElementSegment(BinaryReader reader) throws IOException {
+		flags = reader.readNextUnsignedByte();
+		if ((flags & 3) == 2) {
+			/* active segment with explicit table index */
+			tableidx = LEB128.readUnsignedValue(reader);
+		} else {
+			/* tableidx defaults to 0 */
+			tableidx = null;
+		}
+
+		if ((flags & 1) == 0) {
+			/* active segment */
+			mode = ElementSegmentMode.active;
+			offset = new ConstantExpression(reader);
+		} else if ((flags & 2) == 0) {
+			mode = ElementSegmentMode.passive;
+		} else {
+			mode = ElementSegmentMode.declarative;
+		}
+
+		if ((flags & 3) == 0) {
+			/* implicit element type */
+			elemkind = 0;
+			elemtype = ValType.funcref;
+		} else {
+			/* explicit element type */
+			int typeCode = reader.readNextUnsignedByte();
+			if ((flags & 4) == 0) {
+				/* elemkind */
+				elemkind = typeCode;
+			} else {
+				/* reftype */
+				elemtype = ValType.fromByte(typeCode);
+			}
+		}
+
+		count = LEB128.readUnsignedValue(reader);
+		if ((flags & 4) == 0) {
+			/* vector of funcidx */
+			funcidxs = new ArrayList<>();
+			for (int i = 0; i < count.asLong(); i++) {
+				funcidxs.add(LEB128.readUnsignedValue(reader));
+			}
+		} else {
+			/* vector of expr */
+			exprs = new ArrayList<>();
+			for (int i = 0; i < count.asLong(); i++) {
+				exprs.add(new ConstantExpression(reader));
+			}
+		}
+	}
+
+	public ElementSegmentMode getMode() {
+		return mode;
+	}
+
+	public long getTableIndex() {
+		if (tableidx == null) {
+			return 0;
+		}
+		return tableidx.asLong();
+	}
+
+	public Long getOffset() {
+		if (offset == null) {
+			return null;
+		}
+		return offset.asI32();
+	}
+
+	public ValType getElementType() {
+		if ((flags & 4) == 0) {
+			if (elemkind == 0) {
+				return ValType.funcref;
+			}
+			return null;
+		} else {
+			return elemtype;
+		}
+	}
+
+	public Address[] getAddresses(Program program, WasmModule module) {
+		int count = (int) this.count.asLong();
+		Address[] result = new Address[count];
+
+		if (funcidxs != null) {
+			for (int i = 0; i < count; i++) {
+				long funcidx = funcidxs.get(i).asLong();
+				result[i] = WasmLoader.getFunctionAddress(program, module, (int) funcidx);
+			}
+			return result;
+		}
+
+		if (exprs != null) {
+			for (int i = 0; i < count; i++) {
+				result[i] = exprs.get(i).asAddress(program, module);
+			}
+			return result;
+		}
+		return null;
+	}
+
+	public byte[] getInitData(WasmModule module) {
+		int elemSize = getElementType().getSize();
+		int count = (int) this.count.asLong();
+		byte[] result = new byte[count * elemSize];
+		Arrays.fill(result, (byte) 0xff);
+
+		if (funcidxs != null) {
+			for (int i = 0; i < count; i++) {
+				long funcidx = funcidxs.get(i).asLong();
+				long funcaddr = WasmLoader.getFunctionAddressOffset(module, (int) funcidx);
+				byte[] v = ConstantExpression.longToBytes(funcaddr);
+				System.arraycopy(v, 0, result, i * elemSize, elemSize);
+			}
+			return result;
+		}
+
+		if (exprs != null) {
+			for (int i = 0; i < count; i++) {
+				byte[] v = exprs.get(i).asBytes(module);
+				if (v != null)
+					System.arraycopy(v, 0, result, i * elemSize, elemSize);
+			}
+			return result;
+		}
+		return null;
+	}
+
+	@Override
+	public DataType toDataType() throws DuplicateNameException, IOException {
+		StructureBuilder builder = new StructureBuilder("element_segment");
+		builder.add(BYTE, "flags");
+		if (tableidx != null) {
+			builder.add(tableidx, "tableidx");
+		}
+		if (offset != null) {
+			builder.add(offset, "offset");
+		}
+		if ((flags & 3) != 0) {
+			/* both elemkind and reftype are single bytes */
+			builder.add(BYTE, "element_type");
+		}
+
+		builder.add(count, "count");
+		if (funcidxs != null) {
+			for (int i = 0; i < funcidxs.size(); i++) {
+				builder.add(funcidxs.get(i), "element" + i);
+			}
+		}
+		if (exprs != null) {
+			for (int i = 0; i < exprs.size(); i++) {
+				builder.add(exprs.get(i), "element" + i);
+			}
+		}
+
+		return builder.toStructure();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmExportEntry.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmExportEntry.java
new file mode 100644
index 000000000000..0f48f3df31a7
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmExportEntry.java
@@ -0,0 +1,60 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.StructConverter;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.program.model.data.DataType;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+import wasm.format.WasmEnums.WasmExternalKind;
+
+public class WasmExportEntry implements StructConverter {
+
+	private WasmName name;
+	private WasmExternalKind kind;
+	private LEB128 index;
+
+	public WasmExportEntry(BinaryReader reader) throws IOException {
+		name = new WasmName(reader);
+		kind = WasmExternalKind.values()[reader.readNextByte()];
+		index = LEB128.readUnsignedValue(reader);
+	}
+
+	public String getName() {
+		return name.getValue();
+	}
+
+	public int getIndex() {
+		return (int) index.asLong();
+	}
+
+	public WasmExternalKind getKind() {
+		return kind;
+	}
+
+	@Override
+	public DataType toDataType() throws DuplicateNameException, IOException {
+		StructureBuilder builder = new StructureBuilder("export_" + getIndex());
+		builder.add(name, "name");
+		builder.add(BYTE, "kind");
+		builder.add(index, "index");
+		return builder.toStructure();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmFuncType.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmFuncType.java
new file mode 100644
index 000000000000..8fe1915472f7
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmFuncType.java
@@ -0,0 +1,81 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.StructConverter;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.program.model.data.DataType;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+import wasm.format.WasmEnums.ValType;
+
+public class WasmFuncType implements StructConverter {
+
+	@SuppressWarnings("unused")
+	private int form; /* always 0 in this version */
+	private LEB128 paramCount;
+	private ValType[] paramTypes;
+	private LEB128 returnCount;
+	private ValType[] returnTypes;
+
+	public WasmFuncType(BinaryReader reader) throws IOException {
+		form = reader.readNextUnsignedByte();
+		paramCount = LEB128.readUnsignedValue(reader);
+		paramTypes = ValType.fromBytes(reader.readNextByteArray((int) paramCount.asLong()));
+		returnCount = LEB128.readUnsignedValue(reader);
+		returnTypes = ValType.fromBytes(reader.readNextByteArray((int) returnCount.asLong()));
+	}
+
+	public ValType[] getParamTypes() {
+		return paramTypes;
+	}
+
+	public ValType[] getReturnTypes() {
+		return returnTypes;
+	}
+
+	private static String typeTupleToString(ValType[] types) {
+		StringBuilder result = new StringBuilder();
+		result.append("(");
+		for (int i = 0; i < types.length; i++) {
+			if (i != 0) {
+				result.append(",");
+			}
+			result.append(types[i]);
+		}
+		result.append(")");
+		return result.toString();
+	}
+
+	@Override
+	public String toString() {
+		return typeTupleToString(paramTypes) + "->" + typeTupleToString(returnTypes);
+	}
+
+	@Override
+	public DataType toDataType() throws DuplicateNameException, IOException {
+		StructureBuilder builder = new StructureBuilder("func_type_" + paramCount.asLong() + "_" + returnCount.asLong());
+		builder.add(BYTE, "form");
+		builder.add(paramCount, "param_count");
+		builder.addArray(BYTE, (int) paramCount.asLong(), "param_types");
+		builder.add(returnCount, "return_count");
+		builder.addArray(BYTE, (int) returnCount.asLong(), "return_types");
+		return builder.toStructure();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmGlobalEntry.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmGlobalEntry.java
new file mode 100644
index 000000000000..4f5ed46bf353
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmGlobalEntry.java
@@ -0,0 +1,62 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.StructConverter;
+import ghidra.program.model.address.Address;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.listing.Program;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+import wasm.format.WasmModule;
+
+public class WasmGlobalEntry implements StructConverter {
+
+	private WasmGlobalType type;
+	private ConstantExpression expr;
+
+	public WasmGlobalEntry(BinaryReader reader) throws IOException {
+		type = new WasmGlobalType(reader);
+		expr = new ConstantExpression(reader);
+	}
+
+	public WasmGlobalType getGlobalType() {
+		return type;
+	}
+
+	public byte[] asBytes(WasmModule module) {
+		return expr.asBytes(module);
+	}
+
+	public Address asAddress(Program program, WasmModule module) {
+		return expr.asAddress(program, module);
+	}
+
+	public Long asGlobalGet() {
+		return expr.asGlobalGet();
+	}
+
+	@Override
+	public DataType toDataType() throws DuplicateNameException, IOException {
+		StructureBuilder builder = new StructureBuilder("global_entry");
+		builder.add(type, "type");
+		builder.add(expr, "expr");
+		return builder.toStructure();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmGlobalType.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmGlobalType.java
new file mode 100644
index 000000000000..21235766e831
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmGlobalType.java
@@ -0,0 +1,52 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.StructConverter;
+import ghidra.program.model.data.DataType;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+import wasm.format.WasmEnums.ValType;
+
+public class WasmGlobalType implements StructConverter {
+
+	private ValType type;
+	private int mutability;
+
+	public WasmGlobalType(BinaryReader reader) throws IOException {
+		type = ValType.fromByte(reader.readNextUnsignedByte());
+		mutability = reader.readNextUnsignedByte();
+	}
+
+	public ValType getType() {
+		return type;
+	}
+
+	public int getMutability() {
+		return mutability;
+	}
+
+	@Override
+	public DataType toDataType() throws DuplicateNameException, IOException {
+		StructureBuilder builder = new StructureBuilder("global_type");
+		builder.add(BYTE, "type");
+		builder.add(BYTE, "mutability");
+		return builder.toStructure();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmImportEntry.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmImportEntry.java
new file mode 100644
index 000000000000..90b0b2173729
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmImportEntry.java
@@ -0,0 +1,137 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.StructConverter;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.program.model.data.DataType;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+import wasm.format.WasmEnums.WasmExternalKind;
+
+public class WasmImportEntry implements StructConverter {
+
+	private WasmName module;
+	private WasmName field;
+	private WasmExternalKind kind;
+
+	private LEB128 functionEntry;
+	private WasmTableType tableEntry;
+	private WasmResizableLimits memoryEntry;
+	private WasmGlobalType globalEntry;
+
+	private long startOffset, endOffset;
+
+	public WasmImportEntry(BinaryReader reader) throws IOException {
+		startOffset = reader.getPointerIndex();
+		module = new WasmName(reader);
+		field = new WasmName(reader);
+		kind = WasmExternalKind.values()[reader.readNextByte()];
+		switch (kind) {
+		case EXT_FUNCTION:
+			functionEntry = LEB128.readUnsignedValue(reader);
+			break;
+		case EXT_TABLE:
+			tableEntry = new WasmTableType(reader);
+			break;
+		case EXT_MEMORY:
+			memoryEntry = new WasmResizableLimits(reader);
+			break;
+		case EXT_GLOBAL:
+			globalEntry = new WasmGlobalType(reader);
+			break;
+		default:
+			break;
+		}
+		endOffset = reader.getPointerIndex();
+	}
+
+	public WasmExternalKind getKind() {
+		return kind;
+	}
+
+	public int getFunctionType() {
+		if (kind != WasmExternalKind.EXT_FUNCTION) {
+			throw new IllegalArgumentException("Cannot get function type of non-function import");
+		}
+		return (int) functionEntry.asLong();
+	}
+
+	public WasmTableType getTableType() {
+		if (kind != WasmExternalKind.EXT_TABLE) {
+			throw new IllegalArgumentException("Cannot get table type of non-table import");
+		}
+		return tableEntry;
+	}
+
+	public WasmResizableLimits getMemoryType() {
+		if (kind != WasmExternalKind.EXT_MEMORY) {
+			throw new IllegalArgumentException("Cannot get memory type of non-memory import");
+		}
+		return memoryEntry;
+	}
+
+	public WasmGlobalType getGlobalType() {
+		if (kind != WasmExternalKind.EXT_GLOBAL) {
+			throw new IllegalArgumentException("Cannot get global type of non-global import");
+		}
+		return globalEntry;
+	}
+
+	public String getModule() {
+		return module.getValue();
+	}
+
+	public String getName() {
+		return field.getValue();
+	}
+
+	public long getEntryOffset() {
+		return startOffset;
+	}
+
+	public long getEntrySize() {
+		return endOffset - startOffset;
+	}
+
+	@Override
+	public DataType toDataType() throws DuplicateNameException, IOException {
+		StructureBuilder builder = new StructureBuilder("import_" + getName());
+		builder.add(module, "module");
+		builder.add(field, "field");
+		builder.add(BYTE, "kind");
+		switch (kind) {
+		case EXT_FUNCTION:
+			builder.add(functionEntry, "type");
+			break;
+		case EXT_TABLE:
+			builder.add(tableEntry, "type");
+			break;
+		case EXT_MEMORY:
+			builder.add(memoryEntry, "type");
+			break;
+		case EXT_GLOBAL:
+			builder.add(globalEntry, "type");
+			break;
+		default:
+			break;
+		}
+		return builder.toStructure();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmLocalEntry.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmLocalEntry.java
new file mode 100644
index 000000000000..3ca7340faf54
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmLocalEntry.java
@@ -0,0 +1,52 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.StructConverter;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.program.model.data.DataType;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+
+public class WasmLocalEntry implements StructConverter {
+
+	private LEB128 count;
+	private int type;
+
+	public WasmLocalEntry(BinaryReader reader) throws IOException {
+		count = LEB128.readUnsignedValue(reader);
+		type = reader.readNextUnsignedByte();
+	}
+
+	public int getCount() {
+		return (int) count.asLong();
+	}
+
+	public int getType() {
+		return type;
+	}
+
+	@Override
+	public DataType toDataType() throws DuplicateNameException, IOException {
+		StructureBuilder builder = new StructureBuilder("locals_" + count.asLong() + "_" + type);
+		builder.add(count, "count");
+		builder.add(BYTE, "type");
+		return builder.toStructure();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmName.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmName.java
new file mode 100644
index 000000000000..dcd0163cbab4
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmName.java
@@ -0,0 +1,53 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.StructConverter;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.program.model.data.DataType;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+
+public class WasmName implements StructConverter {
+	private LEB128 size;
+	private String value;
+
+	public WasmName(BinaryReader reader) throws IOException {
+		size = LEB128.readUnsignedValue(reader);
+		byte[] data = reader.readNextByteArray((int) size.asLong());
+		value = new String(data, StandardCharsets.UTF_8);
+	}
+
+	public long getSize() {
+		return size.getLength() + size.asLong();
+	}
+
+	public String getValue() {
+		return value;
+	}
+
+	@Override
+	public DataType toDataType() throws DuplicateNameException, IOException {
+		StructureBuilder builder = new StructureBuilder("name_" + size.asLong());
+		builder.add(size, "size");
+		builder.addString((int) size.asLong(), "value");
+		return builder.toStructure();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameIndirectMap.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameIndirectMap.java
new file mode 100644
index 000000000000..8a5bb9cd646b
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameIndirectMap.java
@@ -0,0 +1,71 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.StructConverter;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.program.model.data.DataType;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+
+public class WasmNameIndirectMap implements StructConverter {
+	private LEB128 count;
+	private List<WasmIndirectAssoc> entries = new ArrayList<>();
+	private Map<Long, WasmNameMap> map = new HashMap<>();
+
+	private static class WasmIndirectAssoc {
+		LEB128 idx;
+		WasmNameMap nameMap;
+	}
+
+	public WasmNameIndirectMap(BinaryReader reader) throws IOException {
+		count = LEB128.readUnsignedValue(reader);
+		for (int i = 0; i < count.asLong(); i++) {
+			WasmIndirectAssoc assoc = new WasmIndirectAssoc();
+			assoc.idx = LEB128.readUnsignedValue(reader);
+			assoc.nameMap = new WasmNameMap("namemap_func_" + i + "_locals", reader);
+			entries.add(assoc);
+			map.put(assoc.idx.asLong(), assoc.nameMap);
+		}
+	}
+
+	public String getEntry(long idx1, long idx2) {
+		WasmNameMap subMap = map.get(idx1);
+		if (subMap == null)
+			return null;
+
+		return subMap.getEntry(idx2);
+	}
+
+	@Override
+	public DataType toDataType() throws DuplicateNameException, IOException {
+		StructureBuilder builder = new StructureBuilder("indirectnamemap");
+		builder.add(count, "count");
+		for (int i = 0; i < entries.size(); i++) {
+			WasmIndirectAssoc assoc = entries.get(i);
+			builder.add(assoc.idx, "idx" + i);
+			builder.add(assoc.nameMap, "namemap" + i);
+		}
+		return builder.toStructure();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameLocalSubsection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameLocalSubsection.java
new file mode 100644
index 000000000000..5baeeb5e42a8
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameLocalSubsection.java
@@ -0,0 +1,46 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+
+public class WasmNameLocalSubsection extends WasmNameSubsection {
+
+	private WasmNameIndirectMap localNameMap;
+
+	public WasmNameLocalSubsection(BinaryReader reader) throws IOException {
+		super(reader);
+		localNameMap = new WasmNameIndirectMap(reader);
+	}
+
+	public String getLocalName(int funcidx, int localidx) {
+		return localNameMap.getEntry(funcidx, localidx);
+	}
+
+	@Override
+	public void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
+		builder.add(localNameMap, "local_names");
+	}
+
+	@Override
+	public String getName() {
+		return ".name.local";
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameMap.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameMap.java
new file mode 100644
index 000000000000..422a57a43e70
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameMap.java
@@ -0,0 +1,73 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.StructConverter;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.program.model.data.DataType;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+
+public class WasmNameMap implements StructConverter {
+	// this is used to avoid structure name conflict
+	private String structureName;
+	private LEB128 count;
+	private List<WasmAssoc> entries = new ArrayList<>();
+	private Map<Long, WasmName> map = new HashMap<>();
+
+	private static class WasmAssoc {
+		LEB128 idx;
+		WasmName name;
+	}
+
+	public WasmNameMap(String structureName, BinaryReader reader) throws IOException {
+		this.structureName = structureName;
+		count = LEB128.readUnsignedValue(reader);
+		for (int i = 0; i < count.asLong(); i++) {
+			WasmAssoc assoc = new WasmAssoc();
+			assoc.idx = LEB128.readUnsignedValue(reader);
+			assoc.name = new WasmName(reader);
+			entries.add(assoc);
+			map.put(assoc.idx.asLong(), assoc.name);
+		}
+	}
+
+	public String getEntry(long idx) {
+		WasmName result = map.get(idx);
+		if (result == null)
+			return null;
+		return result.getValue();
+	}
+
+	@Override
+	public DataType toDataType() throws DuplicateNameException, IOException {
+		StructureBuilder builder = new StructureBuilder(structureName);
+		builder.add(count, "count");
+		for (int i = 0; i < entries.size(); i++) {
+			WasmAssoc assoc = entries.get(i);
+			builder.add(assoc.idx, "idx" + i);
+			builder.add(assoc.name, "name" + i);
+		}
+		return builder.toStructure();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameMapSubsection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameMapSubsection.java
new file mode 100644
index 000000000000..36f3a5ad0fb7
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameMapSubsection.java
@@ -0,0 +1,50 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+
+/**
+ * Common class for functions/globals/data names subsection
+ */
+public class WasmNameMapSubsection extends WasmNameSubsection {
+	private String entityName;
+	private WasmNameMap nameMap;
+
+	public WasmNameMapSubsection(String entityName, BinaryReader reader) throws IOException {
+		super(reader);
+		this.entityName = entityName;
+		nameMap = new WasmNameMap(entityName + "_namemap", reader);
+	}
+
+	public String getName(long idx) {
+		return nameMap.getEntry(idx);
+	}
+
+	@Override
+	public void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
+		builder.add(nameMap, entityName + "_names");
+	}
+
+	@Override
+	public String getName() {
+		return ".name." + entityName;
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameModuleSubsection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameModuleSubsection.java
new file mode 100644
index 000000000000..87973efdb9ae
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameModuleSubsection.java
@@ -0,0 +1,46 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+
+public class WasmNameModuleSubsection extends WasmNameSubsection {
+
+	private WasmName moduleName;
+
+	public WasmNameModuleSubsection(BinaryReader reader) throws IOException {
+		super(reader);
+		moduleName = new WasmName(reader);
+	}
+
+	public String getModuleName() {
+		return moduleName.getValue();
+	}
+
+	@Override
+	public void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
+		builder.add(moduleName, "module_name");
+	}
+
+	@Override
+	public String getName() {
+		return ".name.module";
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameSubsection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameSubsection.java
new file mode 100644
index 000000000000..fee86753f3c0
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameSubsection.java
@@ -0,0 +1,123 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.StructConverter;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.program.model.data.DataType;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+
+public abstract class WasmNameSubsection implements StructConverter {
+
+	protected int id;
+	private LEB128 contentLength;
+	private long sectionOffset;
+
+	// see https://github.com/WebAssembly/extended-name-section/blob/main/proposals/extended-name-section/Overview.md
+	public enum WasmNameSubsectionId {
+		NAME_MODULE,
+		NAME_FUNCTION,
+		NAME_LOCAL,
+		NAME_LABELS,
+		NAME_TYPE,
+		NAME_TABLE,
+		NAME_MEMORY,
+		NAME_GLOBAL,
+		NAME_ELEM,
+		NAME_DATA
+	}
+
+	public static WasmNameSubsection createSubsection(BinaryReader reader) throws IOException {
+		long sectionOffset = reader.getPointerIndex();
+		int id = reader.readNextUnsignedByte();
+		LEB128 contentLength = LEB128.readUnsignedValue(reader);
+		reader.setPointerIndex(reader.getPointerIndex() + contentLength.asLong());
+
+		BinaryReader sectionReader = reader.clone(sectionOffset);
+
+		if (id >= WasmNameSubsectionId.values().length) {
+			return new WasmNameUnknownSubsection(sectionReader);
+		}
+
+		switch (WasmNameSubsectionId.values()[id]) {
+		case NAME_MODULE:
+			return new WasmNameModuleSubsection(sectionReader);
+		case NAME_FUNCTION:
+			return new WasmNameMapSubsection("function", sectionReader);
+		case NAME_LOCAL:
+			return new WasmNameLocalSubsection(sectionReader);
+		case NAME_LABELS:
+			// TODO: not supported at the moment
+			return new WasmNameUnknownSubsection(sectionReader);
+		case NAME_TYPE:
+			return new WasmNameMapSubsection("type", sectionReader);
+		case NAME_TABLE:
+			return new WasmNameMapSubsection("table", sectionReader);
+		case NAME_MEMORY:
+			return new WasmNameMapSubsection("memory", sectionReader);
+		case NAME_GLOBAL:
+			return new WasmNameMapSubsection("global", sectionReader);
+		case NAME_ELEM:
+			return new WasmNameMapSubsection("elem", sectionReader);
+		case NAME_DATA:
+			return new WasmNameMapSubsection("data", sectionReader);
+		default:
+			return new WasmNameUnknownSubsection(sectionReader);
+		}
+	}
+
+	protected WasmNameSubsection(BinaryReader reader) throws IOException {
+		sectionOffset = reader.getPointerIndex();
+		id = reader.readNextUnsignedByte();
+		contentLength = LEB128.readUnsignedValue(reader);
+	}
+
+	@Override
+	public DataType toDataType() throws DuplicateNameException, IOException {
+		StructureBuilder builder = new StructureBuilder(getName());
+		builder.add(BYTE, "id");
+		builder.add(contentLength, "size");
+		addToStructure(builder);
+		return builder.toStructure();
+	}
+
+	public abstract String getName();
+
+	protected abstract void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException;
+
+	public WasmNameSubsectionId getId() {
+		if (id < WasmNameSubsectionId.values().length) {
+			return WasmNameSubsectionId.values()[id];
+		}
+		return null;
+	}
+
+	public long getSectionOffset() {
+		return sectionOffset;
+	}
+
+	public long getContentSize() {
+		return contentLength.asLong();
+	}
+
+	public long getSectionSize() {
+		return 1 + contentLength.getLength() + contentLength.asLong();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameUnknownSubsection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameUnknownSubsection.java
new file mode 100644
index 000000000000..1460e8443d28
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameUnknownSubsection.java
@@ -0,0 +1,41 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+
+public class WasmNameUnknownSubsection extends WasmNameSubsection {
+	byte[] contents;
+
+	public WasmNameUnknownSubsection(BinaryReader reader) throws IOException {
+		super(reader);
+		contents = reader.readNextByteArray((int) getContentSize());
+	}
+
+	@Override
+	public void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
+		builder.addArray(BYTE, (int) getContentSize(), "unknown" + id);
+	}
+
+	@Override
+	public String getName() {
+		return ".name.unknown" + id;
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmResizableLimits.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmResizableLimits.java
new file mode 100644
index 000000000000..e694f24c6002
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmResizableLimits.java
@@ -0,0 +1,62 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.StructConverter;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.program.model.data.DataType;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+
+public class WasmResizableLimits implements StructConverter {
+
+	private int flags;
+	private LEB128 initial;
+	private LEB128 maximum;
+
+	public WasmResizableLimits(BinaryReader reader) throws IOException {
+		flags = reader.readNextUnsignedByte();
+		initial = LEB128.readUnsignedValue(reader);
+		if (flags == 1) {
+			maximum = LEB128.readUnsignedValue(reader);
+		}
+	}
+
+	public long getInitial() {
+		return initial.asLong();
+	}
+
+	public long getMaximum() {
+		if (maximum != null) {
+			return maximum.asLong();
+		}
+		return -1;
+	}
+
+	@Override
+	public DataType toDataType() throws DuplicateNameException, IOException {
+		StructureBuilder builder = new StructureBuilder("limits");
+		builder.add(BYTE, "flags");
+		builder.add(initial, "initial");
+		if (maximum != null) {
+			builder.add(maximum, "maximum");
+		}
+		return builder.toStructure();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmTableType.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmTableType.java
new file mode 100644
index 000000000000..befb15080c23
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmTableType.java
@@ -0,0 +1,56 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.format.sections.structures;
+
+import java.io.IOException;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.StructConverter;
+import ghidra.program.model.data.DataType;
+import ghidra.util.exception.DuplicateNameException;
+import wasm.format.StructureBuilder;
+import wasm.format.WasmEnums.ValType;
+
+public class WasmTableType implements StructConverter {
+
+	private ValType elemType;
+	private WasmResizableLimits limits;
+
+	public WasmTableType(BinaryReader reader) throws IOException {
+		elemType = ValType.fromByte(reader.readNextUnsignedByte());
+		limits = new WasmResizableLimits(reader);
+	}
+
+	public ValType getElementType() {
+		return elemType;
+	}
+
+	public DataType getElementDataType() {
+		return elemType.asDataType();
+	}
+
+	public WasmResizableLimits getLimits() {
+		return limits;
+	}
+
+	@Override
+	public DataType toDataType() throws DuplicateNameException, IOException {
+		StructureBuilder builder = new StructureBuilder("table_type");
+		builder.add(BYTE, "element_type");
+		builder.add(limits, "limits");
+		return builder.toStructure();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmEntry.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmEntry.java
new file mode 100644
index 000000000000..411513f9b31e
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmEntry.java
@@ -0,0 +1,61 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.pcode;
+
+import ghidra.program.model.address.Address;
+import ghidra.program.model.lang.InjectContext;
+import ghidra.program.model.lang.InjectPayloadSleigh;
+import ghidra.program.model.listing.Program;
+import ghidra.program.model.pcode.PcodeOp;
+import wasm.analysis.WasmAnalysis;
+import wasm.analysis.WasmFunctionAnalysis;
+import wasm.format.WasmEnums.ValType;
+
+/**
+ * The "uponentry" injection for a Wasm function. We inject code to copy from
+ * the artificial "inputs" registers into the real "locals" registers.
+ */
+public class InjectPayloadWasmEntry extends InjectPayloadSleigh {
+
+	public InjectPayloadWasmEntry(String nm, int tp, String sourceName) {
+		super(nm, tp, sourceName);
+	}
+
+	@Override
+	public PcodeOp[] getPcode(Program program, InjectContext con) {
+		PcodeOpEmitter ops = new PcodeOpEmitter(program, con.baseAddr);
+
+		WasmAnalysis state = WasmAnalysis.getState(program);
+		WasmFunctionAnalysis funcAnalysis = state.getFunctionAnalysis(
+				program.getFunctionManager().getFunctionContaining(con.baseAddr));
+		if (funcAnalysis == null) {
+			return ops.getPcodeOps();
+		}
+
+		Address inputBase = program.getRegister("i0").getAddress();
+		Address localsBase = program.getRegister("l0").getAddress();
+		ValType[] params = funcAnalysis.getSignature().getParams();
+		ValType[] locals = funcAnalysis.getSignature().getLocals();
+		for (int i = 0; i < params.length; i++) {
+			ops.emitCopy(inputBase.add(i * 8L), localsBase.add(i * 8L), params[i].getSize());
+		}
+		Address zero = program.getAddressFactory().getConstantAddress(0L);
+		for (int i = params.length; i < locals.length; i++) {
+			ops.emitCopy(zero, localsBase.add(i * 8L), locals[i].getSize());
+		}
+		return ops.getPcodeOps();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPop.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPop.java
new file mode 100644
index 000000000000..f36dc9ea0b92
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPop.java
@@ -0,0 +1,68 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.pcode;
+
+import ghidra.program.model.address.Address;
+import ghidra.program.model.lang.InjectContext;
+import ghidra.program.model.lang.InjectPayloadCallother;
+import ghidra.program.model.listing.Program;
+import ghidra.program.model.pcode.PcodeOp;
+import wasm.analysis.WasmAnalysis;
+import wasm.analysis.WasmFunctionAnalysis;
+import wasm.analysis.WasmFunctionAnalysis.StackEffect;
+import wasm.format.WasmEnums.ValType;
+
+/**
+ * Handle variable-length pops from the stack to registers.
+ * We use this to handle branches (popping block arguments to temporary registers),
+ * function calls (popping function arguments to input registers),
+ * and function return (popping return values to output registers).
+ */
+public class InjectPayloadWasmPop extends InjectPayloadCallother {
+
+	public InjectPayloadWasmPop(String sourceName) {
+		super(sourceName);
+	}
+
+	@Override
+	public PcodeOp[] getPcode(Program program, InjectContext con) {
+		PcodeOpEmitter ops = new PcodeOpEmitter(program, con.baseAddr);
+
+		long regoffset = con.inputlist.get(0).getOffset();
+		Address baseAddress = program.getAddressFactory().getAddressSpace("register").getAddress(regoffset);
+
+		WasmAnalysis state = WasmAnalysis.getState(program);
+		WasmFunctionAnalysis funcAnalysis = state.getFunctionAnalysis(
+				program.getFunctionManager().getFunctionContaining(con.baseAddr));
+		if (funcAnalysis == null) {
+			return ops.getPcodeOps();
+		}
+
+		StackEffect stackEffect = funcAnalysis.getStackEffect(con.baseAddr);
+		if (stackEffect == null) {
+			return ops.getPcodeOps();
+		}
+
+		long stackHeight = stackEffect.getPopHeight();
+		ValType[] todo = stackEffect.getToPop();
+		Address stackAddress = program.getRegister("s0").getAddress().add(stackHeight * 8);
+		for (int i = 0; i < todo.length; i++) {
+			ops.emitCopy(stackAddress.add(i * 8L), baseAddress.add(i * 8L), todo[i].getSize());
+		}
+
+		return ops.getPcodeOps();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPush.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPush.java
new file mode 100644
index 000000000000..f21deadeab21
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPush.java
@@ -0,0 +1,67 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.pcode;
+
+import ghidra.program.model.address.Address;
+import ghidra.program.model.lang.InjectContext;
+import ghidra.program.model.lang.InjectPayloadCallother;
+import ghidra.program.model.listing.Program;
+import ghidra.program.model.pcode.PcodeOp;
+import wasm.analysis.WasmAnalysis;
+import wasm.analysis.WasmFunctionAnalysis;
+import wasm.analysis.WasmFunctionAnalysis.StackEffect;
+import wasm.format.WasmEnums.ValType;
+
+/**
+ * Handle variable-length pushes from the stack to registers. We use this to
+ * handle branches (pushing block arguments from temporary registers) and
+ * function calls (pushing function return values from output registers).
+ */
+public class InjectPayloadWasmPush extends InjectPayloadCallother {
+
+	public InjectPayloadWasmPush(String sourceName) {
+		super(sourceName);
+	}
+
+	@Override
+	public PcodeOp[] getPcode(Program program, InjectContext con) {
+		PcodeOpEmitter ops = new PcodeOpEmitter(program, con.baseAddr);
+
+		long regoffset = con.inputlist.get(0).getOffset();
+		Address baseAddress = program.getAddressFactory().getAddressSpace("register").getAddress(regoffset);
+
+		WasmAnalysis state = WasmAnalysis.getState(program);
+		WasmFunctionAnalysis funcAnalysis = state.getFunctionAnalysis(
+				program.getFunctionManager().getFunctionContaining(con.baseAddr));
+		if (funcAnalysis == null) {
+			return ops.getPcodeOps();
+		}
+
+		StackEffect stackEffect = funcAnalysis.getStackEffect(con.baseAddr);
+		if (stackEffect == null) {
+			return ops.getPcodeOps();
+		}
+
+		long stackHeight = stackEffect.getPushHeight();
+		ValType[] todo = stackEffect.getToPush();
+		Address stackAddress = program.getRegister("s0").getAddress().add(stackHeight * 8);
+		for (int i = 0; i < todo.length; i++) {
+			ops.emitCopy(baseAddress.add(i * 8L), stackAddress.add(i * 8L), todo[i].getSize());
+		}
+
+		return ops.getPcodeOps();
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeInjectLibraryWasm.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeInjectLibraryWasm.java
new file mode 100644
index 000000000000..3be207808c24
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeInjectLibraryWasm.java
@@ -0,0 +1,51 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.pcode;
+
+import ghidra.app.plugin.processors.sleigh.SleighLanguage;
+import ghidra.program.model.lang.InjectPayload;
+import ghidra.program.model.lang.PcodeInjectLibrary;
+
+public class PcodeInjectLibraryWasm extends PcodeInjectLibrary {
+
+	public PcodeInjectLibraryWasm(SleighLanguage l) {
+		super(l);
+	}
+
+	public PcodeInjectLibraryWasm(PcodeInjectLibraryWasm op2) {
+		super(op2);
+	}
+
+	@Override
+	public PcodeInjectLibrary clone() {
+		return new PcodeInjectLibraryWasm(this);
+	}
+
+	@Override
+	public InjectPayload allocateInject(String sourceName, String name, int tp) {
+		if (tp == InjectPayload.CALLMECHANISM_TYPE) {
+			return new InjectPayloadWasmEntry(name, tp, sourceName);
+		} else if (tp == InjectPayload.CALLOTHERFIXUP_TYPE) {
+			switch (name) {
+			case "popCallOther":
+				return new InjectPayloadWasmPop(sourceName);
+			case "pushCallOther":
+				return new InjectPayloadWasmPush(sourceName);
+			}
+		}
+		return super.allocateInject(sourceName, name, tp);
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeOpEmitter.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeOpEmitter.java
new file mode 100644
index 000000000000..18c1ae5c0a38
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeOpEmitter.java
@@ -0,0 +1,70 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.pcode;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import ghidra.program.model.address.Address;
+import ghidra.program.model.lang.Register;
+import ghidra.program.model.listing.Program;
+import ghidra.program.model.pcode.PcodeOp;
+import ghidra.program.model.pcode.Varnode;
+
+public class PcodeOpEmitter {
+	private Program program;
+	private Address baseAddress;
+	private List<PcodeOp> ops = new ArrayList<>();
+
+	public PcodeOpEmitter(Program program, Address baseAddress) {
+		this.program = program;
+		this.baseAddress = baseAddress;
+	}
+
+	public PcodeOp[] getPcodeOps() {
+		if (ops.size() == 0) {
+			// Work around Ghidra issue #3389: decompiler can crash if injection produces an
+			// empty array
+			emitNop();
+		}
+		return ops.toArray(new PcodeOp[0]);
+	}
+
+	private PcodeOp newOp(int opcode) {
+		PcodeOp op = new PcodeOp(baseAddress, ops.size(), opcode);
+		ops.add(op);
+		return op;
+	}
+
+	private Varnode getRegister(String name) {
+		Register register = program.getRegister(name);
+		return new Varnode(register.getAddress(), register.getBitLength() / 8);
+	}
+
+	public void emitNop() {
+		PcodeOp op = newOp(PcodeOp.COPY);
+		Varnode lrVarnode = getRegister("LR");
+		op.setInput(lrVarnode, 0);
+		op.setOutput(lrVarnode);
+	}
+
+	public void emitCopy(Address fromAddr, Address toAddr, int size) {
+		/* toAddr = fromAddr */
+		PcodeOp op = newOp(PcodeOp.COPY);
+		op.setInput(new Varnode(fromAddr, size), 0);
+		op.setOutput(new Varnode(toAddr, size));
+	}
+}
-- 
2.41.0


From e367e48fa7adc8d4d6f1a9d359063d04bd5f847c Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Fri, 25 Mar 2022 17:38:47 -0700
Subject: [PATCH 02/25] WebAssembly: add a help page to explain the finer
 points of the extension.

I was hoping to add this to a Processors help submenu, but it doesn't exist,
so I put it in the Appendix instead for now.
---
 Ghidra/Processors/WebAssembly/build.gradle    |   2 +
 .../WebAssembly/certification.manifest        |   4 +
 .../src/main/help/help/TOC_Source.xml         |   7 ++
 .../src/main/help/help/shared/Frontpage.css   |  58 ++++++++++
 .../help/help/topics/WebAssembly/help.html    | 103 ++++++++++++++++++
 .../main/help/help/topics/WebAssembly/help.md |  92 ++++++++++++++++
 6 files changed, 266 insertions(+)
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/help/help/TOC_Source.xml
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/help/help/shared/Frontpage.css
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.html
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.md

diff --git a/Ghidra/Processors/WebAssembly/build.gradle b/Ghidra/Processors/WebAssembly/build.gradle
index 9603c522224c..166811759dd5 100644
--- a/Ghidra/Processors/WebAssembly/build.gradle
+++ b/Ghidra/Processors/WebAssembly/build.gradle
@@ -18,9 +18,11 @@ apply from: "$rootProject.projectDir/gradle/javaProject.gradle"
 apply from: "$rootProject.projectDir/gradle/processorProject.gradle"
 apply from: "$rootProject.projectDir/gradle/jacocoProject.gradle"
 apply from: "$rootProject.projectDir/gradle/javaTestProject.gradle"
+apply from: "$rootProject.projectDir/gradle/helpProject.gradle"
 apply plugin: 'eclipse'
 eclipse.project.name = 'Processors WebAssembly'
 
 dependencies {
 	api project(':Base')
+	helpPath project(path: ':Base', configuration: 'helpPath')
 }
diff --git a/Ghidra/Processors/WebAssembly/certification.manifest b/Ghidra/Processors/WebAssembly/certification.manifest
index a167e968a89a..d3ba62ffd652 100644
--- a/Ghidra/Processors/WebAssembly/certification.manifest
+++ b/Ghidra/Processors/WebAssembly/certification.manifest
@@ -1,5 +1,9 @@
 ##VERSION: 2.0
 Module.manifest||GHIDRA||||END|
+src/main/help/help/TOC_Source.xml||GHIDRA||||END|
+src/main/help/help/shared/Frontpage.css||GHIDRA||||END|
+src/main/help/help/topics/WebAssembly/help.html||GHIDRA||||END|
+src/main/help/help/topics/WebAssembly/help.md||GHIDRA||||END|
 data/languages/BasicOps.sinc||GHIDRA||||END|
 data/languages/Leb128.sinc||GHIDRA||||END|
 data/languages/Leb128_u32.sinc||GHIDRA||||END|
diff --git a/Ghidra/Processors/WebAssembly/src/main/help/help/TOC_Source.xml b/Ghidra/Processors/WebAssembly/src/main/help/help/TOC_Source.xml
new file mode 100644
index 000000000000..dbad6be64ab5
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/help/help/TOC_Source.xml
@@ -0,0 +1,7 @@
+<?xml version='1.0' encoding='ISO-8859-1' ?>
+
+<tocroot>
+  <tocref id="Appendix">
+    <tocdef id="WebAssembly" text="WebAssembly" target="help/topics/WebAssembly/help.html" />
+  </tocref>
+</tocroot>
diff --git a/Ghidra/Processors/WebAssembly/src/main/help/help/shared/Frontpage.css b/Ghidra/Processors/WebAssembly/src/main/help/help/shared/Frontpage.css
new file mode 100644
index 000000000000..452bf6e6b5b7
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/help/help/shared/Frontpage.css
@@ -0,0 +1,58 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/*
+									WARNING!
+    This file is copied to all help directories.  If you change this file, you must copy it 
+    to each src/main/help/help/shared directory.									
+									
+	
+	Java Help Note:  JavaHelp does not accept sizes (like in 'margin-top') in anything but 
+	px (pixel) or with no type marking. 
+
+*/ 
+
+body { margin-bottom: 50px; margin-left: 10px; margin-right: 10px; margin-top: 10px; } /* some padding to improve readability */ 
+li { font-family:times new roman; font-size:14pt; }
+h1 { color:#000080; font-family:times new roman; font-size:36pt; font-style:italic; font-weight:bold; text-align:center; }
+h2 { margin: 10px; margin-top: 20px; color:#984c4c; font-family:times new roman; font-size:18pt; font-weight:bold; }
+h3 { margin-left: 10px; margin-top: 20px; color:#0000ff; font-family:times new roman; font-size:14pt; font-weight:bold;  }
+h4 { margin-left: 10px; margin-top: 20px; font-family:times new roman; font-size:14pt; font-style:italic; }
+ 
+/*
+	 P tag code.  Most of the help files nest P tags inside of blockquote tags (the was the 
+	 way it had been done in the beginning).  The net effect is that the text is indented.  In 
+	 modern HTML we would use CSS to do this.  We need to support the Ghidra P tags, nested in
+	 blockquote tags, as well as naked P tags.  The following two lines accomplish this.  Note
+	 that the 'blockquote p' definition will inherit from the first 'p' definition.
+*/
+p { margin-left: 40px; font-family:times new roman; font-size:14pt; }
+blockquote p { margin-left: 10px; }
+
+p.providedbyplugin { color:#7f7f7f; margin-left: 10px; font-size:14pt; margin-top:100px  }
+p.ProvidedByPlugin { color:#7f7f7f; margin-left: 10px; font-size:14pt; margin-top:100px }
+p.relatedtopic { color:#800080; margin-left: 10px; font-size:14pt; }
+p.RelatedTopic { color:#800080; margin-left: 10px; font-size:14pt; }
+
+/* 
+	We wish for a tables to have space between it and the preceding element, so that text
+	is not too close to the top of the table.  Also, nest the table a bit so that it is clear
+	the table relates to the preceding text.
+*/
+table { margin-left: 20px; margin-top: 10px; width: 80%;}
+td { font-family:times new roman; font-size:14pt; vertical-align: top; }
+th { font-family:times new roman; font-size:14pt; font-weight:bold; background-color: #EDF3FE; }
+
+code { color: black; font-family: courier new; font-size: 14pt; }
diff --git a/Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.html b/Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.html
new file mode 100644
index 000000000000..83ecc4e3ffc5
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.html
@@ -0,0 +1,103 @@
+<!DOCTYPE html>
+<html>
+  <head>
+    <meta name="generator" content="markdown_py 3.3.6 with fenced_code extension">
+    <meta http-equiv="Content-Language" content="en-us">
+    <meta charset="utf-8" />
+
+    <title>WebAssembly</title>
+    <link rel="stylesheet" type="text/css" href="../../shared/Frontpage.css">
+  </head>
+
+  <body><h1>WebAssembly</h1>
+
+<p>Module to load WebAssembly files into Ghidra, supporting disassembly and decompilation.</p>
+<h2>Features</h2>
+<ul>
+<li>Support for all WebAssembly 1.0 opcodes</li>
+<li>Cross-references for function calls and branches</li>
+<li>Cross-references for table entries and globals containing function pointers</li>
+<li>Recovery of the C stack, when the stack pointer is stored in a global variable (typical for compilers like Emscripten)</li>
+</ul>
+<h2>Tips</h2>
+<ul>
+<li>Many Wasm programs, especially those compiled by Emscripten or Clang, use a
+global variable to store the C stack pointer. This module will attempt to
+automatically detect the C stack pointer during analysis; if it fails, you may
+need to set it yourself before performing initial analysis by setting the "C
+Stack Pointer" in the Wasm Pre-Analyzer settings.</li>
+<li>By default, the C stack is assumed to grow in the negative direction, i.e.
+towards smaller addresses. However, compilers are actually free to choose either
+stack direction, and both positive and negative-growing stacks have been
+observed in real-world samples. If your C stack grows upwards (e.g. indicated by
+an add operation to the C stack pointer in the function prologue rather than a
+subtract), select the <code>pos-stack</code> compiler when importing the file, or via <code>Set
+Language...</code> on an existing file in the project window.</li>
+<li>Emscripten will usually translate function pointer calls into calls to
+exported <code>dyncall_</code> functions, which take a call-type-specific index as the
+first parameter. The index is used to index a sub-section of the main function
+table (table0) to find the function to call. The included script
+<code>analyze_dyncalls.py</code> can analyze the <code>dyncall_</code> functions, extract the indices,
+and rename referenced functions according to their call type and function index
+(which will often serve as function pointer values in memory). This can be used
+to resolve function pointer references, for example.</li>
+<li>Element segments may be passive, or have offset expressions that depend on
+imported globals. In this case, the element segments are not automatically
+loaded to the table. You can manually load these segments by calling
+<code>WasmLoader.loadElementsToTable</code>. For example, to load element segment #0 to
+table #0 at offset 0 in Python:</li>
+</ul>
+<pre><code class="language-python">from wasm import WasmLoader
+from wasm.analysis import WasmAnalysis
+from ghidra.util.task import ConsoleTaskMonitor
+monitor = ConsoleTaskMonitor()
+WasmLoader.loadElementsToTable(currentProgram, WasmAnalysis.getState(currentProgram).module, 0, 0, 0, monitor)
+</code></pre>
+<ul>
+<li>Similarly, data segments can be manually loaded as well. For example, to load
+data segment #5 to memory #0 at offset 0x1000, do the following in Python:</li>
+</ul>
+<pre><code class="language-python">from wasm import WasmLoader
+from wasm.analysis import WasmAnalysis
+from ghidra.util.task import ConsoleTaskMonitor
+monitor = ConsoleTaskMonitor()
+WasmLoader.loadDataToMemory(currentProgram, WasmAnalysis.getState(currentProgram).module, 5, 0, 0x1000, monitor)
+</code></pre>
+<h2>Limitations and Known Bugs</h2>
+<ul>
+<li>Currently, inlining functions (via marking them "In Line") is not supported
+and will confuse the decompiler. This is because the inlined function's
+references to stack and local variables will affect the caller. I tried to solve
+this limitation by injecting code to save and restore stack and locals on
+function entry/exit, but ran into a Ghidra limitation - the decompiler does not
+inject "uponentry" Pcode into inlined functions.</li>
+<li>Currently, there is no way to change the C stack pointer after initial analysis
+(attempting to re-analyze the program with a new C stack pointer will not change
+anything).</li>
+<li>Initial analysis and disassembly can be very slow. This is primarily because
+Ghidra is quite slow at setting large numbers of context registers.</li>
+<li>Multiple return values are untested and will probably not work.</li>
+</ul>
+<h2>Internals</h2>
+<p>This module uses a pre-analyzer (WasmPreAnalyzer) to analyze all functions and
+opcodes, providing contextual information to the SLEIGH disassembler to enable
+correct disassembly (for example, operand sizes when they depend on the types in
+the value stack, branch target addresses, etc). In order to support recovery of
+the C stack, this module converts Wasm stack operations into operations on a
+register file. This frees up the decompiler's stack analysis to focus on the
+behaviour of the C stack, since the decompiler only supports a single stack.
+Additionally, parameter passing and returns are handled by virtual input/output
+registers which are copied to/from the stack and locals registers via Pcode
+injection.</p>
+<p>Four different types of "registers" are defined: input (iN), output (oN), stack
+(sN) and locals (lN). Of these, only the locals will be visible in the
+disassembly; stack registers will appear in the PCode, and input/output
+registers will appear in function types.</p>
+<h2>Acknowledgements</h2>
+<ul>
+<li>This module borrows loader functionality from this repo: https://github.com/andr3colonel/ghidra_wasm</li>
+<li>This module was directly based on https://github.com/garrettgu10/ghidra-wasm-plugin</li>
+</ul>
+
+  </body>
+</html>
\ No newline at end of file
diff --git a/Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.md b/Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.md
new file mode 100644
index 000000000000..84e447a33079
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.md
@@ -0,0 +1,92 @@
+Module to load WebAssembly files into Ghidra, supporting disassembly and decompilation.
+
+## Features
+
+- Support for all WebAssembly 1.0 opcodes
+- Cross-references for function calls and branches
+- Cross-references for table entries and globals containing function pointers
+- Recovery of the C stack, when the stack pointer is stored in a global variable (typical for compilers like Emscripten)
+
+## Tips
+
+- Many Wasm programs, especially those compiled by Emscripten or Clang, use a
+global variable to store the C stack pointer. This module will attempt to
+automatically detect the C stack pointer during analysis; if it fails, you may
+need to set it yourself before performing initial analysis by setting the "C
+Stack Pointer" in the Wasm Pre-Analyzer settings.
+- By default, the C stack is assumed to grow in the negative direction, i.e.
+towards smaller addresses. However, compilers are actually free to choose either
+stack direction, and both positive and negative-growing stacks have been
+observed in real-world samples. If your C stack grows upwards (e.g. indicated by
+an add operation to the C stack pointer in the function prologue rather than a
+subtract), select the `pos-stack` compiler when importing the file, or via `Set
+Language...` on an existing file in the project window.
+- Emscripten will usually translate function pointer calls into calls to
+exported `dyncall_` functions, which take a call-type-specific index as the
+first parameter. The index is used to index a sub-section of the main function
+table (table0) to find the function to call. The included script
+`analyze_dyncalls.py` can analyze the `dyncall_` functions, extract the indices,
+and rename referenced functions according to their call type and function index
+(which will often serve as function pointer values in memory). This can be used
+to resolve function pointer references, for example.
+- Element segments may be passive, or have offset expressions that depend on
+imported globals. In this case, the element segments are not automatically
+loaded to the table. You can manually load these segments by calling
+`WasmLoader.loadElementsToTable`. For example, to load element segment #0 to
+table #0 at offset 0 in Python:
+
+```python
+from wasm import WasmLoader
+from wasm.analysis import WasmAnalysis
+from ghidra.util.task import ConsoleTaskMonitor
+monitor = ConsoleTaskMonitor()
+WasmLoader.loadElementsToTable(currentProgram, WasmAnalysis.getState(currentProgram).module, 0, 0, 0, monitor)
+```
+- Similarly, data segments can be manually loaded as well. For example, to load
+data segment #5 to memory #0 at offset 0x1000, do the following in Python:
+
+```python
+from wasm import WasmLoader
+from wasm.analysis import WasmAnalysis
+from ghidra.util.task import ConsoleTaskMonitor
+monitor = ConsoleTaskMonitor()
+WasmLoader.loadDataToMemory(currentProgram, WasmAnalysis.getState(currentProgram).module, 5, 0, 0x1000, monitor)
+```
+
+## Limitations and Known Bugs
+
+- Currently, inlining functions (via marking them "In Line") is not supported
+and will confuse the decompiler. This is because the inlined function's
+references to stack and local variables will affect the caller. I tried to solve
+this limitation by injecting code to save and restore stack and locals on
+function entry/exit, but ran into a Ghidra limitation - the decompiler does not
+inject "uponentry" Pcode into inlined functions.
+- Currently, there is no way to change the C stack pointer after initial analysis
+(attempting to re-analyze the program with a new C stack pointer will not change
+anything).
+- Initial analysis and disassembly can be very slow. This is primarily because
+Ghidra is quite slow at setting large numbers of context registers.
+- Multiple return values are untested and will probably not work.
+
+## Internals
+
+This module uses a pre-analyzer (WasmPreAnalyzer) to analyze all functions and
+opcodes, providing contextual information to the SLEIGH disassembler to enable
+correct disassembly (for example, operand sizes when they depend on the types in
+the value stack, branch target addresses, etc). In order to support recovery of
+the C stack, this module converts Wasm stack operations into operations on a
+register file. This frees up the decompiler's stack analysis to focus on the
+behaviour of the C stack, since the decompiler only supports a single stack.
+Additionally, parameter passing and returns are handled by virtual input/output
+registers which are copied to/from the stack and locals registers via Pcode
+injection.
+
+Four different types of "registers" are defined: input (iN), output (oN), stack
+(sN) and locals (lN). Of these, only the locals will be visible in the
+disassembly; stack registers will appear in the PCode, and input/output
+registers will appear in function types.
+
+## Acknowledgements
+
+- This module borrows loader functionality from this repo: https://github.com/andr3colonel/ghidra_wasm
+- This module was directly based on https://github.com/garrettgu10/ghidra-wasm-plugin
-- 
2.41.0


From 7c358ed6ee1d1f460f2fea5bcf21de974c536003 Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Sun, 27 Mar 2022 01:53:58 -0700
Subject: [PATCH 03/25] WebAssembly: make funcref/externref 32 bits in size.

The use of 64 bits was mostly a debugging feature to ensure we didn't accidentally
mix references with normal types. 64 bit addresses cause some problems, though,
such as 64-bit immediates (e.g. from ref.func) not always being treated as addresses
in the decompiler.
---
 .../data/languages/WebAssembly.sinc           | 52 +++++++++----------
 .../ghidra_scripts/analyze_dyncalls.py        |  2 +-
 .../src/main/java/wasm/WasmLoader.java        |  4 +-
 .../wasm/analysis/WasmFunctionAnalysis.java   |  2 +-
 .../src/main/java/wasm/format/WasmEnums.java  | 10 ++--
 .../structures/ConstantExpression.java        |  6 +--
 6 files changed, 38 insertions(+), 38 deletions(-)

diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc
index 49cbb57badb8..cd1aeab4cf73 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc
@@ -76,7 +76,7 @@ define pcodeop memory_fill;
 
 @define SYMBOL tableref
 @define DEST_EXPR "(1<<32) * "
-@define EXPORT_EXPR "export *[table]:8 dest;"
+@define EXPORT_EXPR "export *[table]:4 dest;"
 @include "Leb128_u32.sinc"
 
 sp0_32: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + ctx_sp - 0;] {
@@ -247,23 +247,23 @@ macro doBranch(br_target) {
 }
 :call_indirect "type="^typeidx tableref is opc=0x11; typeidx; tableref; sp1_32; ctx_is_directive=0 {
 	nop();
-	addr:8 = &tableref + sext(sp1_32) * 8;
-	val:8 = *[table] addr;
+	addr:8 = &tableref + zext(sp1_32) * 4;
+	val:4 = *[table] addr;
 	popCallOther(&i0);
 	call [val];
 	pushCallOther(&o0);
 }
 
 ## Reference Instructions
-:ref.null reftype is opc=0xd0; reftype; sp0_64; ctx_is_directive=0 {
-	sp0_64 = 0;
+:ref.null reftype is opc=0xd0; reftype; sp0_32; ctx_is_directive=0 {
+	sp0_32 = 0;
 }
-:ref.is_null is opc=0xd1; sp1_32; sp1_64; ctx_is_directive=0 {
-	res:4 = zext(sp1_64 == 0);
+:ref.is_null is opc=0xd1; sp1_32; ctx_is_directive=0 {
+	res:4 = zext(sp1_32 == 0);
 	sp1_32 = res;
 }
-:ref.func br_target is opc=0xd2; funcidx; br_target; sp0_64; ctx_is_directive=0 {
-	sp0_64 = &br_target;
+:ref.func br_target is opc=0xd2; funcidx; br_target; sp0_32; ctx_is_directive=0 {
+	sp0_32 = &br_target;
 }
 
 ## Parametric Instructions
@@ -290,17 +290,17 @@ macro select64(sp1_32, sp2_64, sp3_64) {
 
 # In the current version of Wasm, only one type index is permitted in select t*.
 # This is functionally identical to regular select.
-:select is opc=0x1c; opc2=0x01; valtype; sp1_32; sp2_64; sp3_64; ctx_is_directive=0 {
-	# i64, f64, funcref, externref
-	select64(sp1_32, sp2_64, sp3_64);
-}
-:select 0x7f is opc=0x1c; opc2=0x01; valtype=0x7f; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
-	# i32
+:select valtype is opc=0x1c; opc2=0x01; valtype; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
+	# i32, f32, funcref, externref
 	select32(sp1_32, sp2_32, sp3_32);
 }
-:select 0x7d is opc=0x1c; opc2=0x01; valtype=0x7d; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
-	# f32
-	select32(sp1_32, sp2_32, sp3_32);
+:select 0x7e is opc=0x1c; opc2=0x01; valtype=0x7e; sp1_32; sp2_64; sp3_64; ctx_is_directive=0 {
+	# i64
+	select64(sp1_32, sp2_64, sp3_64);
+}
+:select 0x7c is opc=0x1c; opc2=0x01; valtype=0x7c; sp1_32; sp2_64; sp3_64; ctx_is_directive=0 {
+	# f64
+	select64(sp1_32, sp2_64, sp3_64);
 }
 
 ## Variable Instructions
@@ -346,14 +346,14 @@ macro select64(sp1_32, sp2_64, sp3_64) {
 }
 
 ## Table Instructions
-:table.get tableref is opc=0x25; tableref; sp1_32; sp1_64; ctx_is_directive=0 {
-	addr:8 = &tableref + sext(sp1_32) * 8;
-	sp1_64 = *[table] addr;
+:table.get tableref is opc=0x25; tableref; sp1_32; ctx_is_directive=0 {
+	addr:8 = &tableref + zext(sp1_32) * 4;
+	sp1_32 = *[table] addr;
 }
 
-:table.set tableref is opc=0x26; tableref; sp1_64; sp2_32; ctx_is_directive=0 {
-	addr:8 = &tableref + sext(sp2_32) * 8;
-	*[table] addr = sp1_64;
+:table.set tableref is opc=0x26; tableref; sp1_32; sp2_32; ctx_is_directive=0 {
+	addr:8 = &tableref + zext(sp2_32) * 4;
+	*[table] addr = sp1_32;
 }
 
 :table.init elemidx tableidx is opc=0xfc; opc2=0x0c; elemidx; tableidx; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
@@ -376,8 +376,8 @@ macro select64(sp1_32, sp2_64, sp3_64) {
 	sp0_32 = table_size(tableidx:4);
 }
 
-:table.fill tableidx is opc=0xfc; opc2=0x11; tableidx; sp1_32; sp2_64; sp3_32; ctx_is_directive=0 {
-	table_fill(tableidx:4, sp1_32, sp2_64, sp3_32);
+:table.fill tableidx is opc=0xfc; opc2=0x11; tableidx; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
+	table_fill(tableidx:4, sp1_32, sp2_32, sp3_32);
 }
 
 
diff --git a/Ghidra/Processors/WebAssembly/ghidra_scripts/analyze_dyncalls.py b/Ghidra/Processors/WebAssembly/ghidra_scripts/analyze_dyncalls.py
index 4cfe3385ea8e..578c7d65ea0f 100644
--- a/Ghidra/Processors/WebAssembly/ghidra_scripts/analyze_dyncalls.py
+++ b/Ghidra/Processors/WebAssembly/ghidra_scripts/analyze_dyncalls.py
@@ -42,7 +42,7 @@ def getConst(inst):
     return inst.getOpObjects(0)[0].value
 
 def getTableFunction(offset):
-    funcAddr = getLong(tablespace.getAddress(offset * 8)) & 0xffffffff
+    funcAddr = getInt(tablespace.getAddress(offset * 4)) & 0xffffffff
     return getFunctionAt(progspace.getAddress(funcAddr))
 
 def analyzeDyncall(function, calltype=None):
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
index e09b1902e283..c6d7beffb2c8 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
@@ -123,7 +123,7 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 	}
 
 	public static Address getTableAddress(Program program, int tableidx, long itemIndex) {
-		return program.getAddressFactory().getAddressSpace("table").getAddress((((long) tableidx) << 32) + (itemIndex * 8));
+		return program.getAddressFactory().getAddressSpace("table").getAddress((((long) tableidx) << 32) + (itemIndex * 4));
 	}
 
 	public static Address getMemoryAddress(Program program, int memidx, long offset) {
@@ -341,7 +341,7 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 			block.setExecute(false);
 			createData(program, program.getListing(), dataStart, dataType);
 		} catch (Exception e) {
-			Msg.error(WasmLoader.class, "Failed to create global block " + globalidx + " at " + dataStart);
+			Msg.error(WasmLoader.class, "Failed to create global block " + globalidx + " at " + dataStart, e);
 		}
 	}
 	// #endregion
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
index 9274a35b2617..0bc7d182256a 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
@@ -132,7 +132,7 @@ public class WasmFunctionAnalysis {
 		 */
 		public void setIsOp64(Program program, Address address, ValType type) {
 			int value;
-			if (type == null || type == ValType.i32 || type == ValType.f32) {
+			if (type == null || type.getSize() == 4) {
 				/* 32-bit operand */
 				value = 0;
 			} else {
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmEnums.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmEnums.java
index b597d114de6c..730d7af5aa1a 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmEnums.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmEnums.java
@@ -20,7 +20,7 @@ import java.util.HashMap;
 import ghidra.program.model.data.DataType;
 import ghidra.program.model.data.DoubleDataType;
 import ghidra.program.model.data.FloatDataType;
-import ghidra.program.model.data.Pointer64DataType;
+import ghidra.program.model.data.PointerDataType;
 import ghidra.program.model.data.Undefined4DataType;
 import ghidra.program.model.data.Undefined8DataType;
 
@@ -65,9 +65,9 @@ public class WasmEnums {
 			case f64:
 				return DoubleDataType.dataType;
 			case funcref:
-				return Pointer64DataType.dataType;
+				return PointerDataType.dataType;
 			case externref:
-				return Undefined8DataType.dataType;
+				return Undefined4DataType.dataType;
 			}
 			return null;
 		}
@@ -76,11 +76,11 @@ public class WasmEnums {
 			switch (this) {
 			case i32:
 			case f32:
+			case funcref:
+			case externref:
 				return 4;
 			case i64:
 			case f64:
-			case funcref:
-			case externref:
 				return 8;
 			}
 			return 4;
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java
index 022629c71146..3fb1528c2b5b 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java
@@ -127,7 +127,7 @@ public final class ConstantExpression implements StructConverter {
 
 	/**
 	 * Return the bytes that correspond to the value produced, i.e. 4 bytes for
-	 * i32.const, 8 bytes for ref.null, etc. Return null if the initializer cannot
+	 * i32.const, 8 bytes for f64.const, etc. Return null if the initializer cannot
 	 * be determined (e.g. global) This needs a reference to the module so that
 	 * function references can be resolved to their static addresses.
 	 */
@@ -138,13 +138,13 @@ public final class ConstantExpression implements StructConverter {
 		case I64_CONST:
 			return longToBytes(((LEB128) value).asLong());
 		case REF_FUNC:
-			return longToBytes(WasmLoader.getFunctionAddressOffset(module, (int) ((LEB128) value).asLong()));
+			return intToBytes((int) WasmLoader.getFunctionAddressOffset(module, (int) ((LEB128) value).asLong()));
 		case F32_CONST:
 		case F64_CONST:
 			return (byte[]) value;
 		case REF_NULL_FUNCREF:
 		case REF_NULL_EXTERNREF:
-			return new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 };
+			return new byte[] { 0, 0, 0, 0 };
 		case GLOBAL_GET:
 			return null;
 		default:
-- 
2.41.0


From c7fae82d6074243a414c61bb9dd11fa98bf884c5 Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Tue, 29 Mar 2022 03:32:39 -0700
Subject: [PATCH 04/25] WebAssembly: reduce dependency on Program class.

Using Program throughout is rather lazy, and in many cases totally unnecessary.
Using finer-grained interfaces and classes like AddressFactory allows usage of
the code in non-Program contexts, such as emulation.
---
 .../src/main/java/wasm/WasmLoader.java        |  65 +++----
 .../main/java/wasm/analysis/WasmAnalysis.java |  83 ++++-----
 .../java/wasm/analysis/WasmFuncSignature.java |  12 +-
 .../wasm/analysis/WasmFunctionAnalysis.java   | 175 +++++++++---------
 .../java/wasm/analysis/WasmPreAnalyzer.java   |  19 +-
 .../src/main/java/wasm/format/WasmModule.java |   8 +-
 .../structures/ConstantExpression.java        |   6 +-
 .../sections/structures/WasmCodeEntry.java    |   8 +-
 .../structures/WasmElementSegment.java        |   8 +-
 .../sections/structures/WasmGlobalEntry.java  |   6 +-
 .../wasm/pcode/InjectPayloadWasmEntry.java    |  14 +-
 .../java/wasm/pcode/InjectPayloadWasmPop.java |  19 +-
 .../wasm/pcode/InjectPayloadWasmPush.java     |  11 +-
 .../main/java/wasm/pcode/PcodeOpEmitter.java  |  10 +-
 14 files changed, 226 insertions(+), 218 deletions(-)

diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
index c6d7beffb2c8..7f3fd82e6a35 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
@@ -30,6 +30,7 @@ import ghidra.app.util.opinion.AbstractLibrarySupportLoader;
 import ghidra.app.util.opinion.LoadSpec;
 import ghidra.program.database.mem.FileBytes;
 import ghidra.program.model.address.Address;
+import ghidra.program.model.address.AddressFactory;
 import ghidra.program.model.address.AddressSet;
 import ghidra.program.model.address.AddressSpace;
 import ghidra.program.model.data.ArrayDataType;
@@ -62,10 +63,10 @@ import wasm.format.sections.WasmNameSection;
 import wasm.format.sections.WasmSection;
 import wasm.format.sections.WasmSection.WasmSectionId;
 import wasm.format.sections.WasmUnknownCustomSection;
+import wasm.format.sections.structures.WasmCodeEntry;
 import wasm.format.sections.structures.WasmDataSegment;
 import wasm.format.sections.structures.WasmElementSegment;
 import wasm.format.sections.structures.WasmExportEntry;
-import wasm.format.sections.structures.WasmCodeEntry;
 import wasm.format.sections.structures.WasmGlobalEntry;
 import wasm.format.sections.structures.WasmGlobalType;
 import wasm.format.sections.structures.WasmImportEntry;
@@ -108,7 +109,7 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 		}
 	}
 
-	public static long getFunctionSize(Program program, WasmModule module, int funcidx) {
+	public static long getFunctionSize(WasmModule module, int funcidx) {
 		List<WasmImportEntry> imports = module.getImports(WasmExternalKind.EXT_FUNCTION);
 		if (funcidx < imports.size()) {
 			return imports.get(funcidx).getEntrySize();
@@ -118,29 +119,29 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 		}
 	}
 
-	public static Address getFunctionAddress(Program program, WasmModule module, int funcidx) {
-		return program.getAddressFactory().getAddressSpace("ram").getAddress(getFunctionAddressOffset(module, funcidx));
+	public static Address getFunctionAddress(AddressFactory addressFactory, WasmModule module, int funcidx) {
+		return addressFactory.getAddressSpace("ram").getAddress(getFunctionAddressOffset(module, funcidx));
 	}
 
-	public static Address getTableAddress(Program program, int tableidx, long itemIndex) {
-		return program.getAddressFactory().getAddressSpace("table").getAddress((((long) tableidx) << 32) + (itemIndex * 4));
+	public static Address getTableAddress(AddressFactory addressFactory, int tableidx, long itemIndex) {
+		return addressFactory.getAddressSpace("table").getAddress((((long) tableidx) << 32) + (itemIndex * 4));
 	}
 
-	public static Address getMemoryAddress(Program program, int memidx, long offset) {
+	public static Address getMemoryAddress(AddressFactory addressFactory, int memidx, long offset) {
 		if (memidx != 0) {
 			/* only handle memory 0 for now */
 			throw new IllegalArgumentException("non-zero memidx is not supported");
 		}
 
-		return program.getAddressFactory().getAddressSpace("ram").getAddress(offset);
+		return addressFactory.getAddressSpace("ram").getAddress(offset);
 	}
 
-	public static Address getGlobalAddress(Program program, int globalidx) {
-		return program.getAddressFactory().getAddressSpace("global").getAddress(((long) globalidx) * 8);
+	public static Address getGlobalAddress(AddressFactory addressFactory, int globalidx) {
+		return addressFactory.getAddressSpace("global").getAddress(((long) globalidx) * 8);
 	}
 
-	private static Address getCodeAddress(Program program, long fileOffset) {
-		return program.getAddressFactory().getAddressSpace("ram").getAddress(CODE_BASE + fileOffset);
+	private static Address getCodeAddress(AddressFactory addressFactory, long fileOffset) {
+		return addressFactory.getAddressSpace("ram").getAddress(CODE_BASE + fileOffset);
 	}
 	// #endregion
 
@@ -192,7 +193,7 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 		return globalNamespace;
 	}
 
-	private static String getObjectName(Program program, WasmModule module, WasmExternalKind objectKind, int objidx) {
+	private static String getObjectName(WasmModule module, WasmExternalKind objectKind, int objidx) {
 		List<WasmImportEntry> imports = module.getImports(objectKind);
 		if (objidx < imports.size()) {
 			return imports.get(objidx).getName();
@@ -208,7 +209,7 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 		return getObjectNamespace(program, module, WasmExternalKind.EXT_FUNCTION, funcidx);
 	}
 
-	public static String getFunctionName(Program program, WasmModule module, int funcidx) {
+	public static String getFunctionName(WasmModule module, int funcidx) {
 		String name;
 		WasmNameSection nameSection = module.getNameSection();
 		if (nameSection != null) {
@@ -217,7 +218,7 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 				return name;
 			}
 		}
-		name = getObjectName(program, module, WasmExternalKind.EXT_FUNCTION, funcidx);
+		name = getObjectName(module, WasmExternalKind.EXT_FUNCTION, funcidx);
 		if (name != null) {
 			return name;
 		}
@@ -237,7 +238,7 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 				return name;
 			}
 		}
-		name = getObjectName(program, module, WasmExternalKind.EXT_GLOBAL, globalidx);
+		name = getObjectName(module, WasmExternalKind.EXT_GLOBAL, globalidx);
 		if (name != null) {
 			return name;
 		}
@@ -299,7 +300,7 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 
 	private static void createTableBlock(Program program, DataType elementDataType, long numElements, int tableidx, TaskMonitor monitor) {
 		long byteSize = elementDataType.getLength() * numElements;
-		Address dataStart = getTableAddress(program, tableidx, 0);
+		Address dataStart = getTableAddress(program.getAddressFactory(), tableidx, 0);
 		try {
 			MemoryBlock block = program.getMemory().createInitializedBlock(".table" + tableidx, dataStart, byteSize, (byte) 0xff, monitor, false);
 			block.setRead(true);
@@ -314,7 +315,7 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 	}
 
 	private static void createMemoryBlock(Program program, int memidx, long length, TaskMonitor monitor) {
-		Address dataStart = getMemoryAddress(program, memidx, 0);
+		Address dataStart = getMemoryAddress(program.getAddressFactory(), memidx, 0);
 		try {
 			MemoryBlock block = program.getMemory().createInitializedBlock(".memory" + memidx, dataStart, length, (byte) 0x00, monitor, false);
 			block.setRead(true);
@@ -327,7 +328,7 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 	}
 
 	private static void createGlobalBlock(Program program, DataType dataType, byte[] initBytes, int globalidx, int mutability, TaskMonitor monitor) {
-		Address dataStart = getGlobalAddress(program, globalidx);
+		Address dataStart = getGlobalAddress(program.getAddressFactory(), globalidx);
 		try {
 			MemoryBlock block;
 			if (initBytes == null) {
@@ -380,12 +381,12 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 		 */
 		WasmSection importSection = module.getSection(WasmSectionId.SEC_IMPORT);
 		if (importSection != null) {
-			createImportStubBlock(program, getCodeAddress(program, importSection.getSectionOffset()), importSection.getSectionSize());
+			createImportStubBlock(program, getCodeAddress(program.getAddressFactory(), importSection.getSectionOffset()), importSection.getSectionSize());
 		}
 		WasmSection codeSection = module.getSection(WasmSectionId.SEC_CODE);
 		if (codeSection != null) {
 			long codeOffset = codeSection.getSectionOffset();
-			createFunctionCodeBlock(program, fileBytes, codeOffset, getCodeAddress(program, codeOffset), codeSection.getSectionSize());
+			createFunctionCodeBlock(program, fileBytes, codeOffset, getCodeAddress(program.getAddressFactory(), codeOffset), codeSection.getSectionSize());
 		}
 
 		monitor.initialize(numFunctions);
@@ -395,9 +396,9 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 			}
 			monitor.incrementProgress(1);
 
-			Address startAddress = getFunctionAddress(program, module, funcidx);
-			long functionLength = getFunctionSize(program, module, funcidx);
-			String functionName = getFunctionName(program, module, funcidx);
+			Address startAddress = getFunctionAddress(program.getAddressFactory(), module, funcidx);
+			long functionLength = getFunctionSize(module, funcidx);
+			String functionName = getFunctionName(module, funcidx);
 			Namespace functionNamespace = getFunctionNamespace(program, module, funcidx);
 
 			try {
@@ -458,12 +459,12 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 		if (initBytes == null)
 			return;
 
-		program.getMemory().setBytes(getTableAddress(program, tableidx, offset), initBytes);
+		program.getMemory().setBytes(getTableAddress(program.getAddressFactory(), tableidx, offset), initBytes);
 
-		Address[] refs = elemSegment.getAddresses(program, module);
+		Address[] refs = elemSegment.getAddresses(program.getAddressFactory(), module);
 		for (int i = 0; i < refs.length; i++) {
 			if (refs[i] != null) {
-				Address elementAddr = getTableAddress(program, tableidx, offset + i);
+				Address elementAddr = getTableAddress(program.getAddressFactory(), tableidx, offset + i);
 				program.getReferenceManager().removeAllReferencesFrom(elementAddr);
 				program.getReferenceManager().addMemoryReference(elementAddr, refs[i], RefType.DATA, SourceType.IMPORTED, 0);
 			}
@@ -538,7 +539,7 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 	 */
 	public static void loadDataToMemory(Program program, WasmModule module, int dataidx, int memidx, long offset, TaskMonitor monitor) throws Exception {
 		WasmDataSegment dataSegment = module.getDataSegments().get(dataidx);
-		Address memStart = getMemoryAddress(program, memidx, offset);
+		Address memStart = getMemoryAddress(program.getAddressFactory(), memidx, offset);
 		program.getMemory().setBytes(memStart, dataSegment.getData());
 	}
 
@@ -569,7 +570,7 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 			try {
 				loadDataToMemory(program, module, dataidx, memidx, offset, monitor);
 			} catch (Exception e) {
-				Address memStart = getMemoryAddress(program, memidx, offset);
+				Address memStart = getMemoryAddress(program.getAddressFactory(), memidx, offset);
 				Msg.error(this, "Failed to initialize memory " + memidx + " with data segment " + dataidx + " at " + memStart, e);
 			}
 		}
@@ -601,13 +602,13 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 				WasmGlobalEntry entry = globals.get(globalidx - imports.size());
 				globalType = entry.getGlobalType();
 				initBytes = entry.asBytes(module);
-				initRef = entry.asAddress(program, module);
+				initRef = entry.asAddress(program.getAddressFactory(), module);
 				initGlobal = entry.asGlobalGet();
 			}
 
 			createGlobalBlock(program, globalType.getType().asDataType(), initBytes, globalidx, globalType.getMutability(), monitor);
 
-			Address dataStart = getGlobalAddress(program, globalidx);
+			Address dataStart = getGlobalAddress(program.getAddressFactory(), globalidx);
 			Namespace namespace = getGlobalNamespace(program, module, globalidx);
 			String name = getGlobalName(program, module, globalidx);
 			try {
@@ -628,7 +629,7 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 				} else if (!currentComment.isEmpty()) {
 					currentComment += "\n";
 				}
-				Address otherAddress = getGlobalAddress(program, (int) (long) initGlobal);
+				Address otherAddress = getGlobalAddress(program.getAddressFactory(), (int) (long) initGlobal);
 				program.getListing().setComment(dataStart, commentType, currentComment + "Initializer: {@symbol " + otherAddress + "}");
 			}
 		}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmAnalysis.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmAnalysis.java
index 2bc0a7789d43..8b074c4dc7b6 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmAnalysis.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmAnalysis.java
@@ -25,17 +25,17 @@ import java.util.Map;
 import ghidra.app.plugin.core.analysis.AnalysisState;
 import ghidra.app.plugin.core.analysis.AnalysisStateInfo;
 import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.ByteArrayProvider;
 import ghidra.app.util.bin.ByteProvider;
 import ghidra.app.util.bin.MemoryByteProvider;
 import ghidra.program.model.address.Address;
-import ghidra.program.model.listing.Function;
+import ghidra.program.model.address.AddressFactory;
 import ghidra.program.model.listing.Program;
 import ghidra.program.model.mem.Memory;
-import ghidra.program.model.symbol.Symbol;
-import ghidra.util.Msg;
 import wasm.WasmLoader;
 import wasm.format.WasmEnums.ValType;
 import wasm.format.WasmModule;
+import wasm.format.sections.structures.WasmCodeEntry;
 import wasm.format.sections.structures.WasmFuncType;
 
 public class WasmAnalysis implements AnalysisState {
@@ -49,31 +49,31 @@ public class WasmAnalysis implements AnalysisState {
 	public static synchronized WasmAnalysis getState(Program program) {
 		WasmAnalysis analysisState = AnalysisStateInfo.getAnalysisState(program, WasmAnalysis.class);
 		if (analysisState == null) {
-			analysisState = new WasmAnalysis(program);
+			Memory mem = program.getMemory();
+			Address moduleStart = mem.getBlock(".module").getStart();
+			ByteProvider memByteProvider = new MemoryByteProvider(mem, moduleStart);
+			BinaryReader memBinaryReader = new BinaryReader(memByteProvider, true);
+			WasmModule module;
+			try {
+				module = new WasmModule(memBinaryReader);
+			} catch (IOException e) {
+				throw new RuntimeException(e);
+			}
+
+			analysisState = new WasmAnalysis(program.getAddressFactory(), module);
 			AnalysisStateInfo.putAnalysisState(program, analysisState);
 		}
 		return analysisState;
 	}
 
-	private Program program;
 	private WasmModule module = null;
 	private List<WasmFuncSignature> functions = null;
 	private Map<Address, WasmFuncSignature> functionsByAddress = new HashMap<>();
-	private Map<Function, WasmFunctionAnalysis> functionAnalyses = new HashMap<>();
-
-	public WasmAnalysis(Program program) {
-		Memory mem = program.getMemory();
-		Address moduleStart = mem.getBlock(".module").getStart();
-		ByteProvider memByteProvider = new MemoryByteProvider(mem, moduleStart);
-		BinaryReader memBinaryReader = new BinaryReader(memByteProvider, true);
-		try {
-			module = new WasmModule(memBinaryReader);
-		} catch (IOException e) {
-			Msg.error(this, "Failed to construct WasmModule", e);
-		}
+	private Map<Address, WasmFunctionAnalysis> functionAnalyses = new HashMap<>();
 
-		this.program = program;
-		this.functions = getFunctions(program, module);
+	public WasmAnalysis(AddressFactory addressFactory, WasmModule module) {
+		this.module = module;
+		this.functions = getFunctions(addressFactory, module);
 		for (WasmFuncSignature func : functions) {
 			functionsByAddress.put(func.getStartAddr(), func);
 		}
@@ -95,20 +95,19 @@ public class WasmAnalysis implements AnalysisState {
 		return functionsByAddress.get(address);
 	}
 
-	public synchronized WasmFunctionAnalysis getFunctionAnalysis(Function f) {
-		if (!functionAnalyses.containsKey(f)) {
-			WasmFuncSignature func = getFunctionByAddress(f.getEntryPoint());
-			BinaryReader codeReader = new BinaryReader(new MemoryByteProvider(program.getMemory(), func.getStartAddr()), true);
-			WasmFunctionAnalysis funcAnalysis = new WasmFunctionAnalysis(func);
-			try {
-				funcAnalysis.analyzeFunction(program, codeReader);
-				functionAnalyses.put(f, funcAnalysis);
-			} catch (Exception e) {
-				Msg.error(this, "Failed to analyze function " + func.getName(), e);
-				f.setComment("WARNING: Wasm function analysis failed, output may be incorrect: " + e);
+	public synchronized WasmFunctionAnalysis getFunctionAnalysis(Address entryPoint) throws IOException {
+		if (!functionAnalyses.containsKey(entryPoint)) {
+			WasmFuncSignature func = getFunctionByAddress(entryPoint);
+			WasmCodeEntry code = module.getFunctionCode(func.getFuncIdx());
+			if (code == null) {
+				return null;
 			}
+			BinaryReader codeReader = new BinaryReader(new ByteArrayProvider(code.getInstructions()), true);
+			WasmFunctionAnalysis funcAnalysis = new WasmFunctionAnalysis(func);
+			funcAnalysis.analyzeFunction(this, codeReader);
+			functionAnalyses.put(entryPoint, funcAnalysis);
 		}
-		return functionAnalyses.get(f);
+		return functionAnalyses.get(entryPoint);
 	}
 
 	public WasmFuncType getType(int typeidx) {
@@ -123,32 +122,28 @@ public class WasmAnalysis implements AnalysisState {
 		return module.getTableType(tableidx).getElementType();
 	}
 
-	private static List<WasmFuncSignature> getFunctions(Program program, WasmModule module) {
+	private static List<WasmFuncSignature> getFunctions(AddressFactory addressFactory, WasmModule module) {
 		int numFunctions = module.getFunctionCount();
 		List<WasmFuncSignature> functions = new ArrayList<>(numFunctions);
 		for (int funcidx = 0; funcidx < numFunctions; funcidx++) {
 			WasmFuncType funcType = module.getFunctionType(funcidx);
-			Address startAddress = WasmLoader.getFunctionAddress(program, module, funcidx);
-			Address endAddress = startAddress.add(WasmLoader.getFunctionSize(program, module, funcidx) - 1);
-
-			String name = null;
-			Symbol[] labels = program.getSymbolTable().getSymbols(startAddress);
-			if (labels.length > 0) {
-				name = labels[0].getName();
-			}
+			Address startAddress = WasmLoader.getFunctionAddress(addressFactory, module, funcidx);
+			Address endAddress = startAddress.add(WasmLoader.getFunctionSize(module, funcidx) - 1);
+			String name = WasmLoader.getFunctionName(module, funcidx);
 
+			WasmCodeEntry code = module.getFunctionCode(funcidx);
 			ValType[] params = funcType.getParamTypes();
 			ValType[] returns = funcType.getReturnTypes();
-			ValType[] nonParamLocals = module.getFunctionLocals(funcidx);
-			if (nonParamLocals == null) {
+			if (code == null) {
 				/* import */
-				functions.add(new WasmFuncSignature(params, returns, name, startAddress));
+				functions.add(new WasmFuncSignature(params, returns, funcidx, name, startAddress));
 			} else {
+				ValType[] nonParamLocals = code.getLocals();
 				ValType[] locals = new ValType[params.length + nonParamLocals.length];
 
 				System.arraycopy(params, 0, locals, 0, params.length);
 				System.arraycopy(nonParamLocals, 0, locals, params.length, nonParamLocals.length);
-				functions.add(new WasmFuncSignature(params, returns, name, startAddress, endAddress, locals));
+				functions.add(new WasmFuncSignature(params, returns, funcidx, name, startAddress, endAddress, locals));
 			}
 		}
 		return functions;
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFuncSignature.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFuncSignature.java
index 20af3fc81515..8cd5cc8b5215 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFuncSignature.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFuncSignature.java
@@ -21,6 +21,7 @@ import wasm.format.WasmEnums.ValType;
 public class WasmFuncSignature {
 	private ValType[] params;
 	private ValType[] returns;
+	private int funcIdx;
 	private String name;
 	private Address startAddr;
 	private Address endAddr; // address of last byte in the function (inclusive)
@@ -38,6 +39,10 @@ public class WasmFuncSignature {
 		return locals;
 	}
 
+	public int getFuncIdx() {
+		return funcIdx;
+	}
+
 	public String getName() {
 		return name;
 	}
@@ -54,15 +59,16 @@ public class WasmFuncSignature {
 		return locals == null;
 	}
 
-	public WasmFuncSignature(ValType[] paramTypes, ValType[] returnTypes, String name, Address addr) {
+	public WasmFuncSignature(ValType[] paramTypes, ValType[] returnTypes, int funcIdx, String name, Address addr) {
+		this.funcIdx = funcIdx;
 		this.name = name;
 		this.startAddr = addr;
 		this.params = paramTypes;
 		this.returns = returnTypes;
 	}
 
-	public WasmFuncSignature(ValType[] paramTypes, ValType[] returnTypes, String name, Address startAddr, Address endAddr, ValType[] locals) {
-		this(paramTypes, returnTypes, name, startAddr);
+	public WasmFuncSignature(ValType[] paramTypes, ValType[] returnTypes, int funcIdx, String name, Address startAddr, Address endAddr, ValType[] locals) {
+		this(paramTypes, returnTypes, funcIdx, name, startAddr);
 		this.endAddr = endAddr;
 		this.locals = locals;
 	}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
index 0bc7d182256a..8e5070d4ce46 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
@@ -94,10 +94,8 @@ public class WasmFunctionAnalysis {
 
 		private Map<Address, BigInteger> contextValues = new HashMap<>();
 
-		private void setRegister(Program program, Address address, RegisterDefinition reg, long value) {
+		private void setRegister(Address address, RegisterDefinition reg, long value) {
 			if (!contextValues.containsKey(address)) {
-				if (program.getListing().getInstructionContaining(address) != null)
-					return;
 				contextValues.put(address, BigInteger.ZERO);
 			}
 
@@ -112,6 +110,9 @@ public class WasmFunctionAnalysis {
 			Register contextRegister = context.getBaseContextRegister();
 			for (Map.Entry<Address, BigInteger> entry : contextValues.entrySet()) {
 				Address address = entry.getKey();
+				if (program.getListing().getInstructionContaining(address) != null)
+					continue;
+
 				RegisterValue value = new RegisterValue(contextRegister, entry.getValue());
 				try {
 					context.setRegisterValue(address, address, value);
@@ -122,15 +123,15 @@ public class WasmFunctionAnalysis {
 			contextValues.clear();
 		}
 
-		public void setIsReturn(Program program, Address address, int value) {
-			setRegister(program, address, REG_IS_RETURN, value);
+		public void setIsReturn(Address address, int value) {
+			setRegister(address, REG_IS_RETURN, value);
 		}
 
 		/**
 		 * Set whether the instruction takes a 64-bit stack operand. This currently
 		 * affects local.*, global.* and select instructions.
 		 */
-		public void setIsOp64(Program program, Address address, ValType type) {
+		public void setIsOp64(Address address, ValType type) {
 			int value;
 			if (type == null || type.getSize() == 4) {
 				/* 32-bit operand */
@@ -139,37 +140,37 @@ public class WasmFunctionAnalysis {
 				/* 64-bit operand */
 				value = 1;
 			}
-			setRegister(program, address, REG_IS_OP64, value);
+			setRegister(address, REG_IS_OP64, value);
 		}
 
 		/** Mark this global.* instruction as operating on the C stack pointer. */
-		public void setIsGlobalSp(Program program, Address address, boolean value) {
-			setRegister(program, address, REG_IS_GLOBAL_SP, value ? 1 : 0);
+		public void setIsGlobalSp(Address address, boolean value) {
+			setRegister(address, REG_IS_GLOBAL_SP, value ? 1 : 0);
 		}
 
 		/** Set the address that this instruction branches to. */
-		public void setBranchTarget(Program program, Address address, Address target) {
-			setRegister(program, address, REG_BR_TARGET, target.getOffset());
+		public void setBranchTarget(Address address, Address target) {
+			setRegister(address, REG_BR_TARGET, target.getOffset());
 		}
 
 		/**
 		 * Set the virtual stack pointer. Our SLEIGH converts stack operations into
 		 * register operations by using the stack pointer to index a register file.
 		 */
-		public void setStackPointer(Program program, Address address, long value) {
-			setRegister(program, address, REG_SP, value);
+		public void setStackPointer(Address address, long value) {
+			setRegister(address, REG_SP, value);
 		}
 
 		/* Number of locals table entries */
-		public void setLocalsDeclaration(Program program, Address address) {
-			setRegister(program, address, REG_IS_DIRECTIVE, 1);
-			setRegister(program, address, REG_DIRECTIVE_TYPE, DIRECTIVE_LOCALS);
+		public void setLocalsDeclaration(Address address) {
+			setRegister(address, REG_IS_DIRECTIVE, 1);
+			setRegister(address, REG_DIRECTIVE_TYPE, DIRECTIVE_LOCALS);
 		}
 
 		/* One entry in the function locals table */
-		public void setLocalDeclaration(Program program, Address address) {
-			setRegister(program, address, REG_IS_DIRECTIVE, 1);
-			setRegister(program, address, REG_DIRECTIVE_TYPE, DIRECTIVE_LOCAL);
+		public void setLocalDeclaration(Address address) {
+			setRegister(address, REG_IS_DIRECTIVE, 1);
+			setRegister(address, REG_DIRECTIVE_TYPE, DIRECTIVE_LOCAL);
 		}
 
 		/**
@@ -177,13 +178,13 @@ public class WasmFunctionAnalysis {
 		 * break out case statements individually in order to provide each one with a
 		 * unique branch target.
 		 */
-		public void setBrTableCase(Program program, Address address, int index) {
-			setRegister(program, address, REG_IS_DIRECTIVE, 1);
+		public void setBrTableCase(Address address, int index) {
+			setRegister(address, REG_IS_DIRECTIVE, 1);
 			if (index == -1) {
-				setRegister(program, address, REG_DIRECTIVE_TYPE, DIRECTIVE_DEFAULT);
+				setRegister(address, REG_DIRECTIVE_TYPE, DIRECTIVE_DEFAULT);
 			} else {
-				setRegister(program, address, REG_DIRECTIVE_TYPE, DIRECTIVE_CASE);
-				setRegister(program, address, REG_CASE_INDEX, index);
+				setRegister(address, REG_DIRECTIVE_TYPE, DIRECTIVE_CASE);
+				setRegister(address, REG_CASE_INDEX, index);
 			}
 		}
 	}
@@ -192,14 +193,13 @@ public class WasmFunctionAnalysis {
 		ValType[] params;
 		ValType[] returns;
 
-		public BlockType(Program program, WasmFuncSignature func) {
+		public BlockType(WasmFuncSignature func) {
 			/* A function's parameters are in local variables rather than the stack */
 			params = new ValType[0];
 			returns = func.getReturns();
 		}
 
-		public BlockType(Program program, long blocktype) {
-			WasmAnalysis analysis = WasmAnalysis.getState(program);
+		public BlockType(WasmAnalysis analysis, long blocktype) {
 			if (blocktype == -0x40) {
 				params = new ValType[0];
 				returns = new ValType[0];
@@ -231,14 +231,14 @@ public class WasmFunctionAnalysis {
 		boolean unreachable = false;
 		boolean hasElse = false;
 
-		public ControlFrame(Program program, Address address, BlockType blockType) {
+		public ControlFrame(Address address, BlockType blockType) {
 			this.startAddress = address;
 			this.blockKind = BlockKind.FUNCTION;
 			this.blockType = blockType;
 			this.initialStack = new ArrayList<>();
 		}
 
-		public ControlFrame(Program program, Address address, BlockKind blockKind, BlockType blockType, List<ValType> stack) {
+		public ControlFrame(Address address, BlockKind blockKind, BlockType blockType, List<ValType> stack) {
 			this.startAddress = address;
 			this.blockKind = blockKind;
 			this.blockType = blockType;
@@ -263,21 +263,21 @@ public class WasmFunctionAnalysis {
 		 * @param address
 		 *            Address of the branch instruction
 		 */
-		public void addBranch(Program program, Address address) {
+		public void addBranch(Address address) {
 			branchAddresses.add(address);
 		}
 
-		public void setElse(Program program, Address address) {
+		public void setElse(Address address) {
 			hasElse = true;
 			if (blockKind != BlockKind.IF) {
 				throw new ValidationException(address, "else without corresponding if");
 			}
-			contextreg.setBranchTarget(program, startAddress, address.add(1));
+			contextreg.setBranchTarget(startAddress, address.add(1));
 		}
 
-		public void setEnd(Program program, Address address) {
+		public void setEnd(Address address) {
 			if (blockKind == BlockKind.IF && !hasElse) {
-				contextreg.setBranchTarget(program, startAddress, address);
+				contextreg.setBranchTarget(startAddress, address);
 			}
 
 			Address branchTarget;
@@ -287,7 +287,7 @@ public class WasmFunctionAnalysis {
 				branchTarget = address;
 			}
 			for (Address branch : branchAddresses) {
-				contextreg.setBranchTarget(program, branch, branchTarget);
+				contextreg.setBranchTarget(branch, branchTarget);
 			}
 		}
 
@@ -345,7 +345,7 @@ public class WasmFunctionAnalysis {
 	 * saved to the program context, which would save us from having to re-analyze
 	 * functions when reopening the DB.
 	 */
-	private void setStackEffect(Program program, Address address, int popHeight, ValType[] toPop, int pushHeight, ValType[] toPush) {
+	private void setStackEffect(Address address, int popHeight, ValType[] toPop, int pushHeight, ValType[] toPush) {
 		stackEffects.put(address, new StackEffect(popHeight, toPop, pushHeight, toPush));
 	}
 
@@ -442,23 +442,23 @@ public class WasmFunctionAnalysis {
 	// #endregion
 
 	// #region Common instruction code
-	private void branchToBlock(Program program, Address instAddress, long labelidx) {
+	private void branchToBlock(Address instAddress, long labelidx) {
 		ControlFrame block = getBlock(instAddress, labelidx);
 		ValType[] arguments = block.getBranchArguments();
 		popValues(instAddress, arguments);
-		setStackEffect(program, instAddress, valueStack.size(), arguments, block.initialStack.size(), arguments);
-		block.addBranch(program, instAddress);
+		setStackEffect(instAddress, valueStack.size(), arguments, block.initialStack.size(), arguments);
+		block.addBranch(instAddress);
 		pushValues(instAddress, arguments);
 	}
 
-	private void memoryLoad(Program program, BinaryReader reader, Address instAddress, ValType destType) throws IOException {
+	private void memoryLoad(BinaryReader reader, Address instAddress, ValType destType) throws IOException {
 		readLeb128(reader); /* align */
 		readLeb128(reader); /* offset */
 		popValue(instAddress, ValType.i32);
 		pushValue(instAddress, destType);
 	}
 
-	private void memoryStore(Program program, BinaryReader reader, Address instAddress, ValType destType) throws IOException {
+	private void memoryStore(BinaryReader reader, Address instAddress, ValType destType) throws IOException {
 		readLeb128(reader); /* align */
 		readLeb128(reader); /* offset */
 		popValue(instAddress, destType);
@@ -478,8 +478,8 @@ public class WasmFunctionAnalysis {
 
 	// #endregion
 
-	private void analyzeOpcode(Program program, Address instAddress, BinaryReader reader) throws IOException {
-		contextreg.setStackPointer(program, instAddress, 8 * valueStack.size());
+	private void analyzeOpcode(WasmAnalysis analysis, Address instAddress, BinaryReader reader) throws IOException {
+		contextreg.setStackPointer(instAddress, 8 * valueStack.size());
 		int opcode = reader.readNextUnsignedByte();
 		switch (opcode) {
 		case 0x00: /* unreachable */
@@ -489,22 +489,22 @@ public class WasmFunctionAnalysis {
 			break;
 
 		case 0x02: /* block bt */ {
-			BlockType blocktype = new BlockType(program, readSignedLeb128(reader));
+			BlockType blocktype = new BlockType(analysis, readSignedLeb128(reader));
 			popValues(instAddress, blocktype.params);
-			pushBlock(instAddress, this.new ControlFrame(program, instAddress, BlockKind.BLOCK, blocktype, valueStack));
+			pushBlock(instAddress, this.new ControlFrame(instAddress, BlockKind.BLOCK, blocktype, valueStack));
 			break;
 		}
 		case 0x03: /* loop bt */ {
-			BlockType blocktype = new BlockType(program, readSignedLeb128(reader));
+			BlockType blocktype = new BlockType(analysis, readSignedLeb128(reader));
 			popValues(instAddress, blocktype.params);
-			pushBlock(instAddress, this.new ControlFrame(program, instAddress, BlockKind.LOOP, blocktype, valueStack));
+			pushBlock(instAddress, this.new ControlFrame(instAddress, BlockKind.LOOP, blocktype, valueStack));
 			break;
 		}
 		case 0x04: /* if bt */ {
-			BlockType blocktype = new BlockType(program, readSignedLeb128(reader));
+			BlockType blocktype = new BlockType(analysis, readSignedLeb128(reader));
 			popValue(instAddress, ValType.i32);
 			popValues(instAddress, blocktype.params);
-			pushBlock(instAddress, this.new ControlFrame(program, instAddress, BlockKind.IF, blocktype, valueStack));
+			pushBlock(instAddress, this.new ControlFrame(instAddress, BlockKind.IF, blocktype, valueStack));
 			break;
 		}
 		case 0x05: /* else */ {
@@ -517,8 +517,8 @@ public class WasmFunctionAnalysis {
 			 * The else instruction itself serves as a branch to the end of the block. The
 			 * branch from the if instruction will go to the instruction after the else.
 			 */
-			block.addBranch(program, instAddress);
-			block.setElse(program, instAddress);
+			block.addBranch(instAddress);
+			block.setElse(instAddress);
 
 			block.unreachable = false;
 			pushBlock(instAddress, block);
@@ -527,25 +527,25 @@ public class WasmFunctionAnalysis {
 		case 0x0B: /* end */ {
 			ControlFrame block = popBlock(instAddress);
 			// this stack effect will only be used by the final end
-			setStackEffect(program, instAddress, valueStack.size(), block.blockType.returns, 0, null);
+			setStackEffect(instAddress, valueStack.size(), block.blockType.returns, 0, null);
 			pushValues(instAddress, block.blockType.returns);
-			block.setEnd(program, instAddress);
+			block.setEnd(instAddress);
 			if (controlStack.isEmpty()) {
-				contextreg.setIsReturn(program, instAddress, 1);
+				contextreg.setIsReturn(instAddress, 1);
 			}
 			break;
 		}
 
 		case 0x0C: /* br l */ {
 			long labelidx = readLeb128(reader);
-			branchToBlock(program, instAddress, labelidx);
+			branchToBlock(instAddress, labelidx);
 			markUnreachable(instAddress);
 			break;
 		}
 		case 0x0D: /* br_if l */ {
 			long labelidx = readLeb128(reader);
 			popValue(instAddress, ValType.i32);
-			branchToBlock(program, instAddress, labelidx);
+			branchToBlock(instAddress, labelidx);
 			break;
 		}
 		case 0x0E: /* br_table l* l */ {
@@ -553,35 +553,33 @@ public class WasmFunctionAnalysis {
 			popValue(instAddress, ValType.i32);
 			for (int i = 0; i < count + 1; i++) {
 				Address caseAddress = func.getStartAddr().add(reader.getPointerIndex());
-				contextreg.setBrTableCase(program, caseAddress, (i < count) ? i : -1);
+				contextreg.setBrTableCase(caseAddress, (i < count) ? i : -1);
 				long labelidx = readLeb128(reader);
-				branchToBlock(program, caseAddress, labelidx);
+				branchToBlock(caseAddress, labelidx);
 			}
 			markUnreachable(instAddress);
 			break;
 		}
 		case 0x0F: /* return */ {
 			popValues(instAddress, func.getReturns());
-			setStackEffect(program, instAddress, valueStack.size(), func.getReturns(), 0, null);
+			setStackEffect(instAddress, valueStack.size(), func.getReturns(), 0, null);
 			markUnreachable(instAddress);
 			break;
 		}
 		case 0x10: /* call x */ {
 			long funcidx = readLeb128(reader);
-			WasmAnalysis analysis = WasmAnalysis.getState(program);
 			WasmFuncSignature targetFunc = analysis.getFunction((int) funcidx);
 			ValType[] params = targetFunc.getParams();
 			ValType[] returns = targetFunc.getReturns();
 			popValues(instAddress, params);
-			setStackEffect(program, instAddress, valueStack.size(), params, valueStack.size(), returns);
-			contextreg.setBranchTarget(program, instAddress, targetFunc.getStartAddr());
+			setStackEffect(instAddress, valueStack.size(), params, valueStack.size(), returns);
+			contextreg.setBranchTarget(instAddress, targetFunc.getStartAddr());
 			pushValues(instAddress, returns);
 			break;
 		}
 		case 0x11: /* call_indirect x y */ {
 			long typeidx = readLeb128(reader);
 			long tableidx = readLeb128(reader);
-			WasmAnalysis analysis = WasmAnalysis.getState(program);
 			if (analysis.getTableType((int) tableidx) != ValType.funcref) {
 				throw new ValidationException(instAddress, "call_indirect does not reference a function table");
 			}
@@ -591,7 +589,7 @@ public class WasmFunctionAnalysis {
 			ValType[] params = type.getParamTypes();
 			ValType[] returns = type.getReturnTypes();
 			popValues(instAddress, params);
-			setStackEffect(program, instAddress, valueStack.size(), params, valueStack.size(), returns);
+			setStackEffect(instAddress, valueStack.size(), params, valueStack.size(), returns);
 			pushValues(instAddress, returns);
 			break;
 		}
@@ -608,7 +606,7 @@ public class WasmFunctionAnalysis {
 				throw new ValidationException(instAddress, "inconsistent types in select");
 			}
 			ValType resultType = (t1 != null) ? t1 : t2;
-			contextreg.setIsOp64(program, instAddress, resultType);
+			contextreg.setIsOp64(instAddress, resultType);
 			pushValue(instAddress, resultType);
 			break;
 		}
@@ -628,37 +626,37 @@ public class WasmFunctionAnalysis {
 		case 0x20: /* local.get x */ {
 			long localidx = readLeb128(reader);
 			ValType type = func.getLocals()[(int) localidx];
-			contextreg.setIsOp64(program, instAddress, type);
+			contextreg.setIsOp64(instAddress, type);
 			pushValue(instAddress, type);
 			break;
 		}
 		case 0x21: /* local.set x */ {
 			long localidx = readLeb128(reader);
 			ValType type = func.getLocals()[(int) localidx];
-			contextreg.setIsOp64(program, instAddress, type);
+			contextreg.setIsOp64(instAddress, type);
 			popValue(instAddress, type);
 			break;
 		}
 		case 0x22: /* local.tee x */ {
 			long localidx = readLeb128(reader);
 			ValType type = func.getLocals()[(int) localidx];
-			contextreg.setIsOp64(program, instAddress, type);
+			contextreg.setIsOp64(instAddress, type);
 			popValue(instAddress, type);
 			pushValue(instAddress, type);
 			break;
 		}
 		case 0x23: /* global.get x */ {
 			long globalidx = readLeb128(reader);
-			ValType type = WasmAnalysis.getState(program).getGlobalType((int) globalidx);
-			contextreg.setIsOp64(program, instAddress, type);
+			ValType type = analysis.getGlobalType((int) globalidx);
+			contextreg.setIsOp64(instAddress, type);
 			globalGetSets.put(instAddress, globalidx);
 			pushValue(instAddress, type);
 			break;
 		}
 		case 0x24: /* global.set x */ {
 			long globalidx = readLeb128(reader);
-			ValType type = WasmAnalysis.getState(program).getGlobalType((int) globalidx);
-			contextreg.setIsOp64(program, instAddress, type);
+			ValType type = analysis.getGlobalType((int) globalidx);
+			contextreg.setIsOp64(instAddress, type);
 			globalGetSets.put(instAddress, globalidx);
 			popValue(instAddress, type);
 			break;
@@ -666,7 +664,6 @@ public class WasmFunctionAnalysis {
 
 		case 0x25: /* table.get x */ {
 			long tableidx = readLeb128(reader);
-			WasmAnalysis analysis = WasmAnalysis.getState(program);
 			ValType type = analysis.getTableType((int) tableidx);
 			popValue(instAddress, ValType.i32);
 			pushValue(instAddress, type);
@@ -674,7 +671,6 @@ public class WasmFunctionAnalysis {
 		}
 		case 0x26: /* table.set x */ {
 			long tableidx = readLeb128(reader);
-			WasmAnalysis analysis = WasmAnalysis.getState(program);
 			ValType type = analysis.getTableType((int) tableidx);
 			popValue(instAddress, type);
 			popValue(instAddress, ValType.i32);
@@ -686,7 +682,7 @@ public class WasmFunctionAnalysis {
 		case 0x2D: /* i32.load8_u memarg */
 		case 0x2E: /* i32.load16_s memarg */
 		case 0x2F: /* i32.load16_u memarg */
-			memoryLoad(program, reader, instAddress, ValType.i32);
+			memoryLoad(reader, instAddress, ValType.i32);
 			break;
 		case 0x29: /* i64.load memarg */
 		case 0x30: /* i64.load8_s memarg */
@@ -695,31 +691,31 @@ public class WasmFunctionAnalysis {
 		case 0x33: /* i64.load16_u memarg */
 		case 0x34: /* i64.load32_s memarg */
 		case 0x35: /* i64.load32_u memarg */
-			memoryLoad(program, reader, instAddress, ValType.i64);
+			memoryLoad(reader, instAddress, ValType.i64);
 			break;
 		case 0x2A: /* f32.load memarg */
-			memoryLoad(program, reader, instAddress, ValType.f32);
+			memoryLoad(reader, instAddress, ValType.f32);
 			break;
 		case 0x2B: /* f64.load memarg */
-			memoryLoad(program, reader, instAddress, ValType.f64);
+			memoryLoad(reader, instAddress, ValType.f64);
 			break;
 
 		case 0x36: /* i32.store memarg */
 		case 0x3A: /* i32.store8 memarg */
 		case 0x3B: /* i32.store16 memarg */
-			memoryStore(program, reader, instAddress, ValType.i32);
+			memoryStore(reader, instAddress, ValType.i32);
 			break;
 		case 0x37: /* i64.store memarg */
 		case 0x3C: /* i64.store8 memarg */
 		case 0x3D: /* i64.store16 memarg */
 		case 0x3E: /* i64.store32 memarg */
-			memoryStore(program, reader, instAddress, ValType.i64);
+			memoryStore(reader, instAddress, ValType.i64);
 			break;
 		case 0x38: /* f32.store memarg */
-			memoryStore(program, reader, instAddress, ValType.f32);
+			memoryStore(reader, instAddress, ValType.f32);
 			break;
 		case 0x39: /* f64.store memarg */
-			memoryStore(program, reader, instAddress, ValType.f64);
+			memoryStore(reader, instAddress, ValType.f64);
 			break;
 
 		case 0x3F: /* memory.size */ {
@@ -959,9 +955,8 @@ public class WasmFunctionAnalysis {
 			break;
 		case 0xD2: /* ref.func x */ {
 			long funcidx = readLeb128(reader);
-			WasmAnalysis analysis = WasmAnalysis.getState(program);
 			WasmFuncSignature targetFunc = analysis.getFunction((int) funcidx);
-			contextreg.setBranchTarget(program, instAddress, targetFunc.getStartAddr());
+			contextreg.setBranchTarget(instAddress, targetFunc.getStartAddr());
 			pushValue(instAddress, ValType.funcref);
 			break;
 		}
@@ -1061,7 +1056,7 @@ public class WasmFunctionAnalysis {
 		}
 	}
 
-	public void analyzeFunction(Program program, BinaryReader reader) throws IOException {
+	public void analyzeFunction(WasmAnalysis analysis, BinaryReader reader) throws IOException {
 		Address startAddress = func.getStartAddr();
 		long functionLength = func.getEndAddr().subtract(func.getStartAddr());
 
@@ -1069,27 +1064,27 @@ public class WasmFunctionAnalysis {
 		Address instAddress;
 
 		instAddress = startAddress.add(reader.getPointerIndex());
-		contextreg.setLocalsDeclaration(program, instAddress);
+		contextreg.setLocalsDeclaration(instAddress);
 		long count = readLeb128(reader);
 		for (int i = 0; i < count; i++) {
 			instAddress = startAddress.add(reader.getPointerIndex());
-			contextreg.setLocalDeclaration(program, instAddress);
+			contextreg.setLocalDeclaration(instAddress);
 			readLeb128(reader); /* count */
 			readLeb128(reader); /* type */
 		}
 
 		instAddress = startAddress.add(reader.getPointerIndex());
-		pushBlock(instAddress, new ControlFrame(program, instAddress, new BlockType(program, func)));
+		pushBlock(instAddress, new ControlFrame(instAddress, new BlockType(func)));
 		while (reader.getPointerIndex() <= functionLength) {
 			instAddress = startAddress.add(reader.getPointerIndex());
-			analyzeOpcode(program, instAddress, reader);
+			analyzeOpcode(analysis, instAddress, reader);
 		}
 	}
 
 	public void applyContext(Program program, int cStackGlobal) {
 		for (Map.Entry<Address, Long> entry : globalGetSets.entrySet()) {
 			if (entry.getValue() == cStackGlobal) {
-				contextreg.setIsGlobalSp(program, entry.getKey(), entry.getValue() == cStackGlobal);
+				contextreg.setIsGlobalSp(entry.getKey(), entry.getValue() == cStackGlobal);
 			}
 		}
 		contextreg.commitContext(program);
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmPreAnalyzer.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmPreAnalyzer.java
index 3a7eee607bc0..7dd21dabb955 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmPreAnalyzer.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmPreAnalyzer.java
@@ -167,21 +167,26 @@ public class WasmPreAnalyzer extends AbstractAnalyzer {
 			}
 			monitor.incrementProgress(1);
 
-			WasmFuncSignature func = state.getFunctionByAddress(function.getEntryPoint());
-			if (func == null) {
-				Msg.error(this, "Function not defined in Wasm file: " + function.getEntryPoint());
+			WasmFunctionAnalysis funcAnalysis;
+			try {
+				funcAnalysis = state.getFunctionAnalysis(function.getEntryPoint());
+			} catch (Exception e) {
+				Msg.error(this, "Failed to analyze function " + function.getName(), e);
+				function.setComment("WARNING: Wasm function analysis failed, output may be incorrect: " + e);
 				continue;
 			}
-			if (func.isImport()) {
+			if (funcAnalysis == null) {
 				continue;
 			}
-			WasmFunctionAnalysis funcAnalysis = state.getFunctionAnalysis(function);
+
 			try {
 				funcAnalysis.applyContext(program, cStackGlobal);
-				AddressSet funcSet = new AddressSet(func.getStartAddr(), func.getEndAddr());
+				AddressSet funcSet = new AddressSet(
+					funcAnalysis.getSignature().getStartAddr(),
+					funcAnalysis.getSignature().getEndAddr());
 				disassembler.disassemble(funcSet, funcSet, false);
 			} catch (Exception e) {
-				Msg.error(this, "Failed to analyze function " + func, e);
+				Msg.error(this, "Failed to analyze function " + function.getName(), e);
 			}
 		}
 		return true;
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmModule.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmModule.java
index ee0463326690..cb9f5cff4f91 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmModule.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmModule.java
@@ -23,7 +23,6 @@ import java.util.List;
 import java.util.Map;
 
 import ghidra.app.util.bin.BinaryReader;
-import wasm.format.WasmEnums.ValType;
 import wasm.format.WasmEnums.WasmExternalKind;
 import wasm.format.sections.WasmCodeSection;
 import wasm.format.sections.WasmCustomSection;
@@ -40,11 +39,11 @@ import wasm.format.sections.WasmSection.WasmSectionId;
 import wasm.format.sections.WasmStartSection;
 import wasm.format.sections.WasmTableSection;
 import wasm.format.sections.WasmTypeSection;
+import wasm.format.sections.structures.WasmCodeEntry;
 import wasm.format.sections.structures.WasmDataSegment;
 import wasm.format.sections.structures.WasmElementSegment;
 import wasm.format.sections.structures.WasmExportEntry;
 import wasm.format.sections.structures.WasmFuncType;
-import wasm.format.sections.structures.WasmCodeEntry;
 import wasm.format.sections.structures.WasmGlobalEntry;
 import wasm.format.sections.structures.WasmGlobalType;
 import wasm.format.sections.structures.WasmImportEntry;
@@ -238,12 +237,13 @@ public class WasmModule {
 		return getType(getFunctionSection().getTypeIdx(funcidx - imports.size()));
 	}
 
-	public ValType[] getFunctionLocals(int funcidx) {
+	public WasmCodeEntry getFunctionCode(int funcidx) {
 		List<WasmImportEntry> imports = getImports(WasmExternalKind.EXT_FUNCTION);
 		if (funcidx < imports.size()) {
 			return null;
+		} else {
+			return getNonImportedFunctions().get(funcidx - imports.size());
 		}
-		return getNonImportedFunctions().get(funcidx - imports.size()).getLocals();
 	}
 
 	public WasmGlobalType getGlobalType(int globalidx) {
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java
index 3fb1528c2b5b..963ed4d34efe 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java
@@ -21,10 +21,10 @@ import ghidra.app.util.bin.BinaryReader;
 import ghidra.app.util.bin.StructConverter;
 import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.program.model.address.Address;
+import ghidra.program.model.address.AddressFactory;
 import ghidra.program.model.data.DataType;
 import ghidra.program.model.data.Float4DataType;
 import ghidra.program.model.data.Float8DataType;
-import ghidra.program.model.listing.Program;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.WasmLoader;
 import wasm.format.StructureBuilder;
@@ -152,9 +152,9 @@ public final class ConstantExpression implements StructConverter {
 		}
 	}
 
-	public Address asAddress(Program program, WasmModule module) {
+	public Address asAddress(AddressFactory addressFactory, WasmModule module) {
 		if (type == ConstantInstruction.REF_FUNC) {
-			return WasmLoader.getFunctionAddress(program, module, (int) ((LEB128) value).asLong());
+			return WasmLoader.getFunctionAddress(addressFactory, module, (int) ((LEB128) value).asLong());
 		}
 		return null;
 	}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmCodeEntry.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmCodeEntry.java
index 5803e4214ac0..a7120e5fd014 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmCodeEntry.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmCodeEntry.java
@@ -43,8 +43,8 @@ public class WasmCodeEntry implements StructConverter {
 		for (int i = 0; i < localCount.asLong(); ++i) {
 			locals.add(new WasmLocalEntry(reader));
 		}
-		int instructionOffset = (int) reader.getPointerIndex();
-		instructions = reader.readNextByteArray((int) (codeOffset + codeSize.asLong() - instructionOffset));
+		instructions = reader.readByteArray(codeOffset, codeSize.asInt32());
+		reader.setPointerIndex(codeOffset + codeSize.asLong());
 	}
 
 	public long getCodeSize() {
@@ -77,10 +77,6 @@ public class WasmCodeEntry implements StructConverter {
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		StructureBuilder builder = new StructureBuilder("code_" + codeOffset);
 		builder.add(codeSize, "code_size");
-		builder.add(localCount, "local_count");
-		for (int i = 0; i < localCount.asLong(); i++) {
-			builder.add(locals.get(i).toDataType(), "local_" + i);
-		}
 		builder.addArray(BYTE, instructions.length, "instructions");
 		return builder.toStructure();
 	}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmElementSegment.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmElementSegment.java
index 155c91e5dd58..82870bd64fd7 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmElementSegment.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmElementSegment.java
@@ -24,8 +24,8 @@ import ghidra.app.util.bin.BinaryReader;
 import ghidra.app.util.bin.StructConverter;
 import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.program.model.address.Address;
+import ghidra.program.model.address.AddressFactory;
 import ghidra.program.model.data.DataType;
-import ghidra.program.model.listing.Program;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.WasmLoader;
 import wasm.format.StructureBuilder;
@@ -134,21 +134,21 @@ public class WasmElementSegment implements StructConverter {
 		}
 	}
 
-	public Address[] getAddresses(Program program, WasmModule module) {
+	public Address[] getAddresses(AddressFactory addressFactory, WasmModule module) {
 		int count = (int) this.count.asLong();
 		Address[] result = new Address[count];
 
 		if (funcidxs != null) {
 			for (int i = 0; i < count; i++) {
 				long funcidx = funcidxs.get(i).asLong();
-				result[i] = WasmLoader.getFunctionAddress(program, module, (int) funcidx);
+				result[i] = WasmLoader.getFunctionAddress(addressFactory, module, (int) funcidx);
 			}
 			return result;
 		}
 
 		if (exprs != null) {
 			for (int i = 0; i < count; i++) {
-				result[i] = exprs.get(i).asAddress(program, module);
+				result[i] = exprs.get(i).asAddress(addressFactory, module);
 			}
 			return result;
 		}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmGlobalEntry.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmGlobalEntry.java
index 4f5ed46bf353..d6705d61ee16 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmGlobalEntry.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmGlobalEntry.java
@@ -20,8 +20,8 @@ import java.io.IOException;
 import ghidra.app.util.bin.BinaryReader;
 import ghidra.app.util.bin.StructConverter;
 import ghidra.program.model.address.Address;
+import ghidra.program.model.address.AddressFactory;
 import ghidra.program.model.data.DataType;
-import ghidra.program.model.listing.Program;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
 import wasm.format.WasmModule;
@@ -44,8 +44,8 @@ public class WasmGlobalEntry implements StructConverter {
 		return expr.asBytes(module);
 	}
 
-	public Address asAddress(Program program, WasmModule module) {
-		return expr.asAddress(program, module);
+	public Address asAddress(AddressFactory addressFactory, WasmModule module) {
+		return expr.asAddress(addressFactory, module);
 	}
 
 	public Long asGlobalGet() {
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmEntry.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmEntry.java
index 411513f9b31e..ab2f007eb042 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmEntry.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmEntry.java
@@ -21,7 +21,7 @@ import ghidra.program.model.lang.InjectPayloadSleigh;
 import ghidra.program.model.listing.Program;
 import ghidra.program.model.pcode.PcodeOp;
 import wasm.analysis.WasmAnalysis;
-import wasm.analysis.WasmFunctionAnalysis;
+import wasm.analysis.WasmFuncSignature;
 import wasm.format.WasmEnums.ValType;
 
 /**
@@ -36,19 +36,19 @@ public class InjectPayloadWasmEntry extends InjectPayloadSleigh {
 
 	@Override
 	public PcodeOp[] getPcode(Program program, InjectContext con) {
-		PcodeOpEmitter ops = new PcodeOpEmitter(program, con.baseAddr);
+		PcodeOpEmitter ops = new PcodeOpEmitter(program.getLanguage(), con.baseAddr);
 
 		WasmAnalysis state = WasmAnalysis.getState(program);
-		WasmFunctionAnalysis funcAnalysis = state.getFunctionAnalysis(
-				program.getFunctionManager().getFunctionContaining(con.baseAddr));
-		if (funcAnalysis == null) {
+		Address funcBase = program.getFunctionManager().getFunctionContaining(con.baseAddr).getEntryPoint();
+		WasmFuncSignature sig = state.getFunctionByAddress(funcBase);
+		if (sig == null || sig.isImport()) {
 			return ops.getPcodeOps();
 		}
 
 		Address inputBase = program.getRegister("i0").getAddress();
 		Address localsBase = program.getRegister("l0").getAddress();
-		ValType[] params = funcAnalysis.getSignature().getParams();
-		ValType[] locals = funcAnalysis.getSignature().getLocals();
+		ValType[] params = sig.getParams();
+		ValType[] locals = sig.getLocals();
 		for (int i = 0; i < params.length; i++) {
 			ops.emitCopy(inputBase.add(i * 8L), localsBase.add(i * 8L), params[i].getSize());
 		}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPop.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPop.java
index f36dc9ea0b92..6c03cfedd8fc 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPop.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPop.java
@@ -26,10 +26,10 @@ import wasm.analysis.WasmFunctionAnalysis.StackEffect;
 import wasm.format.WasmEnums.ValType;
 
 /**
- * Handle variable-length pops from the stack to registers.
- * We use this to handle branches (popping block arguments to temporary registers),
- * function calls (popping function arguments to input registers),
- * and function return (popping return values to output registers).
+ * Handle variable-length pops from the stack to registers. We use this to
+ * handle branches (popping block arguments to temporary registers), function
+ * calls (popping function arguments to input registers), and function return
+ * (popping return values to output registers).
  */
 public class InjectPayloadWasmPop extends InjectPayloadCallother {
 
@@ -39,14 +39,19 @@ public class InjectPayloadWasmPop extends InjectPayloadCallother {
 
 	@Override
 	public PcodeOp[] getPcode(Program program, InjectContext con) {
-		PcodeOpEmitter ops = new PcodeOpEmitter(program, con.baseAddr);
+		PcodeOpEmitter ops = new PcodeOpEmitter(program.getLanguage(), con.baseAddr);
 
 		long regoffset = con.inputlist.get(0).getOffset();
 		Address baseAddress = program.getAddressFactory().getAddressSpace("register").getAddress(regoffset);
 
 		WasmAnalysis state = WasmAnalysis.getState(program);
-		WasmFunctionAnalysis funcAnalysis = state.getFunctionAnalysis(
-				program.getFunctionManager().getFunctionContaining(con.baseAddr));
+		WasmFunctionAnalysis funcAnalysis;
+		try {
+			funcAnalysis = state.getFunctionAnalysis(
+					program.getFunctionManager().getFunctionContaining(con.baseAddr).getEntryPoint());
+		} catch (Exception e) {
+			return ops.getPcodeOps();
+		}
 		if (funcAnalysis == null) {
 			return ops.getPcodeOps();
 		}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPush.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPush.java
index f21deadeab21..9a806783483c 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPush.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPush.java
@@ -38,14 +38,19 @@ public class InjectPayloadWasmPush extends InjectPayloadCallother {
 
 	@Override
 	public PcodeOp[] getPcode(Program program, InjectContext con) {
-		PcodeOpEmitter ops = new PcodeOpEmitter(program, con.baseAddr);
+		PcodeOpEmitter ops = new PcodeOpEmitter(program.getLanguage(), con.baseAddr);
 
 		long regoffset = con.inputlist.get(0).getOffset();
 		Address baseAddress = program.getAddressFactory().getAddressSpace("register").getAddress(regoffset);
 
 		WasmAnalysis state = WasmAnalysis.getState(program);
-		WasmFunctionAnalysis funcAnalysis = state.getFunctionAnalysis(
-				program.getFunctionManager().getFunctionContaining(con.baseAddr));
+		WasmFunctionAnalysis funcAnalysis;
+		try {
+			funcAnalysis = state.getFunctionAnalysis(
+					program.getFunctionManager().getFunctionContaining(con.baseAddr).getEntryPoint());
+		} catch (Exception e) {
+			return ops.getPcodeOps();
+		}
 		if (funcAnalysis == null) {
 			return ops.getPcodeOps();
 		}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeOpEmitter.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeOpEmitter.java
index 18c1ae5c0a38..12afd7bd95f9 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeOpEmitter.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeOpEmitter.java
@@ -19,18 +19,18 @@ import java.util.ArrayList;
 import java.util.List;
 
 import ghidra.program.model.address.Address;
+import ghidra.program.model.lang.Language;
 import ghidra.program.model.lang.Register;
-import ghidra.program.model.listing.Program;
 import ghidra.program.model.pcode.PcodeOp;
 import ghidra.program.model.pcode.Varnode;
 
 public class PcodeOpEmitter {
-	private Program program;
+	private Language language;
 	private Address baseAddress;
 	private List<PcodeOp> ops = new ArrayList<>();
 
-	public PcodeOpEmitter(Program program, Address baseAddress) {
-		this.program = program;
+	public PcodeOpEmitter(Language language, Address baseAddress) {
+		this.language = language;
 		this.baseAddress = baseAddress;
 	}
 
@@ -50,7 +50,7 @@ public class PcodeOpEmitter {
 	}
 
 	private Varnode getRegister(String name) {
-		Register register = program.getRegister(name);
+		Register register = language.getRegister(name);
 		return new Varnode(register.getAddress(), register.getBitLength() / 8);
 	}
 
-- 
2.41.0


From 3e0cc110086c9614b77537845256a52bf7560273 Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Tue, 29 Mar 2022 04:37:11 -0700
Subject: [PATCH 05/25] WebAssembly: load .module directly to 0x8000000 in RAM

This allows the whole module to be loaded in memory and eliminates the previous
duplication of the .code bytes in the .module and the .function bytes in RAM.
---
 .../src/main/java/wasm/WasmLoader.java        | 41 +++++--------------
 .../main/java/wasm/analysis/WasmAnalysis.java |  5 ++-
 .../java/wasm/analysis/WasmPreAnalyzer.java   |  4 +-
 .../wasm/format/sections/WasmCodeSection.java |  5 +--
 4 files changed, 19 insertions(+), 36 deletions(-)

diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
index 7f3fd82e6a35..e77a81ad86c7 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
@@ -61,7 +61,6 @@ import wasm.format.WasmHeader;
 import wasm.format.WasmModule;
 import wasm.format.sections.WasmNameSection;
 import wasm.format.sections.WasmSection;
-import wasm.format.sections.WasmSection.WasmSectionId;
 import wasm.format.sections.WasmUnknownCustomSection;
 import wasm.format.sections.structures.WasmCodeEntry;
 import wasm.format.sections.structures.WasmDataSegment;
@@ -77,6 +76,7 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 
 	public final static String WEBASSEMBLY = "WebAssembly";
 
+	public final static long IMPORT_BASE = 0x7f000000L;
 	public final static long CODE_BASE = 0x80000000L;
 
 	@Override
@@ -102,7 +102,7 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 	public static long getFunctionAddressOffset(WasmModule module, int funcidx) {
 		List<WasmImportEntry> imports = module.getImports(WasmExternalKind.EXT_FUNCTION);
 		if (funcidx < imports.size()) {
-			return CODE_BASE + imports.get(funcidx).getEntryOffset();
+			return IMPORT_BASE + funcidx * 4;
 		} else {
 			WasmCodeEntry codeEntry = module.getNonImportedFunctions().get(funcidx - imports.size());
 			return CODE_BASE + codeEntry.getOffset();
@@ -112,7 +112,7 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 	public static long getFunctionSize(WasmModule module, int funcidx) {
 		List<WasmImportEntry> imports = module.getImports(WasmExternalKind.EXT_FUNCTION);
 		if (funcidx < imports.size()) {
-			return imports.get(funcidx).getEntrySize();
+			return 4;
 		} else {
 			WasmCodeEntry codeEntry = module.getNonImportedFunctions().get(funcidx - imports.size());
 			return codeEntry.getCodeSize();
@@ -140,6 +140,10 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 		return addressFactory.getAddressSpace("global").getAddress(((long) globalidx) * 8);
 	}
 
+	public static Address getModuleAddress(AddressFactory addressFactory) {
+		return getCodeAddress(addressFactory, 0);
+	}
+
 	private static Address getCodeAddress(AddressFactory addressFactory, long fileOffset) {
 		return addressFactory.getAddressSpace("ram").getAddress(CODE_BASE + fileOffset);
 	}
@@ -264,11 +268,11 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 	}
 
 	private static MemoryBlock createModuleBlock(Program program, FileBytes fileBytes) throws Exception {
-		Address start = AddressSpace.OTHER_SPACE.getAddress(0L);
+		Address start = getCodeAddress(program.getAddressFactory(), 0);
 		MemoryBlock block = program.getMemory().createInitializedBlock(".module", start, fileBytes, 0, fileBytes.getSize(), false);
 		block.setRead(true);
 		block.setWrite(false);
-		block.setExecute(false);
+		block.setExecute(true);
 		block.setSourceName("Wasm Module");
 		block.setComment("The full file contents of the Wasm module");
 		return block;
@@ -286,18 +290,6 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 		}
 	}
 
-	private static void createFunctionCodeBlock(Program program, FileBytes fileBytes, long fileOffset, Address startAddress, long length) {
-		try {
-			MemoryBlock block = program.getMemory().createInitializedBlock(".function", startAddress, fileBytes, fileOffset, length, false);
-			block.setRead(true);
-			block.setWrite(false);
-			block.setExecute(true);
-			block.setSourceName("Wasm Function");
-		} catch (Exception e) {
-			Msg.error(WasmLoader.class, "Failed to create function block at " + startAddress, e);
-		}
-	}
-
 	private static void createTableBlock(Program program, DataType elementDataType, long numElements, int tableidx, TaskMonitor monitor) {
 		long byteSize = elementDataType.getLength() * numElements;
 		Address dataStart = getTableAddress(program.getAddressFactory(), tableidx, 0);
@@ -374,19 +366,8 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 		List<WasmCodeEntry> codeEntries = module.getNonImportedFunctions();
 		int numFunctions = imports.size() + codeEntries.size();
 
-		/*
-		 * Create two memory blocks to hold the imported and non-imported functions.
-		 * While it would be cleaner (in memory) to load each function into its own
-		 * block, this can cause massive slowdowns for files with many functions.
-		 */
-		WasmSection importSection = module.getSection(WasmSectionId.SEC_IMPORT);
-		if (importSection != null) {
-			createImportStubBlock(program, getCodeAddress(program.getAddressFactory(), importSection.getSectionOffset()), importSection.getSectionSize());
-		}
-		WasmSection codeSection = module.getSection(WasmSectionId.SEC_CODE);
-		if (codeSection != null) {
-			long codeOffset = codeSection.getSectionOffset();
-			createFunctionCodeBlock(program, fileBytes, codeOffset, getCodeAddress(program.getAddressFactory(), codeOffset), codeSection.getSectionSize());
+		if (imports.size() > 0) {
+			createImportStubBlock(program, getFunctionAddress(program.getAddressFactory(), module, 0), imports.size() * 4);
 		}
 
 		monitor.initialize(numFunctions);
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmAnalysis.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmAnalysis.java
index 8b074c4dc7b6..d4fbbe7831ea 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmAnalysis.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmAnalysis.java
@@ -50,7 +50,7 @@ public class WasmAnalysis implements AnalysisState {
 		WasmAnalysis analysisState = AnalysisStateInfo.getAnalysisState(program, WasmAnalysis.class);
 		if (analysisState == null) {
 			Memory mem = program.getMemory();
-			Address moduleStart = mem.getBlock(".module").getStart();
+			Address moduleStart = WasmLoader.getModuleAddress(program.getAddressFactory());
 			ByteProvider memByteProvider = new MemoryByteProvider(mem, moduleStart);
 			BinaryReader memBinaryReader = new BinaryReader(memByteProvider, true);
 			WasmModule module;
@@ -98,6 +98,9 @@ public class WasmAnalysis implements AnalysisState {
 	public synchronized WasmFunctionAnalysis getFunctionAnalysis(Address entryPoint) throws IOException {
 		if (!functionAnalyses.containsKey(entryPoint)) {
 			WasmFuncSignature func = getFunctionByAddress(entryPoint);
+			if (func == null) {
+				return null;
+			}
 			WasmCodeEntry code = module.getFunctionCode(func.getFuncIdx());
 			if (code == null) {
 				return null;
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmPreAnalyzer.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmPreAnalyzer.java
index 7dd21dabb955..10273385c854 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmPreAnalyzer.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmPreAnalyzer.java
@@ -171,7 +171,7 @@ public class WasmPreAnalyzer extends AbstractAnalyzer {
 			try {
 				funcAnalysis = state.getFunctionAnalysis(function.getEntryPoint());
 			} catch (Exception e) {
-				Msg.error(this, "Failed to analyze function " + function.getName(), e);
+				Msg.error(this, "Failed to analyze function " + function.getName() + " @ " + function.getEntryPoint(), e);
 				function.setComment("WARNING: Wasm function analysis failed, output may be incorrect: " + e);
 				continue;
 			}
@@ -186,7 +186,7 @@ public class WasmPreAnalyzer extends AbstractAnalyzer {
 					funcAnalysis.getSignature().getEndAddr());
 				disassembler.disassemble(funcSet, funcSet, false);
 			} catch (Exception e) {
-				Msg.error(this, "Failed to analyze function " + function.getName(), e);
+				Msg.error(this, "Failed to analyze function " + function.getName() + " @ " + function.getEntryPoint(), e);
 			}
 		}
 		return true;
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCodeSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCodeSection.java
index 10823223293d..4940bfcac8dd 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCodeSection.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCodeSection.java
@@ -46,9 +46,8 @@ public class WasmCodeSection extends WasmSection {
 	@Override
 	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
 		builder.add(count, "count");
-		for (int i = 0; i < functions.size(); i++) {
-			builder.add(functions.get(i), "function_" + i);
-		}
+		// Do not add individual code entries to the structure: they need to be parsed
+		// as code instead of data.
 	}
 
 	@Override
-- 
2.41.0


From 6afcf939c4c4735944c92dcb4bd83cc3e5760b0d Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Tue, 29 Mar 2022 17:53:01 -0700
Subject: [PATCH 06/25] WebAssembly: extend regs to 16 bytes to prepare for
 vector insts

Vector instructions will require 128-bit values, so prepare for that change by
widening all registers to 128 bits.
---
 .../languages/WebAssembly-pos-stack.cspec     | 2048 +++++------
 .../data/languages/WebAssembly.cspec          |    4 +-
 .../data/languages/WebAssembly.sinc           |   24 +-
 .../data/languages/WebAssembly.slaspec        | 3056 ++++++++++-------
 .../src/main/java/wasm/WasmLoader.java        |    4 +-
 .../wasm/analysis/WasmFunctionAnalysis.java   |    2 +-
 .../wasm/pcode/InjectPayloadWasmEntry.java    |    5 +-
 .../java/wasm/pcode/InjectPayloadWasmPop.java |    5 +-
 .../wasm/pcode/InjectPayloadWasmPush.java     |    5 +-
 9 files changed, 2889 insertions(+), 2264 deletions(-)

diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec
index fac7916a6d6a..11415fb0e217 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec
@@ -26,1543 +26,1543 @@
         starting at the highest addresses in any <addr> pentry, which is
         not what we want. Instead, fall back to manually specifying the
         registers in the correct order. -->
-        <pentry minsize="1" maxsize="8">
-          <register name="i0q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i0o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i1q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i1o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i2q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i2o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i3q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i3o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i4q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i4o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i5q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i5o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i6q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i6o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i7q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i7o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i8q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i8o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i9q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i9o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i10q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i10o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i11q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i11o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i12q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i12o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i13q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i13o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i14q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i14o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i15q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i15o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i16q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i16o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i17q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i17o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i18q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i18o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i19q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i19o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i20q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i20o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i21q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i21o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i22q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i22o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i23q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i23o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i24q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i24o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i25q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i25o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i26q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i26o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i27q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i27o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i28q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i28o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i29q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i29o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i30q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i30o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i31q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i31o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i32q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i32o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i33q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i33o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i34q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i34o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i35q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i35o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i36q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i36o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i37q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i37o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i38q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i38o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i39q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i39o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i40q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i40o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i41q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i41o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i42q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i42o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i43q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i43o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i44q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i44o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i45q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i45o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i46q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i46o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i47q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i47o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i48q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i48o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i49q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i49o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i50q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i50o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i51q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i51o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i52q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i52o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i53q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i53o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i54q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i54o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i55q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i55o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i56q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i56o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i57q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i57o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i58q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i58o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i59q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i59o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i60q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i60o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i61q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i61o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i62q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i62o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i63q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i63o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i64q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i64o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i65q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i65o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i66q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i66o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i67q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i67o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i68q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i68o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i69q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i69o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i70q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i70o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i71q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i71o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i72q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i72o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i73q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i73o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i74q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i74o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i75q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i75o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i76q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i76o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i77q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i77o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i78q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i78o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i79q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i79o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i80q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i80o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i81q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i81o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i82q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i82o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i83q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i83o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i84q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i84o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i85q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i85o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i86q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i86o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i87q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i87o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i88q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i88o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i89q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i89o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i90q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i90o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i91q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i91o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i92q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i92o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i93q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i93o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i94q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i94o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i95q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i95o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i96q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i96o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i97q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i97o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i98q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i98o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i99q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i99o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i100q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i100o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i101q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i101o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i102q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i102o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i103q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i103o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i104q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i104o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i105q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i105o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i106q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i106o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i107q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i107o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i108q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i108o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i109q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i109o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i110q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i110o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i111q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i111o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i112q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i112o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i113q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i113o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i114q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i114o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i115q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i115o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i116q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i116o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i117q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i117o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i118q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i118o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i119q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i119o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i120q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i120o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i121q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i121o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i122q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i122o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i123q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i123o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i124q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i124o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i125q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i125o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i126q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i126o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i127q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i127o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i128q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i128o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i129q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i129o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i130q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i130o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i131q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i131o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i132q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i132o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i133q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i133o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i134q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i134o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i135q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i135o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i136q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i136o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i137q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i137o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i138q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i138o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i139q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i139o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i140q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i140o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i141q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i141o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i142q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i142o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i143q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i143o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i144q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i144o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i145q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i145o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i146q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i146o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i147q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i147o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i148q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i148o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i149q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i149o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i150q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i150o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i151q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i151o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i152q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i152o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i153q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i153o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i154q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i154o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i155q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i155o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i156q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i156o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i157q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i157o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i158q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i158o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i159q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i159o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i160q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i160o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i161q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i161o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i162q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i162o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i163q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i163o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i164q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i164o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i165q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i165o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i166q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i166o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i167q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i167o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i168q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i168o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i169q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i169o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i170q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i170o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i171q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i171o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i172q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i172o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i173q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i173o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i174q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i174o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i175q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i175o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i176q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i176o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i177q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i177o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i178q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i178o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i179q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i179o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i180q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i180o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i181q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i181o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i182q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i182o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i183q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i183o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i184q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i184o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i185q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i185o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i186q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i186o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i187q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i187o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i188q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i188o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i189q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i189o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i190q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i190o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i191q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i191o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i192q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i192o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i193q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i193o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i194q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i194o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i195q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i195o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i196q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i196o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i197q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i197o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i198q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i198o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i199q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i199o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i200q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i200o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i201q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i201o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i202q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i202o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i203q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i203o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i204q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i204o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i205q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i205o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i206q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i206o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i207q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i207o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i208q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i208o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i209q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i209o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i210q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i210o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i211q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i211o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i212q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i212o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i213q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i213o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i214q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i214o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i215q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i215o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i216q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i216o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i217q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i217o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i218q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i218o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i219q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i219o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i220q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i220o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i221q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i221o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i222q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i222o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i223q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i223o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i224q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i224o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i225q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i225o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i226q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i226o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i227q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i227o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i228q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i228o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i229q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i229o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i230q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i230o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i231q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i231o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i232q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i232o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i233q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i233o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i234q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i234o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i235q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i235o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i236q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i236o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i237q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i237o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i238q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i238o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i239q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i239o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i240q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i240o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i241q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i241o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i242q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i242o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i243q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i243o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i244q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i244o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i245q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i245o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i246q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i246o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i247q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i247o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i248q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i248o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i249q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i249o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i250q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i250o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i251q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i251o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i252q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i252o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i253q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i253o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i254q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i254o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="i255q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="i255o"/>
         </pentry>
       </input>
       <output>
-        <pentry minsize="1" maxsize="8">
-          <register name="o0q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o0o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o1q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o1o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o2q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o2o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o3q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o3o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o4q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o4o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o5q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o5o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o6q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o6o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o7q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o7o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o8q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o8o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o9q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o9o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o10q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o10o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o11q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o11o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o12q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o12o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o13q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o13o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o14q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o14o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o15q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o15o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o16q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o16o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o17q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o17o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o18q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o18o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o19q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o19o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o20q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o20o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o21q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o21o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o22q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o22o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o23q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o23o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o24q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o24o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o25q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o25o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o26q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o26o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o27q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o27o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o28q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o28o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o29q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o29o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o30q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o30o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o31q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o31o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o32q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o32o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o33q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o33o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o34q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o34o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o35q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o35o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o36q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o36o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o37q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o37o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o38q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o38o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o39q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o39o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o40q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o40o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o41q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o41o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o42q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o42o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o43q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o43o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o44q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o44o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o45q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o45o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o46q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o46o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o47q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o47o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o48q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o48o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o49q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o49o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o50q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o50o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o51q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o51o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o52q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o52o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o53q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o53o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o54q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o54o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o55q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o55o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o56q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o56o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o57q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o57o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o58q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o58o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o59q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o59o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o60q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o60o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o61q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o61o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o62q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o62o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o63q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o63o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o64q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o64o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o65q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o65o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o66q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o66o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o67q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o67o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o68q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o68o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o69q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o69o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o70q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o70o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o71q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o71o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o72q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o72o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o73q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o73o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o74q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o74o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o75q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o75o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o76q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o76o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o77q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o77o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o78q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o78o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o79q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o79o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o80q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o80o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o81q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o81o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o82q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o82o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o83q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o83o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o84q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o84o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o85q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o85o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o86q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o86o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o87q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o87o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o88q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o88o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o89q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o89o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o90q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o90o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o91q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o91o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o92q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o92o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o93q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o93o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o94q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o94o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o95q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o95o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o96q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o96o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o97q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o97o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o98q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o98o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o99q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o99o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o100q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o100o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o101q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o101o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o102q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o102o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o103q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o103o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o104q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o104o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o105q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o105o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o106q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o106o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o107q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o107o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o108q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o108o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o109q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o109o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o110q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o110o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o111q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o111o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o112q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o112o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o113q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o113o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o114q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o114o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o115q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o115o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o116q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o116o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o117q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o117o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o118q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o118o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o119q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o119o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o120q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o120o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o121q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o121o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o122q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o122o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o123q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o123o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o124q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o124o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o125q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o125o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o126q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o126o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o127q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o127o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o128q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o128o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o129q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o129o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o130q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o130o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o131q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o131o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o132q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o132o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o133q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o133o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o134q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o134o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o135q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o135o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o136q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o136o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o137q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o137o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o138q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o138o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o139q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o139o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o140q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o140o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o141q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o141o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o142q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o142o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o143q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o143o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o144q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o144o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o145q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o145o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o146q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o146o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o147q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o147o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o148q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o148o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o149q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o149o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o150q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o150o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o151q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o151o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o152q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o152o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o153q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o153o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o154q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o154o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o155q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o155o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o156q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o156o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o157q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o157o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o158q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o158o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o159q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o159o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o160q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o160o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o161q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o161o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o162q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o162o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o163q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o163o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o164q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o164o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o165q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o165o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o166q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o166o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o167q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o167o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o168q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o168o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o169q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o169o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o170q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o170o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o171q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o171o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o172q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o172o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o173q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o173o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o174q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o174o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o175q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o175o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o176q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o176o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o177q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o177o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o178q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o178o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o179q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o179o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o180q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o180o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o181q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o181o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o182q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o182o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o183q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o183o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o184q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o184o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o185q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o185o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o186q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o186o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o187q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o187o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o188q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o188o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o189q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o189o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o190q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o190o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o191q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o191o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o192q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o192o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o193q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o193o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o194q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o194o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o195q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o195o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o196q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o196o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o197q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o197o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o198q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o198o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o199q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o199o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o200q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o200o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o201q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o201o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o202q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o202o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o203q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o203o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o204q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o204o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o205q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o205o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o206q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o206o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o207q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o207o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o208q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o208o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o209q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o209o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o210q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o210o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o211q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o211o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o212q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o212o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o213q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o213o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o214q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o214o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o215q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o215o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o216q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o216o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o217q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o217o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o218q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o218o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o219q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o219o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o220q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o220o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o221q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o221o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o222q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o222o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o223q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o223o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o224q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o224o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o225q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o225o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o226q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o226o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o227q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o227o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o228q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o228o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o229q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o229o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o230q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o230o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o231q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o231o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o232q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o232o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o233q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o233o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o234q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o234o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o235q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o235o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o236q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o236o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o237q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o237o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o238q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o238o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o239q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o239o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o240q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o240o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o241q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o241o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o242q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o242o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o243q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o243o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o244q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o244o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o245q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o245o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o246q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o246o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o247q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o247o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o248q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o248o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o249q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o249o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o250q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o250o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o251q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o251o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o252q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o252o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o253q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o253o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o254q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o254o"/>
         </pentry>
-        <pentry minsize="1" maxsize="8">
-          <register name="o255q"/>
+        <pentry minsize="1" maxsize="16">
+          <register name="o255o"/>
         </pentry>
       </output>
       <unaffected>
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.cspec b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.cspec
index fe7c64e2f962..86b6abff353e 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.cspec
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.cspec
@@ -22,12 +22,12 @@
   <default_proto>
     <prototype name="__wasm" extrapop="0" stackshift="0">
       <input>
-        <pentry minsize="1" maxsize="500" align="8">
+        <pentry minsize="1" maxsize="500" align="16">
           <addr offset="0x20000000" space="register"/>
         </pentry>
       </input>
       <output>
-        <pentry minsize="1" maxsize="500" align="8">
+        <pentry minsize="1" maxsize="500" align="16">
           <addr offset="0x30000000" space="register"/>
         </pentry>
       </output>
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc
index cd1aeab4cf73..762bbbf111bc 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc
@@ -55,22 +55,22 @@ define pcodeop memory_fill;
 # This is a silly hack because I couldn't work out how to use Leb128 itself
 # in the disassembly actions section of another constructor...
 @define SYMBOL local4
-@define DEST_EXPR "0x10000000 + 8 * "
+@define DEST_EXPR "0x10000000 + 16 * "
 @define EXPORT_EXPR "export *[register]:4 dest;"
 @include "Leb128_u32.sinc"
 
 @define SYMBOL local8
-@define DEST_EXPR "0x10000000 + 8 * "
+@define DEST_EXPR "0x10000000 + 16 * "
 @define EXPORT_EXPR "export *[register]:8 dest;"
 @include "Leb128_u32.sinc"
 
 @define SYMBOL global4
-@define DEST_EXPR "8 * "
+@define DEST_EXPR "16 * "
 @define EXPORT_EXPR "export *[global]:4 dest;"
 @include "Leb128_u32.sinc"
 
 @define SYMBOL global8
-@define DEST_EXPR "8 * "
+@define DEST_EXPR "16 * "
 @define EXPORT_EXPR "export *[global]:8 dest;"
 @include "Leb128_u32.sinc"
 
@@ -79,35 +79,35 @@ define pcodeop memory_fill;
 @define EXPORT_EXPR "export *[table]:4 dest;"
 @include "Leb128_u32.sinc"
 
-sp0_32: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + ctx_sp - 0;] {
+sp0_32: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 0) * $(REG_SIZE);] {
 	export *[register]:4 tmp_sp;
 }
 
-sp0_64: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + ctx_sp - 0;] {
+sp0_64: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 0) * $(REG_SIZE);] {
 	export *[register]:8 tmp_sp;
 }
 
-sp1_32: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + ctx_sp - 8;] {
+sp1_32: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 1) * $(REG_SIZE);] {
 	export *[register]:4 tmp_sp;
 }
 
-sp1_64: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + ctx_sp - 8;] {
+sp1_64: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 1) * $(REG_SIZE);] {
 	export *[register]:8 tmp_sp;
 }
 
-sp2_32: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + ctx_sp - 16;] {
+sp2_32: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 2) * $(REG_SIZE);] {
 	export *[register]:4 tmp_sp;
 }
 
-sp2_64: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + ctx_sp - 16;] {
+sp2_64: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 2) * $(REG_SIZE);] {
 	export *[register]:8 tmp_sp;
 }
 
-sp3_32: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + ctx_sp - 24;] {
+sp3_32: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 3) * $(REG_SIZE);] {
 	export *[register]:4 tmp_sp;
 }
 
-sp3_64: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + ctx_sp - 24;] {
+sp3_64: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 3) * $(REG_SIZE);] {
 	export *[register]:8 tmp_sp;
 }
 
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.slaspec b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.slaspec
index 61875e26f085..ed7b09890a2e 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.slaspec
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.slaspec
@@ -1,5 +1,8 @@
 # sleigh specification file for WebAssembly Processor
 
+# support 128-bit registers for SSE
+@define REG_SIZE 16
+
 define endian=little;
 define alignment=1;
 
@@ -13,1247 +16,1864 @@ define register offset=0 size=4 [ _  PC SP LR BRTableInput];
 # Define context bits (if defined, size must be multiple of 4-bytes)
 define register offset=0x1000 size=16   contextreg;
 
-# Stack slots within a function
+# Wasm stack within a function
+define register offset=0x50000000 size=16 [
+      s0o   s1o   s2o   s3o   s4o   s5o   s6o   s7o
+      s8o   s9o  s10o  s11o  s12o  s13o  s14o  s15o
+     s16o  s17o  s18o  s19o  s20o  s21o  s22o  s23o
+     s24o  s25o  s26o  s27o  s28o  s29o  s30o  s31o
+     s32o  s33o  s34o  s35o  s36o  s37o  s38o  s39o
+     s40o  s41o  s42o  s43o  s44o  s45o  s46o  s47o
+     s48o  s49o  s50o  s51o  s52o  s53o  s54o  s55o
+     s56o  s57o  s58o  s59o  s60o  s61o  s62o  s63o
+     s64o  s65o  s66o  s67o  s68o  s69o  s70o  s71o
+     s72o  s73o  s74o  s75o  s76o  s77o  s78o  s79o
+     s80o  s81o  s82o  s83o  s84o  s85o  s86o  s87o
+     s88o  s89o  s90o  s91o  s92o  s93o  s94o  s95o
+     s96o  s97o  s98o  s99o s100o s101o s102o s103o
+    s104o s105o s106o s107o s108o s109o s110o s111o
+    s112o s113o s114o s115o s116o s117o s118o s119o
+    s120o s121o s122o s123o s124o s125o s126o s127o
+    s128o s129o s130o s131o s132o s133o s134o s135o
+    s136o s137o s138o s139o s140o s141o s142o s143o
+    s144o s145o s146o s147o s148o s149o s150o s151o
+    s152o s153o s154o s155o s156o s157o s158o s159o
+    s160o s161o s162o s163o s164o s165o s166o s167o
+    s168o s169o s170o s171o s172o s173o s174o s175o
+    s176o s177o s178o s179o s180o s181o s182o s183o
+    s184o s185o s186o s187o s188o s189o s190o s191o
+    s192o s193o s194o s195o s196o s197o s198o s199o
+    s200o s201o s202o s203o s204o s205o s206o s207o
+    s208o s209o s210o s211o s212o s213o s214o s215o
+    s216o s217o s218o s219o s220o s221o s222o s223o
+    s224o s225o s226o s227o s228o s229o s230o s231o
+    s232o s233o s234o s235o s236o s237o s238o s239o
+    s240o s241o s242o s243o s244o s245o s246o s247o
+    s248o s249o s250o s251o s252o s253o s254o s255o
+];
 define register offset=0x50000000 size=8 [
-      s0q   s1q   s2q   s3q   s4q   s5q   s6q   s7q
-      s8q   s9q  s10q  s11q  s12q  s13q  s14q  s15q
-     s16q  s17q  s18q  s19q  s20q  s21q  s22q  s23q
-     s24q  s25q  s26q  s27q  s28q  s29q  s30q  s31q
-     s32q  s33q  s34q  s35q  s36q  s37q  s38q  s39q
-     s40q  s41q  s42q  s43q  s44q  s45q  s46q  s47q
-     s48q  s49q  s50q  s51q  s52q  s53q  s54q  s55q
-     s56q  s57q  s58q  s59q  s60q  s61q  s62q  s63q
-     s64q  s65q  s66q  s67q  s68q  s69q  s70q  s71q
-     s72q  s73q  s74q  s75q  s76q  s77q  s78q  s79q
-     s80q  s81q  s82q  s83q  s84q  s85q  s86q  s87q
-     s88q  s89q  s90q  s91q  s92q  s93q  s94q  s95q
-     s96q  s97q  s98q  s99q s100q s101q s102q s103q
-    s104q s105q s106q s107q s108q s109q s110q s111q
-    s112q s113q s114q s115q s116q s117q s118q s119q
-    s120q s121q s122q s123q s124q s125q s126q s127q
-    s128q s129q s130q s131q s132q s133q s134q s135q
-    s136q s137q s138q s139q s140q s141q s142q s143q
-    s144q s145q s146q s147q s148q s149q s150q s151q
-    s152q s153q s154q s155q s156q s157q s158q s159q
-    s160q s161q s162q s163q s164q s165q s166q s167q
-    s168q s169q s170q s171q s172q s173q s174q s175q
-    s176q s177q s178q s179q s180q s181q s182q s183q
-    s184q s185q s186q s187q s188q s189q s190q s191q
-    s192q s193q s194q s195q s196q s197q s198q s199q
-    s200q s201q s202q s203q s204q s205q s206q s207q
-    s208q s209q s210q s211q s212q s213q s214q s215q
-    s216q s217q s218q s219q s220q s221q s222q s223q
-    s224q s225q s226q s227q s228q s229q s230q s231q
-    s232q s233q s234q s235q s236q s237q s238q s239q
-    s240q s241q s242q s243q s244q s245q s246q s247q
-    s248q s249q s250q s251q s252q s253q s254q s255q
+      s0q _   s1q _   s2q _   s3q _   s4q _   s5q _   s6q _   s7q _
+      s8q _   s9q _  s10q _  s11q _  s12q _  s13q _  s14q _  s15q _
+     s16q _  s17q _  s18q _  s19q _  s20q _  s21q _  s22q _  s23q _
+     s24q _  s25q _  s26q _  s27q _  s28q _  s29q _  s30q _  s31q _
+     s32q _  s33q _  s34q _  s35q _  s36q _  s37q _  s38q _  s39q _
+     s40q _  s41q _  s42q _  s43q _  s44q _  s45q _  s46q _  s47q _
+     s48q _  s49q _  s50q _  s51q _  s52q _  s53q _  s54q _  s55q _
+     s56q _  s57q _  s58q _  s59q _  s60q _  s61q _  s62q _  s63q _
+     s64q _  s65q _  s66q _  s67q _  s68q _  s69q _  s70q _  s71q _
+     s72q _  s73q _  s74q _  s75q _  s76q _  s77q _  s78q _  s79q _
+     s80q _  s81q _  s82q _  s83q _  s84q _  s85q _  s86q _  s87q _
+     s88q _  s89q _  s90q _  s91q _  s92q _  s93q _  s94q _  s95q _
+     s96q _  s97q _  s98q _  s99q _ s100q _ s101q _ s102q _ s103q _
+    s104q _ s105q _ s106q _ s107q _ s108q _ s109q _ s110q _ s111q _
+    s112q _ s113q _ s114q _ s115q _ s116q _ s117q _ s118q _ s119q _
+    s120q _ s121q _ s122q _ s123q _ s124q _ s125q _ s126q _ s127q _
+    s128q _ s129q _ s130q _ s131q _ s132q _ s133q _ s134q _ s135q _
+    s136q _ s137q _ s138q _ s139q _ s140q _ s141q _ s142q _ s143q _
+    s144q _ s145q _ s146q _ s147q _ s148q _ s149q _ s150q _ s151q _
+    s152q _ s153q _ s154q _ s155q _ s156q _ s157q _ s158q _ s159q _
+    s160q _ s161q _ s162q _ s163q _ s164q _ s165q _ s166q _ s167q _
+    s168q _ s169q _ s170q _ s171q _ s172q _ s173q _ s174q _ s175q _
+    s176q _ s177q _ s178q _ s179q _ s180q _ s181q _ s182q _ s183q _
+    s184q _ s185q _ s186q _ s187q _ s188q _ s189q _ s190q _ s191q _
+    s192q _ s193q _ s194q _ s195q _ s196q _ s197q _ s198q _ s199q _
+    s200q _ s201q _ s202q _ s203q _ s204q _ s205q _ s206q _ s207q _
+    s208q _ s209q _ s210q _ s211q _ s212q _ s213q _ s214q _ s215q _
+    s216q _ s217q _ s218q _ s219q _ s220q _ s221q _ s222q _ s223q _
+    s224q _ s225q _ s226q _ s227q _ s228q _ s229q _ s230q _ s231q _
+    s232q _ s233q _ s234q _ s235q _ s236q _ s237q _ s238q _ s239q _
+    s240q _ s241q _ s242q _ s243q _ s244q _ s245q _ s246q _ s247q _
+    s248q _ s249q _ s250q _ s251q _ s252q _ s253q _ s254q _ s255q _
 ];
 define register offset=0x50000000 size=4 [
-      s0 _   s1 _   s2 _   s3 _   s4 _   s5 _   s6 _   s7 _
-      s8 _   s9 _  s10 _  s11 _  s12 _  s13 _  s14 _  s15 _
-     s16 _  s17 _  s18 _  s19 _  s20 _  s21 _  s22 _  s23 _
-     s24 _  s25 _  s26 _  s27 _  s28 _  s29 _  s30 _  s31 _
-     s32 _  s33 _  s34 _  s35 _  s36 _  s37 _  s38 _  s39 _
-     s40 _  s41 _  s42 _  s43 _  s44 _  s45 _  s46 _  s47 _
-     s48 _  s49 _  s50 _  s51 _  s52 _  s53 _  s54 _  s55 _
-     s56 _  s57 _  s58 _  s59 _  s60 _  s61 _  s62 _  s63 _
-     s64 _  s65 _  s66 _  s67 _  s68 _  s69 _  s70 _  s71 _
-     s72 _  s73 _  s74 _  s75 _  s76 _  s77 _  s78 _  s79 _
-     s80 _  s81 _  s82 _  s83 _  s84 _  s85 _  s86 _  s87 _
-     s88 _  s89 _  s90 _  s91 _  s92 _  s93 _  s94 _  s95 _
-     s96 _  s97 _  s98 _  s99 _ s100 _ s101 _ s102 _ s103 _
-    s104 _ s105 _ s106 _ s107 _ s108 _ s109 _ s110 _ s111 _
-    s112 _ s113 _ s114 _ s115 _ s116 _ s117 _ s118 _ s119 _
-    s120 _ s121 _ s122 _ s123 _ s124 _ s125 _ s126 _ s127 _
-    s128 _ s129 _ s130 _ s131 _ s132 _ s133 _ s134 _ s135 _
-    s136 _ s137 _ s138 _ s139 _ s140 _ s141 _ s142 _ s143 _
-    s144 _ s145 _ s146 _ s147 _ s148 _ s149 _ s150 _ s151 _
-    s152 _ s153 _ s154 _ s155 _ s156 _ s157 _ s158 _ s159 _
-    s160 _ s161 _ s162 _ s163 _ s164 _ s165 _ s166 _ s167 _
-    s168 _ s169 _ s170 _ s171 _ s172 _ s173 _ s174 _ s175 _
-    s176 _ s177 _ s178 _ s179 _ s180 _ s181 _ s182 _ s183 _
-    s184 _ s185 _ s186 _ s187 _ s188 _ s189 _ s190 _ s191 _
-    s192 _ s193 _ s194 _ s195 _ s196 _ s197 _ s198 _ s199 _
-    s200 _ s201 _ s202 _ s203 _ s204 _ s205 _ s206 _ s207 _
-    s208 _ s209 _ s210 _ s211 _ s212 _ s213 _ s214 _ s215 _
-    s216 _ s217 _ s218 _ s219 _ s220 _ s221 _ s222 _ s223 _
-    s224 _ s225 _ s226 _ s227 _ s228 _ s229 _ s230 _ s231 _
-    s232 _ s233 _ s234 _ s235 _ s236 _ s237 _ s238 _ s239 _
-    s240 _ s241 _ s242 _ s243 _ s244 _ s245 _ s246 _ s247 _
-    s248 _ s249 _ s250 _ s251 _ s252 _ s253 _ s254 _ s255 _
+      s0 _ _ _   s1 _ _ _   s2 _ _ _   s3 _ _ _   s4 _ _ _   s5 _ _ _   s6 _ _ _   s7 _ _ _
+      s8 _ _ _   s9 _ _ _  s10 _ _ _  s11 _ _ _  s12 _ _ _  s13 _ _ _  s14 _ _ _  s15 _ _ _
+     s16 _ _ _  s17 _ _ _  s18 _ _ _  s19 _ _ _  s20 _ _ _  s21 _ _ _  s22 _ _ _  s23 _ _ _
+     s24 _ _ _  s25 _ _ _  s26 _ _ _  s27 _ _ _  s28 _ _ _  s29 _ _ _  s30 _ _ _  s31 _ _ _
+     s32 _ _ _  s33 _ _ _  s34 _ _ _  s35 _ _ _  s36 _ _ _  s37 _ _ _  s38 _ _ _  s39 _ _ _
+     s40 _ _ _  s41 _ _ _  s42 _ _ _  s43 _ _ _  s44 _ _ _  s45 _ _ _  s46 _ _ _  s47 _ _ _
+     s48 _ _ _  s49 _ _ _  s50 _ _ _  s51 _ _ _  s52 _ _ _  s53 _ _ _  s54 _ _ _  s55 _ _ _
+     s56 _ _ _  s57 _ _ _  s58 _ _ _  s59 _ _ _  s60 _ _ _  s61 _ _ _  s62 _ _ _  s63 _ _ _
+     s64 _ _ _  s65 _ _ _  s66 _ _ _  s67 _ _ _  s68 _ _ _  s69 _ _ _  s70 _ _ _  s71 _ _ _
+     s72 _ _ _  s73 _ _ _  s74 _ _ _  s75 _ _ _  s76 _ _ _  s77 _ _ _  s78 _ _ _  s79 _ _ _
+     s80 _ _ _  s81 _ _ _  s82 _ _ _  s83 _ _ _  s84 _ _ _  s85 _ _ _  s86 _ _ _  s87 _ _ _
+     s88 _ _ _  s89 _ _ _  s90 _ _ _  s91 _ _ _  s92 _ _ _  s93 _ _ _  s94 _ _ _  s95 _ _ _
+     s96 _ _ _  s97 _ _ _  s98 _ _ _  s99 _ _ _ s100 _ _ _ s101 _ _ _ s102 _ _ _ s103 _ _ _
+    s104 _ _ _ s105 _ _ _ s106 _ _ _ s107 _ _ _ s108 _ _ _ s109 _ _ _ s110 _ _ _ s111 _ _ _
+    s112 _ _ _ s113 _ _ _ s114 _ _ _ s115 _ _ _ s116 _ _ _ s117 _ _ _ s118 _ _ _ s119 _ _ _
+    s120 _ _ _ s121 _ _ _ s122 _ _ _ s123 _ _ _ s124 _ _ _ s125 _ _ _ s126 _ _ _ s127 _ _ _
+    s128 _ _ _ s129 _ _ _ s130 _ _ _ s131 _ _ _ s132 _ _ _ s133 _ _ _ s134 _ _ _ s135 _ _ _
+    s136 _ _ _ s137 _ _ _ s138 _ _ _ s139 _ _ _ s140 _ _ _ s141 _ _ _ s142 _ _ _ s143 _ _ _
+    s144 _ _ _ s145 _ _ _ s146 _ _ _ s147 _ _ _ s148 _ _ _ s149 _ _ _ s150 _ _ _ s151 _ _ _
+    s152 _ _ _ s153 _ _ _ s154 _ _ _ s155 _ _ _ s156 _ _ _ s157 _ _ _ s158 _ _ _ s159 _ _ _
+    s160 _ _ _ s161 _ _ _ s162 _ _ _ s163 _ _ _ s164 _ _ _ s165 _ _ _ s166 _ _ _ s167 _ _ _
+    s168 _ _ _ s169 _ _ _ s170 _ _ _ s171 _ _ _ s172 _ _ _ s173 _ _ _ s174 _ _ _ s175 _ _ _
+    s176 _ _ _ s177 _ _ _ s178 _ _ _ s179 _ _ _ s180 _ _ _ s181 _ _ _ s182 _ _ _ s183 _ _ _
+    s184 _ _ _ s185 _ _ _ s186 _ _ _ s187 _ _ _ s188 _ _ _ s189 _ _ _ s190 _ _ _ s191 _ _ _
+    s192 _ _ _ s193 _ _ _ s194 _ _ _ s195 _ _ _ s196 _ _ _ s197 _ _ _ s198 _ _ _ s199 _ _ _
+    s200 _ _ _ s201 _ _ _ s202 _ _ _ s203 _ _ _ s204 _ _ _ s205 _ _ _ s206 _ _ _ s207 _ _ _
+    s208 _ _ _ s209 _ _ _ s210 _ _ _ s211 _ _ _ s212 _ _ _ s213 _ _ _ s214 _ _ _ s215 _ _ _
+    s216 _ _ _ s217 _ _ _ s218 _ _ _ s219 _ _ _ s220 _ _ _ s221 _ _ _ s222 _ _ _ s223 _ _ _
+    s224 _ _ _ s225 _ _ _ s226 _ _ _ s227 _ _ _ s228 _ _ _ s229 _ _ _ s230 _ _ _ s231 _ _ _
+    s232 _ _ _ s233 _ _ _ s234 _ _ _ s235 _ _ _ s236 _ _ _ s237 _ _ _ s238 _ _ _ s239 _ _ _
+    s240 _ _ _ s241 _ _ _ s242 _ _ _ s243 _ _ _ s244 _ _ _ s245 _ _ _ s246 _ _ _ s247 _ _ _
+    s248 _ _ _ s249 _ _ _ s250 _ _ _ s251 _ _ _ s252 _ _ _ s253 _ _ _ s254 _ _ _ s255 _ _ _
 ];
 
+# Locals within a function
+define register offset=0x10000000 size=16 [
+       l0o    l1o    l2o    l3o    l4o    l5o    l6o    l7o
+       l8o    l9o   l10o   l11o   l12o   l13o   l14o   l15o
+      l16o   l17o   l18o   l19o   l20o   l21o   l22o   l23o
+      l24o   l25o   l26o   l27o   l28o   l29o   l30o   l31o
+      l32o   l33o   l34o   l35o   l36o   l37o   l38o   l39o
+      l40o   l41o   l42o   l43o   l44o   l45o   l46o   l47o
+      l48o   l49o   l50o   l51o   l52o   l53o   l54o   l55o
+      l56o   l57o   l58o   l59o   l60o   l61o   l62o   l63o
+      l64o   l65o   l66o   l67o   l68o   l69o   l70o   l71o
+      l72o   l73o   l74o   l75o   l76o   l77o   l78o   l79o
+      l80o   l81o   l82o   l83o   l84o   l85o   l86o   l87o
+      l88o   l89o   l90o   l91o   l92o   l93o   l94o   l95o
+      l96o   l97o   l98o   l99o  l100o  l101o  l102o  l103o
+     l104o  l105o  l106o  l107o  l108o  l109o  l110o  l111o
+     l112o  l113o  l114o  l115o  l116o  l117o  l118o  l119o
+     l120o  l121o  l122o  l123o  l124o  l125o  l126o  l127o
+     l128o  l129o  l130o  l131o  l132o  l133o  l134o  l135o
+     l136o  l137o  l138o  l139o  l140o  l141o  l142o  l143o
+     l144o  l145o  l146o  l147o  l148o  l149o  l150o  l151o
+     l152o  l153o  l154o  l155o  l156o  l157o  l158o  l159o
+     l160o  l161o  l162o  l163o  l164o  l165o  l166o  l167o
+     l168o  l169o  l170o  l171o  l172o  l173o  l174o  l175o
+     l176o  l177o  l178o  l179o  l180o  l181o  l182o  l183o
+     l184o  l185o  l186o  l187o  l188o  l189o  l190o  l191o
+     l192o  l193o  l194o  l195o  l196o  l197o  l198o  l199o
+     l200o  l201o  l202o  l203o  l204o  l205o  l206o  l207o
+     l208o  l209o  l210o  l211o  l212o  l213o  l214o  l215o
+     l216o  l217o  l218o  l219o  l220o  l221o  l222o  l223o
+     l224o  l225o  l226o  l227o  l228o  l229o  l230o  l231o
+     l232o  l233o  l234o  l235o  l236o  l237o  l238o  l239o
+     l240o  l241o  l242o  l243o  l244o  l245o  l246o  l247o
+     l248o  l249o  l250o  l251o  l252o  l253o  l254o  l255o
+     l256o  l257o  l258o  l259o  l260o  l261o  l262o  l263o
+     l264o  l265o  l266o  l267o  l268o  l269o  l270o  l271o
+     l272o  l273o  l274o  l275o  l276o  l277o  l278o  l279o
+     l280o  l281o  l282o  l283o  l284o  l285o  l286o  l287o
+     l288o  l289o  l290o  l291o  l292o  l293o  l294o  l295o
+     l296o  l297o  l298o  l299o  l300o  l301o  l302o  l303o
+     l304o  l305o  l306o  l307o  l308o  l309o  l310o  l311o
+     l312o  l313o  l314o  l315o  l316o  l317o  l318o  l319o
+     l320o  l321o  l322o  l323o  l324o  l325o  l326o  l327o
+     l328o  l329o  l330o  l331o  l332o  l333o  l334o  l335o
+     l336o  l337o  l338o  l339o  l340o  l341o  l342o  l343o
+     l344o  l345o  l346o  l347o  l348o  l349o  l350o  l351o
+     l352o  l353o  l354o  l355o  l356o  l357o  l358o  l359o
+     l360o  l361o  l362o  l363o  l364o  l365o  l366o  l367o
+     l368o  l369o  l370o  l371o  l372o  l373o  l374o  l375o
+     l376o  l377o  l378o  l379o  l380o  l381o  l382o  l383o
+     l384o  l385o  l386o  l387o  l388o  l389o  l390o  l391o
+     l392o  l393o  l394o  l395o  l396o  l397o  l398o  l399o
+     l400o  l401o  l402o  l403o  l404o  l405o  l406o  l407o
+     l408o  l409o  l410o  l411o  l412o  l413o  l414o  l415o
+     l416o  l417o  l418o  l419o  l420o  l421o  l422o  l423o
+     l424o  l425o  l426o  l427o  l428o  l429o  l430o  l431o
+     l432o  l433o  l434o  l435o  l436o  l437o  l438o  l439o
+     l440o  l441o  l442o  l443o  l444o  l445o  l446o  l447o
+     l448o  l449o  l450o  l451o  l452o  l453o  l454o  l455o
+     l456o  l457o  l458o  l459o  l460o  l461o  l462o  l463o
+     l464o  l465o  l466o  l467o  l468o  l469o  l470o  l471o
+     l472o  l473o  l474o  l475o  l476o  l477o  l478o  l479o
+     l480o  l481o  l482o  l483o  l484o  l485o  l486o  l487o
+     l488o  l489o  l490o  l491o  l492o  l493o  l494o  l495o
+     l496o  l497o  l498o  l499o  l500o  l501o  l502o  l503o
+     l504o  l505o  l506o  l507o  l508o  l509o  l510o  l511o
+     l512o  l513o  l514o  l515o  l516o  l517o  l518o  l519o
+     l520o  l521o  l522o  l523o  l524o  l525o  l526o  l527o
+     l528o  l529o  l530o  l531o  l532o  l533o  l534o  l535o
+     l536o  l537o  l538o  l539o  l540o  l541o  l542o  l543o
+     l544o  l545o  l546o  l547o  l548o  l549o  l550o  l551o
+     l552o  l553o  l554o  l555o  l556o  l557o  l558o  l559o
+     l560o  l561o  l562o  l563o  l564o  l565o  l566o  l567o
+     l568o  l569o  l570o  l571o  l572o  l573o  l574o  l575o
+     l576o  l577o  l578o  l579o  l580o  l581o  l582o  l583o
+     l584o  l585o  l586o  l587o  l588o  l589o  l590o  l591o
+     l592o  l593o  l594o  l595o  l596o  l597o  l598o  l599o
+     l600o  l601o  l602o  l603o  l604o  l605o  l606o  l607o
+     l608o  l609o  l610o  l611o  l612o  l613o  l614o  l615o
+     l616o  l617o  l618o  l619o  l620o  l621o  l622o  l623o
+     l624o  l625o  l626o  l627o  l628o  l629o  l630o  l631o
+     l632o  l633o  l634o  l635o  l636o  l637o  l638o  l639o
+     l640o  l641o  l642o  l643o  l644o  l645o  l646o  l647o
+     l648o  l649o  l650o  l651o  l652o  l653o  l654o  l655o
+     l656o  l657o  l658o  l659o  l660o  l661o  l662o  l663o
+     l664o  l665o  l666o  l667o  l668o  l669o  l670o  l671o
+     l672o  l673o  l674o  l675o  l676o  l677o  l678o  l679o
+     l680o  l681o  l682o  l683o  l684o  l685o  l686o  l687o
+     l688o  l689o  l690o  l691o  l692o  l693o  l694o  l695o
+     l696o  l697o  l698o  l699o  l700o  l701o  l702o  l703o
+     l704o  l705o  l706o  l707o  l708o  l709o  l710o  l711o
+     l712o  l713o  l714o  l715o  l716o  l717o  l718o  l719o
+     l720o  l721o  l722o  l723o  l724o  l725o  l726o  l727o
+     l728o  l729o  l730o  l731o  l732o  l733o  l734o  l735o
+     l736o  l737o  l738o  l739o  l740o  l741o  l742o  l743o
+     l744o  l745o  l746o  l747o  l748o  l749o  l750o  l751o
+     l752o  l753o  l754o  l755o  l756o  l757o  l758o  l759o
+     l760o  l761o  l762o  l763o  l764o  l765o  l766o  l767o
+     l768o  l769o  l770o  l771o  l772o  l773o  l774o  l775o
+     l776o  l777o  l778o  l779o  l780o  l781o  l782o  l783o
+     l784o  l785o  l786o  l787o  l788o  l789o  l790o  l791o
+     l792o  l793o  l794o  l795o  l796o  l797o  l798o  l799o
+     l800o  l801o  l802o  l803o  l804o  l805o  l806o  l807o
+     l808o  l809o  l810o  l811o  l812o  l813o  l814o  l815o
+     l816o  l817o  l818o  l819o  l820o  l821o  l822o  l823o
+     l824o  l825o  l826o  l827o  l828o  l829o  l830o  l831o
+     l832o  l833o  l834o  l835o  l836o  l837o  l838o  l839o
+     l840o  l841o  l842o  l843o  l844o  l845o  l846o  l847o
+     l848o  l849o  l850o  l851o  l852o  l853o  l854o  l855o
+     l856o  l857o  l858o  l859o  l860o  l861o  l862o  l863o
+     l864o  l865o  l866o  l867o  l868o  l869o  l870o  l871o
+     l872o  l873o  l874o  l875o  l876o  l877o  l878o  l879o
+     l880o  l881o  l882o  l883o  l884o  l885o  l886o  l887o
+     l888o  l889o  l890o  l891o  l892o  l893o  l894o  l895o
+     l896o  l897o  l898o  l899o  l900o  l901o  l902o  l903o
+     l904o  l905o  l906o  l907o  l908o  l909o  l910o  l911o
+     l912o  l913o  l914o  l915o  l916o  l917o  l918o  l919o
+     l920o  l921o  l922o  l923o  l924o  l925o  l926o  l927o
+     l928o  l929o  l930o  l931o  l932o  l933o  l934o  l935o
+     l936o  l937o  l938o  l939o  l940o  l941o  l942o  l943o
+     l944o  l945o  l946o  l947o  l948o  l949o  l950o  l951o
+     l952o  l953o  l954o  l955o  l956o  l957o  l958o  l959o
+     l960o  l961o  l962o  l963o  l964o  l965o  l966o  l967o
+     l968o  l969o  l970o  l971o  l972o  l973o  l974o  l975o
+     l976o  l977o  l978o  l979o  l980o  l981o  l982o  l983o
+     l984o  l985o  l986o  l987o  l988o  l989o  l990o  l991o
+     l992o  l993o  l994o  l995o  l996o  l997o  l998o  l999o
+    l1000o l1001o l1002o l1003o l1004o l1005o l1006o l1007o
+    l1008o l1009o l1010o l1011o l1012o l1013o l1014o l1015o
+    l1016o l1017o l1018o l1019o l1020o l1021o l1022o l1023o
+    l1024o l1025o l1026o l1027o l1028o l1029o l1030o l1031o
+    l1032o l1033o l1034o l1035o l1036o l1037o l1038o l1039o
+    l1040o l1041o l1042o l1043o l1044o l1045o l1046o l1047o
+    l1048o l1049o l1050o l1051o l1052o l1053o l1054o l1055o
+    l1056o l1057o l1058o l1059o l1060o l1061o l1062o l1063o
+    l1064o l1065o l1066o l1067o l1068o l1069o l1070o l1071o
+    l1072o l1073o l1074o l1075o l1076o l1077o l1078o l1079o
+    l1080o l1081o l1082o l1083o l1084o l1085o l1086o l1087o
+    l1088o l1089o l1090o l1091o l1092o l1093o l1094o l1095o
+    l1096o l1097o l1098o l1099o l1100o l1101o l1102o l1103o
+    l1104o l1105o l1106o l1107o l1108o l1109o l1110o l1111o
+    l1112o l1113o l1114o l1115o l1116o l1117o l1118o l1119o
+    l1120o l1121o l1122o l1123o l1124o l1125o l1126o l1127o
+    l1128o l1129o l1130o l1131o l1132o l1133o l1134o l1135o
+    l1136o l1137o l1138o l1139o l1140o l1141o l1142o l1143o
+    l1144o l1145o l1146o l1147o l1148o l1149o l1150o l1151o
+    l1152o l1153o l1154o l1155o l1156o l1157o l1158o l1159o
+    l1160o l1161o l1162o l1163o l1164o l1165o l1166o l1167o
+    l1168o l1169o l1170o l1171o l1172o l1173o l1174o l1175o
+    l1176o l1177o l1178o l1179o l1180o l1181o l1182o l1183o
+    l1184o l1185o l1186o l1187o l1188o l1189o l1190o l1191o
+    l1192o l1193o l1194o l1195o l1196o l1197o l1198o l1199o
+    l1200o l1201o l1202o l1203o l1204o l1205o l1206o l1207o
+    l1208o l1209o l1210o l1211o l1212o l1213o l1214o l1215o
+    l1216o l1217o l1218o l1219o l1220o l1221o l1222o l1223o
+    l1224o l1225o l1226o l1227o l1228o l1229o l1230o l1231o
+    l1232o l1233o l1234o l1235o l1236o l1237o l1238o l1239o
+    l1240o l1241o l1242o l1243o l1244o l1245o l1246o l1247o
+    l1248o l1249o l1250o l1251o l1252o l1253o l1254o l1255o
+    l1256o l1257o l1258o l1259o l1260o l1261o l1262o l1263o
+    l1264o l1265o l1266o l1267o l1268o l1269o l1270o l1271o
+    l1272o l1273o l1274o l1275o l1276o l1277o l1278o l1279o
+    l1280o l1281o l1282o l1283o l1284o l1285o l1286o l1287o
+    l1288o l1289o l1290o l1291o l1292o l1293o l1294o l1295o
+    l1296o l1297o l1298o l1299o l1300o l1301o l1302o l1303o
+    l1304o l1305o l1306o l1307o l1308o l1309o l1310o l1311o
+    l1312o l1313o l1314o l1315o l1316o l1317o l1318o l1319o
+    l1320o l1321o l1322o l1323o l1324o l1325o l1326o l1327o
+    l1328o l1329o l1330o l1331o l1332o l1333o l1334o l1335o
+    l1336o l1337o l1338o l1339o l1340o l1341o l1342o l1343o
+    l1344o l1345o l1346o l1347o l1348o l1349o l1350o l1351o
+    l1352o l1353o l1354o l1355o l1356o l1357o l1358o l1359o
+    l1360o l1361o l1362o l1363o l1364o l1365o l1366o l1367o
+    l1368o l1369o l1370o l1371o l1372o l1373o l1374o l1375o
+    l1376o l1377o l1378o l1379o l1380o l1381o l1382o l1383o
+    l1384o l1385o l1386o l1387o l1388o l1389o l1390o l1391o
+    l1392o l1393o l1394o l1395o l1396o l1397o l1398o l1399o
+    l1400o l1401o l1402o l1403o l1404o l1405o l1406o l1407o
+    l1408o l1409o l1410o l1411o l1412o l1413o l1414o l1415o
+    l1416o l1417o l1418o l1419o l1420o l1421o l1422o l1423o
+    l1424o l1425o l1426o l1427o l1428o l1429o l1430o l1431o
+    l1432o l1433o l1434o l1435o l1436o l1437o l1438o l1439o
+    l1440o l1441o l1442o l1443o l1444o l1445o l1446o l1447o
+    l1448o l1449o l1450o l1451o l1452o l1453o l1454o l1455o
+    l1456o l1457o l1458o l1459o l1460o l1461o l1462o l1463o
+    l1464o l1465o l1466o l1467o l1468o l1469o l1470o l1471o
+    l1472o l1473o l1474o l1475o l1476o l1477o l1478o l1479o
+    l1480o l1481o l1482o l1483o l1484o l1485o l1486o l1487o
+    l1488o l1489o l1490o l1491o l1492o l1493o l1494o l1495o
+    l1496o l1497o l1498o l1499o l1500o l1501o l1502o l1503o
+    l1504o l1505o l1506o l1507o l1508o l1509o l1510o l1511o
+    l1512o l1513o l1514o l1515o l1516o l1517o l1518o l1519o
+    l1520o l1521o l1522o l1523o l1524o l1525o l1526o l1527o
+    l1528o l1529o l1530o l1531o l1532o l1533o l1534o l1535o
+    l1536o l1537o l1538o l1539o l1540o l1541o l1542o l1543o
+    l1544o l1545o l1546o l1547o l1548o l1549o l1550o l1551o
+    l1552o l1553o l1554o l1555o l1556o l1557o l1558o l1559o
+    l1560o l1561o l1562o l1563o l1564o l1565o l1566o l1567o
+    l1568o l1569o l1570o l1571o l1572o l1573o l1574o l1575o
+    l1576o l1577o l1578o l1579o l1580o l1581o l1582o l1583o
+    l1584o l1585o l1586o l1587o l1588o l1589o l1590o l1591o
+    l1592o l1593o l1594o l1595o l1596o l1597o l1598o l1599o
+    l1600o l1601o l1602o l1603o l1604o l1605o l1606o l1607o
+    l1608o l1609o l1610o l1611o l1612o l1613o l1614o l1615o
+    l1616o l1617o l1618o l1619o l1620o l1621o l1622o l1623o
+    l1624o l1625o l1626o l1627o l1628o l1629o l1630o l1631o
+    l1632o l1633o l1634o l1635o l1636o l1637o l1638o l1639o
+    l1640o l1641o l1642o l1643o l1644o l1645o l1646o l1647o
+    l1648o l1649o l1650o l1651o l1652o l1653o l1654o l1655o
+    l1656o l1657o l1658o l1659o l1660o l1661o l1662o l1663o
+    l1664o l1665o l1666o l1667o l1668o l1669o l1670o l1671o
+    l1672o l1673o l1674o l1675o l1676o l1677o l1678o l1679o
+    l1680o l1681o l1682o l1683o l1684o l1685o l1686o l1687o
+    l1688o l1689o l1690o l1691o l1692o l1693o l1694o l1695o
+    l1696o l1697o l1698o l1699o l1700o l1701o l1702o l1703o
+    l1704o l1705o l1706o l1707o l1708o l1709o l1710o l1711o
+    l1712o l1713o l1714o l1715o l1716o l1717o l1718o l1719o
+    l1720o l1721o l1722o l1723o l1724o l1725o l1726o l1727o
+    l1728o l1729o l1730o l1731o l1732o l1733o l1734o l1735o
+    l1736o l1737o l1738o l1739o l1740o l1741o l1742o l1743o
+    l1744o l1745o l1746o l1747o l1748o l1749o l1750o l1751o
+    l1752o l1753o l1754o l1755o l1756o l1757o l1758o l1759o
+    l1760o l1761o l1762o l1763o l1764o l1765o l1766o l1767o
+    l1768o l1769o l1770o l1771o l1772o l1773o l1774o l1775o
+    l1776o l1777o l1778o l1779o l1780o l1781o l1782o l1783o
+    l1784o l1785o l1786o l1787o l1788o l1789o l1790o l1791o
+    l1792o l1793o l1794o l1795o l1796o l1797o l1798o l1799o
+    l1800o l1801o l1802o l1803o l1804o l1805o l1806o l1807o
+    l1808o l1809o l1810o l1811o l1812o l1813o l1814o l1815o
+    l1816o l1817o l1818o l1819o l1820o l1821o l1822o l1823o
+    l1824o l1825o l1826o l1827o l1828o l1829o l1830o l1831o
+    l1832o l1833o l1834o l1835o l1836o l1837o l1838o l1839o
+    l1840o l1841o l1842o l1843o l1844o l1845o l1846o l1847o
+    l1848o l1849o l1850o l1851o l1852o l1853o l1854o l1855o
+    l1856o l1857o l1858o l1859o l1860o l1861o l1862o l1863o
+    l1864o l1865o l1866o l1867o l1868o l1869o l1870o l1871o
+    l1872o l1873o l1874o l1875o l1876o l1877o l1878o l1879o
+    l1880o l1881o l1882o l1883o l1884o l1885o l1886o l1887o
+    l1888o l1889o l1890o l1891o l1892o l1893o l1894o l1895o
+    l1896o l1897o l1898o l1899o l1900o l1901o l1902o l1903o
+    l1904o l1905o l1906o l1907o l1908o l1909o l1910o l1911o
+    l1912o l1913o l1914o l1915o l1916o l1917o l1918o l1919o
+    l1920o l1921o l1922o l1923o l1924o l1925o l1926o l1927o
+    l1928o l1929o l1930o l1931o l1932o l1933o l1934o l1935o
+    l1936o l1937o l1938o l1939o l1940o l1941o l1942o l1943o
+    l1944o l1945o l1946o l1947o l1948o l1949o l1950o l1951o
+    l1952o l1953o l1954o l1955o l1956o l1957o l1958o l1959o
+    l1960o l1961o l1962o l1963o l1964o l1965o l1966o l1967o
+    l1968o l1969o l1970o l1971o l1972o l1973o l1974o l1975o
+    l1976o l1977o l1978o l1979o l1980o l1981o l1982o l1983o
+    l1984o l1985o l1986o l1987o l1988o l1989o l1990o l1991o
+    l1992o l1993o l1994o l1995o l1996o l1997o l1998o l1999o
+    l2000o l2001o l2002o l2003o l2004o l2005o l2006o l2007o
+    l2008o l2009o l2010o l2011o l2012o l2013o l2014o l2015o
+    l2016o l2017o l2018o l2019o l2020o l2021o l2022o l2023o
+    l2024o l2025o l2026o l2027o l2028o l2029o l2030o l2031o
+    l2032o l2033o l2034o l2035o l2036o l2037o l2038o l2039o
+    l2040o l2041o l2042o l2043o l2044o l2045o l2046o l2047o
+    l2048o l2049o l2050o l2051o l2052o l2053o l2054o l2055o
+    l2056o l2057o l2058o l2059o l2060o l2061o l2062o l2063o
+    l2064o l2065o l2066o l2067o l2068o l2069o l2070o l2071o
+    l2072o l2073o l2074o l2075o l2076o l2077o l2078o l2079o
+    l2080o l2081o l2082o l2083o l2084o l2085o l2086o l2087o
+    l2088o l2089o l2090o l2091o l2092o l2093o l2094o l2095o
+    l2096o l2097o l2098o l2099o l2100o l2101o l2102o l2103o
+    l2104o l2105o l2106o l2107o l2108o l2109o l2110o l2111o
+    l2112o l2113o l2114o l2115o l2116o l2117o l2118o l2119o
+    l2120o l2121o l2122o l2123o l2124o l2125o l2126o l2127o
+    l2128o l2129o l2130o l2131o l2132o l2133o l2134o l2135o
+    l2136o l2137o l2138o l2139o l2140o l2141o l2142o l2143o
+    l2144o l2145o l2146o l2147o l2148o l2149o l2150o l2151o
+    l2152o l2153o l2154o l2155o l2156o l2157o l2158o l2159o
+    l2160o l2161o l2162o l2163o l2164o l2165o l2166o l2167o
+    l2168o l2169o l2170o l2171o l2172o l2173o l2174o l2175o
+    l2176o l2177o l2178o l2179o l2180o l2181o l2182o l2183o
+    l2184o l2185o l2186o l2187o l2188o l2189o l2190o l2191o
+    l2192o l2193o l2194o l2195o l2196o l2197o l2198o l2199o
+    l2200o l2201o l2202o l2203o l2204o l2205o l2206o l2207o
+    l2208o l2209o l2210o l2211o l2212o l2213o l2214o l2215o
+    l2216o l2217o l2218o l2219o l2220o l2221o l2222o l2223o
+    l2224o l2225o l2226o l2227o l2228o l2229o l2230o l2231o
+    l2232o l2233o l2234o l2235o l2236o l2237o l2238o l2239o
+    l2240o l2241o l2242o l2243o l2244o l2245o l2246o l2247o
+    l2248o l2249o l2250o l2251o l2252o l2253o l2254o l2255o
+    l2256o l2257o l2258o l2259o l2260o l2261o l2262o l2263o
+    l2264o l2265o l2266o l2267o l2268o l2269o l2270o l2271o
+    l2272o l2273o l2274o l2275o l2276o l2277o l2278o l2279o
+    l2280o l2281o l2282o l2283o l2284o l2285o l2286o l2287o
+    l2288o l2289o l2290o l2291o l2292o l2293o l2294o l2295o
+    l2296o l2297o l2298o l2299o l2300o l2301o l2302o l2303o
+    l2304o l2305o l2306o l2307o l2308o l2309o l2310o l2311o
+    l2312o l2313o l2314o l2315o l2316o l2317o l2318o l2319o
+    l2320o l2321o l2322o l2323o l2324o l2325o l2326o l2327o
+    l2328o l2329o l2330o l2331o l2332o l2333o l2334o l2335o
+    l2336o l2337o l2338o l2339o l2340o l2341o l2342o l2343o
+    l2344o l2345o l2346o l2347o l2348o l2349o l2350o l2351o
+    l2352o l2353o l2354o l2355o l2356o l2357o l2358o l2359o
+    l2360o l2361o l2362o l2363o l2364o l2365o l2366o l2367o
+    l2368o l2369o l2370o l2371o l2372o l2373o l2374o l2375o
+    l2376o l2377o l2378o l2379o l2380o l2381o l2382o l2383o
+    l2384o l2385o l2386o l2387o l2388o l2389o l2390o l2391o
+    l2392o l2393o l2394o l2395o l2396o l2397o l2398o l2399o
+    l2400o l2401o l2402o l2403o l2404o l2405o l2406o l2407o
+    l2408o l2409o l2410o l2411o l2412o l2413o l2414o l2415o
+    l2416o l2417o l2418o l2419o l2420o l2421o l2422o l2423o
+    l2424o l2425o l2426o l2427o l2428o l2429o l2430o l2431o
+    l2432o l2433o l2434o l2435o l2436o l2437o l2438o l2439o
+    l2440o l2441o l2442o l2443o l2444o l2445o l2446o l2447o
+    l2448o l2449o l2450o l2451o l2452o l2453o l2454o l2455o
+    l2456o l2457o l2458o l2459o l2460o l2461o l2462o l2463o
+    l2464o l2465o l2466o l2467o l2468o l2469o l2470o l2471o
+    l2472o l2473o l2474o l2475o l2476o l2477o l2478o l2479o
+    l2480o l2481o l2482o l2483o l2484o l2485o l2486o l2487o
+    l2488o l2489o l2490o l2491o l2492o l2493o l2494o l2495o
+    l2496o l2497o l2498o l2499o l2500o l2501o l2502o l2503o
+    l2504o l2505o l2506o l2507o l2508o l2509o l2510o l2511o
+    l2512o l2513o l2514o l2515o l2516o l2517o l2518o l2519o
+    l2520o l2521o l2522o l2523o l2524o l2525o l2526o l2527o
+    l2528o l2529o l2530o l2531o l2532o l2533o l2534o l2535o
+    l2536o l2537o l2538o l2539o l2540o l2541o l2542o l2543o
+    l2544o l2545o l2546o l2547o l2548o l2549o l2550o l2551o
+    l2552o l2553o l2554o l2555o l2556o l2557o l2558o l2559o
+    l2560o l2561o l2562o l2563o l2564o l2565o l2566o l2567o
+    l2568o l2569o l2570o l2571o l2572o l2573o l2574o l2575o
+    l2576o l2577o l2578o l2579o l2580o l2581o l2582o l2583o
+    l2584o l2585o l2586o l2587o l2588o l2589o l2590o l2591o
+    l2592o l2593o l2594o l2595o l2596o l2597o l2598o l2599o
+    l2600o l2601o l2602o l2603o l2604o l2605o l2606o l2607o
+    l2608o l2609o l2610o l2611o l2612o l2613o l2614o l2615o
+    l2616o l2617o l2618o l2619o l2620o l2621o l2622o l2623o
+    l2624o l2625o l2626o l2627o l2628o l2629o l2630o l2631o
+    l2632o l2633o l2634o l2635o l2636o l2637o l2638o l2639o
+    l2640o l2641o l2642o l2643o l2644o l2645o l2646o l2647o
+    l2648o l2649o l2650o l2651o l2652o l2653o l2654o l2655o
+    l2656o l2657o l2658o l2659o l2660o l2661o l2662o l2663o
+    l2664o l2665o l2666o l2667o l2668o l2669o l2670o l2671o
+    l2672o l2673o l2674o l2675o l2676o l2677o l2678o l2679o
+    l2680o l2681o l2682o l2683o l2684o l2685o l2686o l2687o
+    l2688o l2689o l2690o l2691o l2692o l2693o l2694o l2695o
+    l2696o l2697o l2698o l2699o l2700o l2701o l2702o l2703o
+    l2704o l2705o l2706o l2707o l2708o l2709o l2710o l2711o
+    l2712o l2713o l2714o l2715o l2716o l2717o l2718o l2719o
+    l2720o l2721o l2722o l2723o l2724o l2725o l2726o l2727o
+    l2728o l2729o l2730o l2731o l2732o l2733o l2734o l2735o
+    l2736o l2737o l2738o l2739o l2740o l2741o l2742o l2743o
+    l2744o l2745o l2746o l2747o l2748o l2749o l2750o l2751o
+    l2752o l2753o l2754o l2755o l2756o l2757o l2758o l2759o
+    l2760o l2761o l2762o l2763o l2764o l2765o l2766o l2767o
+    l2768o l2769o l2770o l2771o l2772o l2773o l2774o l2775o
+    l2776o l2777o l2778o l2779o l2780o l2781o l2782o l2783o
+    l2784o l2785o l2786o l2787o l2788o l2789o l2790o l2791o
+    l2792o l2793o l2794o l2795o l2796o l2797o l2798o l2799o
+    l2800o l2801o l2802o l2803o l2804o l2805o l2806o l2807o
+    l2808o l2809o l2810o l2811o l2812o l2813o l2814o l2815o
+    l2816o l2817o l2818o l2819o l2820o l2821o l2822o l2823o
+    l2824o l2825o l2826o l2827o l2828o l2829o l2830o l2831o
+    l2832o l2833o l2834o l2835o l2836o l2837o l2838o l2839o
+    l2840o l2841o l2842o l2843o l2844o l2845o l2846o l2847o
+    l2848o l2849o l2850o l2851o l2852o l2853o l2854o l2855o
+    l2856o l2857o l2858o l2859o l2860o l2861o l2862o l2863o
+    l2864o l2865o l2866o l2867o l2868o l2869o l2870o l2871o
+    l2872o l2873o l2874o l2875o l2876o l2877o l2878o l2879o
+    l2880o l2881o l2882o l2883o l2884o l2885o l2886o l2887o
+    l2888o l2889o l2890o l2891o l2892o l2893o l2894o l2895o
+    l2896o l2897o l2898o l2899o l2900o l2901o l2902o l2903o
+    l2904o l2905o l2906o l2907o l2908o l2909o l2910o l2911o
+    l2912o l2913o l2914o l2915o l2916o l2917o l2918o l2919o
+    l2920o l2921o l2922o l2923o l2924o l2925o l2926o l2927o
+    l2928o l2929o l2930o l2931o l2932o l2933o l2934o l2935o
+    l2936o l2937o l2938o l2939o l2940o l2941o l2942o l2943o
+    l2944o l2945o l2946o l2947o l2948o l2949o l2950o l2951o
+    l2952o l2953o l2954o l2955o l2956o l2957o l2958o l2959o
+    l2960o l2961o l2962o l2963o l2964o l2965o l2966o l2967o
+    l2968o l2969o l2970o l2971o l2972o l2973o l2974o l2975o
+    l2976o l2977o l2978o l2979o l2980o l2981o l2982o l2983o
+    l2984o l2985o l2986o l2987o l2988o l2989o l2990o l2991o
+    l2992o l2993o l2994o l2995o l2996o l2997o l2998o l2999o
+    l3000o l3001o l3002o l3003o l3004o l3005o l3006o l3007o
+    l3008o l3009o l3010o l3011o l3012o l3013o l3014o l3015o
+    l3016o l3017o l3018o l3019o l3020o l3021o l3022o l3023o
+    l3024o l3025o l3026o l3027o l3028o l3029o l3030o l3031o
+    l3032o l3033o l3034o l3035o l3036o l3037o l3038o l3039o
+    l3040o l3041o l3042o l3043o l3044o l3045o l3046o l3047o
+    l3048o l3049o l3050o l3051o l3052o l3053o l3054o l3055o
+    l3056o l3057o l3058o l3059o l3060o l3061o l3062o l3063o
+    l3064o l3065o l3066o l3067o l3068o l3069o l3070o l3071o
+    l3072o l3073o l3074o l3075o l3076o l3077o l3078o l3079o
+    l3080o l3081o l3082o l3083o l3084o l3085o l3086o l3087o
+    l3088o l3089o l3090o l3091o l3092o l3093o l3094o l3095o
+    l3096o l3097o l3098o l3099o l3100o l3101o l3102o l3103o
+    l3104o l3105o l3106o l3107o l3108o l3109o l3110o l3111o
+    l3112o l3113o l3114o l3115o l3116o l3117o l3118o l3119o
+    l3120o l3121o l3122o l3123o l3124o l3125o l3126o l3127o
+    l3128o l3129o l3130o l3131o l3132o l3133o l3134o l3135o
+    l3136o l3137o l3138o l3139o l3140o l3141o l3142o l3143o
+    l3144o l3145o l3146o l3147o l3148o l3149o l3150o l3151o
+    l3152o l3153o l3154o l3155o l3156o l3157o l3158o l3159o
+    l3160o l3161o l3162o l3163o l3164o l3165o l3166o l3167o
+    l3168o l3169o l3170o l3171o l3172o l3173o l3174o l3175o
+    l3176o l3177o l3178o l3179o l3180o l3181o l3182o l3183o
+    l3184o l3185o l3186o l3187o l3188o l3189o l3190o l3191o
+    l3192o l3193o l3194o l3195o l3196o l3197o l3198o l3199o
+    l3200o l3201o l3202o l3203o l3204o l3205o l3206o l3207o
+    l3208o l3209o l3210o l3211o l3212o l3213o l3214o l3215o
+    l3216o l3217o l3218o l3219o l3220o l3221o l3222o l3223o
+    l3224o l3225o l3226o l3227o l3228o l3229o l3230o l3231o
+    l3232o l3233o l3234o l3235o l3236o l3237o l3238o l3239o
+    l3240o l3241o l3242o l3243o l3244o l3245o l3246o l3247o
+    l3248o l3249o l3250o l3251o l3252o l3253o l3254o l3255o
+    l3256o l3257o l3258o l3259o l3260o l3261o l3262o l3263o
+    l3264o l3265o l3266o l3267o l3268o l3269o l3270o l3271o
+    l3272o l3273o l3274o l3275o l3276o l3277o l3278o l3279o
+    l3280o l3281o l3282o l3283o l3284o l3285o l3286o l3287o
+    l3288o l3289o l3290o l3291o l3292o l3293o l3294o l3295o
+    l3296o l3297o l3298o l3299o l3300o l3301o l3302o l3303o
+    l3304o l3305o l3306o l3307o l3308o l3309o l3310o l3311o
+    l3312o l3313o l3314o l3315o l3316o l3317o l3318o l3319o
+    l3320o l3321o l3322o l3323o l3324o l3325o l3326o l3327o
+    l3328o l3329o l3330o l3331o l3332o l3333o l3334o l3335o
+    l3336o l3337o l3338o l3339o l3340o l3341o l3342o l3343o
+    l3344o l3345o l3346o l3347o l3348o l3349o l3350o l3351o
+    l3352o l3353o l3354o l3355o l3356o l3357o l3358o l3359o
+    l3360o l3361o l3362o l3363o l3364o l3365o l3366o l3367o
+    l3368o l3369o l3370o l3371o l3372o l3373o l3374o l3375o
+    l3376o l3377o l3378o l3379o l3380o l3381o l3382o l3383o
+    l3384o l3385o l3386o l3387o l3388o l3389o l3390o l3391o
+    l3392o l3393o l3394o l3395o l3396o l3397o l3398o l3399o
+    l3400o l3401o l3402o l3403o l3404o l3405o l3406o l3407o
+    l3408o l3409o l3410o l3411o l3412o l3413o l3414o l3415o
+    l3416o l3417o l3418o l3419o l3420o l3421o l3422o l3423o
+    l3424o l3425o l3426o l3427o l3428o l3429o l3430o l3431o
+    l3432o l3433o l3434o l3435o l3436o l3437o l3438o l3439o
+    l3440o l3441o l3442o l3443o l3444o l3445o l3446o l3447o
+    l3448o l3449o l3450o l3451o l3452o l3453o l3454o l3455o
+    l3456o l3457o l3458o l3459o l3460o l3461o l3462o l3463o
+    l3464o l3465o l3466o l3467o l3468o l3469o l3470o l3471o
+    l3472o l3473o l3474o l3475o l3476o l3477o l3478o l3479o
+    l3480o l3481o l3482o l3483o l3484o l3485o l3486o l3487o
+    l3488o l3489o l3490o l3491o l3492o l3493o l3494o l3495o
+    l3496o l3497o l3498o l3499o l3500o l3501o l3502o l3503o
+    l3504o l3505o l3506o l3507o l3508o l3509o l3510o l3511o
+    l3512o l3513o l3514o l3515o l3516o l3517o l3518o l3519o
+    l3520o l3521o l3522o l3523o l3524o l3525o l3526o l3527o
+    l3528o l3529o l3530o l3531o l3532o l3533o l3534o l3535o
+    l3536o l3537o l3538o l3539o l3540o l3541o l3542o l3543o
+    l3544o l3545o l3546o l3547o l3548o l3549o l3550o l3551o
+    l3552o l3553o l3554o l3555o l3556o l3557o l3558o l3559o
+    l3560o l3561o l3562o l3563o l3564o l3565o l3566o l3567o
+    l3568o l3569o l3570o l3571o l3572o l3573o l3574o l3575o
+    l3576o l3577o l3578o l3579o l3580o l3581o l3582o l3583o
+    l3584o l3585o l3586o l3587o l3588o l3589o l3590o l3591o
+    l3592o l3593o l3594o l3595o l3596o l3597o l3598o l3599o
+    l3600o l3601o l3602o l3603o l3604o l3605o l3606o l3607o
+    l3608o l3609o l3610o l3611o l3612o l3613o l3614o l3615o
+    l3616o l3617o l3618o l3619o l3620o l3621o l3622o l3623o
+    l3624o l3625o l3626o l3627o l3628o l3629o l3630o l3631o
+    l3632o l3633o l3634o l3635o l3636o l3637o l3638o l3639o
+    l3640o l3641o l3642o l3643o l3644o l3645o l3646o l3647o
+    l3648o l3649o l3650o l3651o l3652o l3653o l3654o l3655o
+    l3656o l3657o l3658o l3659o l3660o l3661o l3662o l3663o
+    l3664o l3665o l3666o l3667o l3668o l3669o l3670o l3671o
+    l3672o l3673o l3674o l3675o l3676o l3677o l3678o l3679o
+    l3680o l3681o l3682o l3683o l3684o l3685o l3686o l3687o
+    l3688o l3689o l3690o l3691o l3692o l3693o l3694o l3695o
+    l3696o l3697o l3698o l3699o l3700o l3701o l3702o l3703o
+    l3704o l3705o l3706o l3707o l3708o l3709o l3710o l3711o
+    l3712o l3713o l3714o l3715o l3716o l3717o l3718o l3719o
+    l3720o l3721o l3722o l3723o l3724o l3725o l3726o l3727o
+    l3728o l3729o l3730o l3731o l3732o l3733o l3734o l3735o
+    l3736o l3737o l3738o l3739o l3740o l3741o l3742o l3743o
+    l3744o l3745o l3746o l3747o l3748o l3749o l3750o l3751o
+    l3752o l3753o l3754o l3755o l3756o l3757o l3758o l3759o
+    l3760o l3761o l3762o l3763o l3764o l3765o l3766o l3767o
+    l3768o l3769o l3770o l3771o l3772o l3773o l3774o l3775o
+    l3776o l3777o l3778o l3779o l3780o l3781o l3782o l3783o
+    l3784o l3785o l3786o l3787o l3788o l3789o l3790o l3791o
+    l3792o l3793o l3794o l3795o l3796o l3797o l3798o l3799o
+    l3800o l3801o l3802o l3803o l3804o l3805o l3806o l3807o
+    l3808o l3809o l3810o l3811o l3812o l3813o l3814o l3815o
+    l3816o l3817o l3818o l3819o l3820o l3821o l3822o l3823o
+    l3824o l3825o l3826o l3827o l3828o l3829o l3830o l3831o
+    l3832o l3833o l3834o l3835o l3836o l3837o l3838o l3839o
+    l3840o l3841o l3842o l3843o l3844o l3845o l3846o l3847o
+    l3848o l3849o l3850o l3851o l3852o l3853o l3854o l3855o
+    l3856o l3857o l3858o l3859o l3860o l3861o l3862o l3863o
+    l3864o l3865o l3866o l3867o l3868o l3869o l3870o l3871o
+    l3872o l3873o l3874o l3875o l3876o l3877o l3878o l3879o
+    l3880o l3881o l3882o l3883o l3884o l3885o l3886o l3887o
+    l3888o l3889o l3890o l3891o l3892o l3893o l3894o l3895o
+    l3896o l3897o l3898o l3899o l3900o l3901o l3902o l3903o
+    l3904o l3905o l3906o l3907o l3908o l3909o l3910o l3911o
+    l3912o l3913o l3914o l3915o l3916o l3917o l3918o l3919o
+    l3920o l3921o l3922o l3923o l3924o l3925o l3926o l3927o
+    l3928o l3929o l3930o l3931o l3932o l3933o l3934o l3935o
+    l3936o l3937o l3938o l3939o l3940o l3941o l3942o l3943o
+    l3944o l3945o l3946o l3947o l3948o l3949o l3950o l3951o
+    l3952o l3953o l3954o l3955o l3956o l3957o l3958o l3959o
+    l3960o l3961o l3962o l3963o l3964o l3965o l3966o l3967o
+    l3968o l3969o l3970o l3971o l3972o l3973o l3974o l3975o
+    l3976o l3977o l3978o l3979o l3980o l3981o l3982o l3983o
+    l3984o l3985o l3986o l3987o l3988o l3989o l3990o l3991o
+    l3992o l3993o l3994o l3995o l3996o l3997o l3998o l3999o
+    l4000o l4001o l4002o l4003o l4004o l4005o l4006o l4007o
+    l4008o l4009o l4010o l4011o l4012o l4013o l4014o l4015o
+    l4016o l4017o l4018o l4019o l4020o l4021o l4022o l4023o
+    l4024o l4025o l4026o l4027o l4028o l4029o l4030o l4031o
+    l4032o l4033o l4034o l4035o l4036o l4037o l4038o l4039o
+    l4040o l4041o l4042o l4043o l4044o l4045o l4046o l4047o
+    l4048o l4049o l4050o l4051o l4052o l4053o l4054o l4055o
+    l4056o l4057o l4058o l4059o l4060o l4061o l4062o l4063o
+    l4064o l4065o l4066o l4067o l4068o l4069o l4070o l4071o
+    l4072o l4073o l4074o l4075o l4076o l4077o l4078o l4079o
+    l4080o l4081o l4082o l4083o l4084o l4085o l4086o l4087o
+    l4088o l4089o l4090o l4091o l4092o l4093o l4094o l4095o
+];
 define register offset=0x10000000 size=8 [
-        l0q    l1q    l2q    l3q    l4q    l5q    l6q    l7q
-        l8q    l9q   l10q   l11q   l12q   l13q   l14q   l15q
-       l16q   l17q   l18q   l19q   l20q   l21q   l22q   l23q
-       l24q   l25q   l26q   l27q   l28q   l29q   l30q   l31q
-       l32q   l33q   l34q   l35q   l36q   l37q   l38q   l39q
-       l40q   l41q   l42q   l43q   l44q   l45q   l46q   l47q
-       l48q   l49q   l50q   l51q   l52q   l53q   l54q   l55q
-       l56q   l57q   l58q   l59q   l60q   l61q   l62q   l63q
-       l64q   l65q   l66q   l67q   l68q   l69q   l70q   l71q
-       l72q   l73q   l74q   l75q   l76q   l77q   l78q   l79q
-       l80q   l81q   l82q   l83q   l84q   l85q   l86q   l87q
-       l88q   l89q   l90q   l91q   l92q   l93q   l94q   l95q
-       l96q   l97q   l98q   l99q  l100q  l101q  l102q  l103q
-      l104q  l105q  l106q  l107q  l108q  l109q  l110q  l111q
-      l112q  l113q  l114q  l115q  l116q  l117q  l118q  l119q
-      l120q  l121q  l122q  l123q  l124q  l125q  l126q  l127q
-      l128q  l129q  l130q  l131q  l132q  l133q  l134q  l135q
-      l136q  l137q  l138q  l139q  l140q  l141q  l142q  l143q
-      l144q  l145q  l146q  l147q  l148q  l149q  l150q  l151q
-      l152q  l153q  l154q  l155q  l156q  l157q  l158q  l159q
-      l160q  l161q  l162q  l163q  l164q  l165q  l166q  l167q
-      l168q  l169q  l170q  l171q  l172q  l173q  l174q  l175q
-      l176q  l177q  l178q  l179q  l180q  l181q  l182q  l183q
-      l184q  l185q  l186q  l187q  l188q  l189q  l190q  l191q
-      l192q  l193q  l194q  l195q  l196q  l197q  l198q  l199q
-      l200q  l201q  l202q  l203q  l204q  l205q  l206q  l207q
-      l208q  l209q  l210q  l211q  l212q  l213q  l214q  l215q
-      l216q  l217q  l218q  l219q  l220q  l221q  l222q  l223q
-      l224q  l225q  l226q  l227q  l228q  l229q  l230q  l231q
-      l232q  l233q  l234q  l235q  l236q  l237q  l238q  l239q
-      l240q  l241q  l242q  l243q  l244q  l245q  l246q  l247q
-      l248q  l249q  l250q  l251q  l252q  l253q  l254q  l255q
-      l256q  l257q  l258q  l259q  l260q  l261q  l262q  l263q
-      l264q  l265q  l266q  l267q  l268q  l269q  l270q  l271q
-      l272q  l273q  l274q  l275q  l276q  l277q  l278q  l279q
-      l280q  l281q  l282q  l283q  l284q  l285q  l286q  l287q
-      l288q  l289q  l290q  l291q  l292q  l293q  l294q  l295q
-      l296q  l297q  l298q  l299q  l300q  l301q  l302q  l303q
-      l304q  l305q  l306q  l307q  l308q  l309q  l310q  l311q
-      l312q  l313q  l314q  l315q  l316q  l317q  l318q  l319q
-      l320q  l321q  l322q  l323q  l324q  l325q  l326q  l327q
-      l328q  l329q  l330q  l331q  l332q  l333q  l334q  l335q
-      l336q  l337q  l338q  l339q  l340q  l341q  l342q  l343q
-      l344q  l345q  l346q  l347q  l348q  l349q  l350q  l351q
-      l352q  l353q  l354q  l355q  l356q  l357q  l358q  l359q
-      l360q  l361q  l362q  l363q  l364q  l365q  l366q  l367q
-      l368q  l369q  l370q  l371q  l372q  l373q  l374q  l375q
-      l376q  l377q  l378q  l379q  l380q  l381q  l382q  l383q
-      l384q  l385q  l386q  l387q  l388q  l389q  l390q  l391q
-      l392q  l393q  l394q  l395q  l396q  l397q  l398q  l399q
-      l400q  l401q  l402q  l403q  l404q  l405q  l406q  l407q
-      l408q  l409q  l410q  l411q  l412q  l413q  l414q  l415q
-      l416q  l417q  l418q  l419q  l420q  l421q  l422q  l423q
-      l424q  l425q  l426q  l427q  l428q  l429q  l430q  l431q
-      l432q  l433q  l434q  l435q  l436q  l437q  l438q  l439q
-      l440q  l441q  l442q  l443q  l444q  l445q  l446q  l447q
-      l448q  l449q  l450q  l451q  l452q  l453q  l454q  l455q
-      l456q  l457q  l458q  l459q  l460q  l461q  l462q  l463q
-      l464q  l465q  l466q  l467q  l468q  l469q  l470q  l471q
-      l472q  l473q  l474q  l475q  l476q  l477q  l478q  l479q
-      l480q  l481q  l482q  l483q  l484q  l485q  l486q  l487q
-      l488q  l489q  l490q  l491q  l492q  l493q  l494q  l495q
-      l496q  l497q  l498q  l499q  l500q  l501q  l502q  l503q
-      l504q  l505q  l506q  l507q  l508q  l509q  l510q  l511q
-      l512q  l513q  l514q  l515q  l516q  l517q  l518q  l519q
-      l520q  l521q  l522q  l523q  l524q  l525q  l526q  l527q
-      l528q  l529q  l530q  l531q  l532q  l533q  l534q  l535q
-      l536q  l537q  l538q  l539q  l540q  l541q  l542q  l543q
-      l544q  l545q  l546q  l547q  l548q  l549q  l550q  l551q
-      l552q  l553q  l554q  l555q  l556q  l557q  l558q  l559q
-      l560q  l561q  l562q  l563q  l564q  l565q  l566q  l567q
-      l568q  l569q  l570q  l571q  l572q  l573q  l574q  l575q
-      l576q  l577q  l578q  l579q  l580q  l581q  l582q  l583q
-      l584q  l585q  l586q  l587q  l588q  l589q  l590q  l591q
-      l592q  l593q  l594q  l595q  l596q  l597q  l598q  l599q
-      l600q  l601q  l602q  l603q  l604q  l605q  l606q  l607q
-      l608q  l609q  l610q  l611q  l612q  l613q  l614q  l615q
-      l616q  l617q  l618q  l619q  l620q  l621q  l622q  l623q
-      l624q  l625q  l626q  l627q  l628q  l629q  l630q  l631q
-      l632q  l633q  l634q  l635q  l636q  l637q  l638q  l639q
-      l640q  l641q  l642q  l643q  l644q  l645q  l646q  l647q
-      l648q  l649q  l650q  l651q  l652q  l653q  l654q  l655q
-      l656q  l657q  l658q  l659q  l660q  l661q  l662q  l663q
-      l664q  l665q  l666q  l667q  l668q  l669q  l670q  l671q
-      l672q  l673q  l674q  l675q  l676q  l677q  l678q  l679q
-      l680q  l681q  l682q  l683q  l684q  l685q  l686q  l687q
-      l688q  l689q  l690q  l691q  l692q  l693q  l694q  l695q
-      l696q  l697q  l698q  l699q  l700q  l701q  l702q  l703q
-      l704q  l705q  l706q  l707q  l708q  l709q  l710q  l711q
-      l712q  l713q  l714q  l715q  l716q  l717q  l718q  l719q
-      l720q  l721q  l722q  l723q  l724q  l725q  l726q  l727q
-      l728q  l729q  l730q  l731q  l732q  l733q  l734q  l735q
-      l736q  l737q  l738q  l739q  l740q  l741q  l742q  l743q
-      l744q  l745q  l746q  l747q  l748q  l749q  l750q  l751q
-      l752q  l753q  l754q  l755q  l756q  l757q  l758q  l759q
-      l760q  l761q  l762q  l763q  l764q  l765q  l766q  l767q
-      l768q  l769q  l770q  l771q  l772q  l773q  l774q  l775q
-      l776q  l777q  l778q  l779q  l780q  l781q  l782q  l783q
-      l784q  l785q  l786q  l787q  l788q  l789q  l790q  l791q
-      l792q  l793q  l794q  l795q  l796q  l797q  l798q  l799q
-      l800q  l801q  l802q  l803q  l804q  l805q  l806q  l807q
-      l808q  l809q  l810q  l811q  l812q  l813q  l814q  l815q
-      l816q  l817q  l818q  l819q  l820q  l821q  l822q  l823q
-      l824q  l825q  l826q  l827q  l828q  l829q  l830q  l831q
-      l832q  l833q  l834q  l835q  l836q  l837q  l838q  l839q
-      l840q  l841q  l842q  l843q  l844q  l845q  l846q  l847q
-      l848q  l849q  l850q  l851q  l852q  l853q  l854q  l855q
-      l856q  l857q  l858q  l859q  l860q  l861q  l862q  l863q
-      l864q  l865q  l866q  l867q  l868q  l869q  l870q  l871q
-      l872q  l873q  l874q  l875q  l876q  l877q  l878q  l879q
-      l880q  l881q  l882q  l883q  l884q  l885q  l886q  l887q
-      l888q  l889q  l890q  l891q  l892q  l893q  l894q  l895q
-      l896q  l897q  l898q  l899q  l900q  l901q  l902q  l903q
-      l904q  l905q  l906q  l907q  l908q  l909q  l910q  l911q
-      l912q  l913q  l914q  l915q  l916q  l917q  l918q  l919q
-      l920q  l921q  l922q  l923q  l924q  l925q  l926q  l927q
-      l928q  l929q  l930q  l931q  l932q  l933q  l934q  l935q
-      l936q  l937q  l938q  l939q  l940q  l941q  l942q  l943q
-      l944q  l945q  l946q  l947q  l948q  l949q  l950q  l951q
-      l952q  l953q  l954q  l955q  l956q  l957q  l958q  l959q
-      l960q  l961q  l962q  l963q  l964q  l965q  l966q  l967q
-      l968q  l969q  l970q  l971q  l972q  l973q  l974q  l975q
-      l976q  l977q  l978q  l979q  l980q  l981q  l982q  l983q
-      l984q  l985q  l986q  l987q  l988q  l989q  l990q  l991q
-      l992q  l993q  l994q  l995q  l996q  l997q  l998q  l999q
-     l1000q l1001q l1002q l1003q l1004q l1005q l1006q l1007q
-     l1008q l1009q l1010q l1011q l1012q l1013q l1014q l1015q
-     l1016q l1017q l1018q l1019q l1020q l1021q l1022q l1023q
-     l1024q l1025q l1026q l1027q l1028q l1029q l1030q l1031q
-     l1032q l1033q l1034q l1035q l1036q l1037q l1038q l1039q
-     l1040q l1041q l1042q l1043q l1044q l1045q l1046q l1047q
-     l1048q l1049q l1050q l1051q l1052q l1053q l1054q l1055q
-     l1056q l1057q l1058q l1059q l1060q l1061q l1062q l1063q
-     l1064q l1065q l1066q l1067q l1068q l1069q l1070q l1071q
-     l1072q l1073q l1074q l1075q l1076q l1077q l1078q l1079q
-     l1080q l1081q l1082q l1083q l1084q l1085q l1086q l1087q
-     l1088q l1089q l1090q l1091q l1092q l1093q l1094q l1095q
-     l1096q l1097q l1098q l1099q l1100q l1101q l1102q l1103q
-     l1104q l1105q l1106q l1107q l1108q l1109q l1110q l1111q
-     l1112q l1113q l1114q l1115q l1116q l1117q l1118q l1119q
-     l1120q l1121q l1122q l1123q l1124q l1125q l1126q l1127q
-     l1128q l1129q l1130q l1131q l1132q l1133q l1134q l1135q
-     l1136q l1137q l1138q l1139q l1140q l1141q l1142q l1143q
-     l1144q l1145q l1146q l1147q l1148q l1149q l1150q l1151q
-     l1152q l1153q l1154q l1155q l1156q l1157q l1158q l1159q
-     l1160q l1161q l1162q l1163q l1164q l1165q l1166q l1167q
-     l1168q l1169q l1170q l1171q l1172q l1173q l1174q l1175q
-     l1176q l1177q l1178q l1179q l1180q l1181q l1182q l1183q
-     l1184q l1185q l1186q l1187q l1188q l1189q l1190q l1191q
-     l1192q l1193q l1194q l1195q l1196q l1197q l1198q l1199q
-     l1200q l1201q l1202q l1203q l1204q l1205q l1206q l1207q
-     l1208q l1209q l1210q l1211q l1212q l1213q l1214q l1215q
-     l1216q l1217q l1218q l1219q l1220q l1221q l1222q l1223q
-     l1224q l1225q l1226q l1227q l1228q l1229q l1230q l1231q
-     l1232q l1233q l1234q l1235q l1236q l1237q l1238q l1239q
-     l1240q l1241q l1242q l1243q l1244q l1245q l1246q l1247q
-     l1248q l1249q l1250q l1251q l1252q l1253q l1254q l1255q
-     l1256q l1257q l1258q l1259q l1260q l1261q l1262q l1263q
-     l1264q l1265q l1266q l1267q l1268q l1269q l1270q l1271q
-     l1272q l1273q l1274q l1275q l1276q l1277q l1278q l1279q
-     l1280q l1281q l1282q l1283q l1284q l1285q l1286q l1287q
-     l1288q l1289q l1290q l1291q l1292q l1293q l1294q l1295q
-     l1296q l1297q l1298q l1299q l1300q l1301q l1302q l1303q
-     l1304q l1305q l1306q l1307q l1308q l1309q l1310q l1311q
-     l1312q l1313q l1314q l1315q l1316q l1317q l1318q l1319q
-     l1320q l1321q l1322q l1323q l1324q l1325q l1326q l1327q
-     l1328q l1329q l1330q l1331q l1332q l1333q l1334q l1335q
-     l1336q l1337q l1338q l1339q l1340q l1341q l1342q l1343q
-     l1344q l1345q l1346q l1347q l1348q l1349q l1350q l1351q
-     l1352q l1353q l1354q l1355q l1356q l1357q l1358q l1359q
-     l1360q l1361q l1362q l1363q l1364q l1365q l1366q l1367q
-     l1368q l1369q l1370q l1371q l1372q l1373q l1374q l1375q
-     l1376q l1377q l1378q l1379q l1380q l1381q l1382q l1383q
-     l1384q l1385q l1386q l1387q l1388q l1389q l1390q l1391q
-     l1392q l1393q l1394q l1395q l1396q l1397q l1398q l1399q
-     l1400q l1401q l1402q l1403q l1404q l1405q l1406q l1407q
-     l1408q l1409q l1410q l1411q l1412q l1413q l1414q l1415q
-     l1416q l1417q l1418q l1419q l1420q l1421q l1422q l1423q
-     l1424q l1425q l1426q l1427q l1428q l1429q l1430q l1431q
-     l1432q l1433q l1434q l1435q l1436q l1437q l1438q l1439q
-     l1440q l1441q l1442q l1443q l1444q l1445q l1446q l1447q
-     l1448q l1449q l1450q l1451q l1452q l1453q l1454q l1455q
-     l1456q l1457q l1458q l1459q l1460q l1461q l1462q l1463q
-     l1464q l1465q l1466q l1467q l1468q l1469q l1470q l1471q
-     l1472q l1473q l1474q l1475q l1476q l1477q l1478q l1479q
-     l1480q l1481q l1482q l1483q l1484q l1485q l1486q l1487q
-     l1488q l1489q l1490q l1491q l1492q l1493q l1494q l1495q
-     l1496q l1497q l1498q l1499q l1500q l1501q l1502q l1503q
-     l1504q l1505q l1506q l1507q l1508q l1509q l1510q l1511q
-     l1512q l1513q l1514q l1515q l1516q l1517q l1518q l1519q
-     l1520q l1521q l1522q l1523q l1524q l1525q l1526q l1527q
-     l1528q l1529q l1530q l1531q l1532q l1533q l1534q l1535q
-     l1536q l1537q l1538q l1539q l1540q l1541q l1542q l1543q
-     l1544q l1545q l1546q l1547q l1548q l1549q l1550q l1551q
-     l1552q l1553q l1554q l1555q l1556q l1557q l1558q l1559q
-     l1560q l1561q l1562q l1563q l1564q l1565q l1566q l1567q
-     l1568q l1569q l1570q l1571q l1572q l1573q l1574q l1575q
-     l1576q l1577q l1578q l1579q l1580q l1581q l1582q l1583q
-     l1584q l1585q l1586q l1587q l1588q l1589q l1590q l1591q
-     l1592q l1593q l1594q l1595q l1596q l1597q l1598q l1599q
-     l1600q l1601q l1602q l1603q l1604q l1605q l1606q l1607q
-     l1608q l1609q l1610q l1611q l1612q l1613q l1614q l1615q
-     l1616q l1617q l1618q l1619q l1620q l1621q l1622q l1623q
-     l1624q l1625q l1626q l1627q l1628q l1629q l1630q l1631q
-     l1632q l1633q l1634q l1635q l1636q l1637q l1638q l1639q
-     l1640q l1641q l1642q l1643q l1644q l1645q l1646q l1647q
-     l1648q l1649q l1650q l1651q l1652q l1653q l1654q l1655q
-     l1656q l1657q l1658q l1659q l1660q l1661q l1662q l1663q
-     l1664q l1665q l1666q l1667q l1668q l1669q l1670q l1671q
-     l1672q l1673q l1674q l1675q l1676q l1677q l1678q l1679q
-     l1680q l1681q l1682q l1683q l1684q l1685q l1686q l1687q
-     l1688q l1689q l1690q l1691q l1692q l1693q l1694q l1695q
-     l1696q l1697q l1698q l1699q l1700q l1701q l1702q l1703q
-     l1704q l1705q l1706q l1707q l1708q l1709q l1710q l1711q
-     l1712q l1713q l1714q l1715q l1716q l1717q l1718q l1719q
-     l1720q l1721q l1722q l1723q l1724q l1725q l1726q l1727q
-     l1728q l1729q l1730q l1731q l1732q l1733q l1734q l1735q
-     l1736q l1737q l1738q l1739q l1740q l1741q l1742q l1743q
-     l1744q l1745q l1746q l1747q l1748q l1749q l1750q l1751q
-     l1752q l1753q l1754q l1755q l1756q l1757q l1758q l1759q
-     l1760q l1761q l1762q l1763q l1764q l1765q l1766q l1767q
-     l1768q l1769q l1770q l1771q l1772q l1773q l1774q l1775q
-     l1776q l1777q l1778q l1779q l1780q l1781q l1782q l1783q
-     l1784q l1785q l1786q l1787q l1788q l1789q l1790q l1791q
-     l1792q l1793q l1794q l1795q l1796q l1797q l1798q l1799q
-     l1800q l1801q l1802q l1803q l1804q l1805q l1806q l1807q
-     l1808q l1809q l1810q l1811q l1812q l1813q l1814q l1815q
-     l1816q l1817q l1818q l1819q l1820q l1821q l1822q l1823q
-     l1824q l1825q l1826q l1827q l1828q l1829q l1830q l1831q
-     l1832q l1833q l1834q l1835q l1836q l1837q l1838q l1839q
-     l1840q l1841q l1842q l1843q l1844q l1845q l1846q l1847q
-     l1848q l1849q l1850q l1851q l1852q l1853q l1854q l1855q
-     l1856q l1857q l1858q l1859q l1860q l1861q l1862q l1863q
-     l1864q l1865q l1866q l1867q l1868q l1869q l1870q l1871q
-     l1872q l1873q l1874q l1875q l1876q l1877q l1878q l1879q
-     l1880q l1881q l1882q l1883q l1884q l1885q l1886q l1887q
-     l1888q l1889q l1890q l1891q l1892q l1893q l1894q l1895q
-     l1896q l1897q l1898q l1899q l1900q l1901q l1902q l1903q
-     l1904q l1905q l1906q l1907q l1908q l1909q l1910q l1911q
-     l1912q l1913q l1914q l1915q l1916q l1917q l1918q l1919q
-     l1920q l1921q l1922q l1923q l1924q l1925q l1926q l1927q
-     l1928q l1929q l1930q l1931q l1932q l1933q l1934q l1935q
-     l1936q l1937q l1938q l1939q l1940q l1941q l1942q l1943q
-     l1944q l1945q l1946q l1947q l1948q l1949q l1950q l1951q
-     l1952q l1953q l1954q l1955q l1956q l1957q l1958q l1959q
-     l1960q l1961q l1962q l1963q l1964q l1965q l1966q l1967q
-     l1968q l1969q l1970q l1971q l1972q l1973q l1974q l1975q
-     l1976q l1977q l1978q l1979q l1980q l1981q l1982q l1983q
-     l1984q l1985q l1986q l1987q l1988q l1989q l1990q l1991q
-     l1992q l1993q l1994q l1995q l1996q l1997q l1998q l1999q
-     l2000q l2001q l2002q l2003q l2004q l2005q l2006q l2007q
-     l2008q l2009q l2010q l2011q l2012q l2013q l2014q l2015q
-     l2016q l2017q l2018q l2019q l2020q l2021q l2022q l2023q
-     l2024q l2025q l2026q l2027q l2028q l2029q l2030q l2031q
-     l2032q l2033q l2034q l2035q l2036q l2037q l2038q l2039q
-     l2040q l2041q l2042q l2043q l2044q l2045q l2046q l2047q
-     l2048q l2049q l2050q l2051q l2052q l2053q l2054q l2055q
-     l2056q l2057q l2058q l2059q l2060q l2061q l2062q l2063q
-     l2064q l2065q l2066q l2067q l2068q l2069q l2070q l2071q
-     l2072q l2073q l2074q l2075q l2076q l2077q l2078q l2079q
-     l2080q l2081q l2082q l2083q l2084q l2085q l2086q l2087q
-     l2088q l2089q l2090q l2091q l2092q l2093q l2094q l2095q
-     l2096q l2097q l2098q l2099q l2100q l2101q l2102q l2103q
-     l2104q l2105q l2106q l2107q l2108q l2109q l2110q l2111q
-     l2112q l2113q l2114q l2115q l2116q l2117q l2118q l2119q
-     l2120q l2121q l2122q l2123q l2124q l2125q l2126q l2127q
-     l2128q l2129q l2130q l2131q l2132q l2133q l2134q l2135q
-     l2136q l2137q l2138q l2139q l2140q l2141q l2142q l2143q
-     l2144q l2145q l2146q l2147q l2148q l2149q l2150q l2151q
-     l2152q l2153q l2154q l2155q l2156q l2157q l2158q l2159q
-     l2160q l2161q l2162q l2163q l2164q l2165q l2166q l2167q
-     l2168q l2169q l2170q l2171q l2172q l2173q l2174q l2175q
-     l2176q l2177q l2178q l2179q l2180q l2181q l2182q l2183q
-     l2184q l2185q l2186q l2187q l2188q l2189q l2190q l2191q
-     l2192q l2193q l2194q l2195q l2196q l2197q l2198q l2199q
-     l2200q l2201q l2202q l2203q l2204q l2205q l2206q l2207q
-     l2208q l2209q l2210q l2211q l2212q l2213q l2214q l2215q
-     l2216q l2217q l2218q l2219q l2220q l2221q l2222q l2223q
-     l2224q l2225q l2226q l2227q l2228q l2229q l2230q l2231q
-     l2232q l2233q l2234q l2235q l2236q l2237q l2238q l2239q
-     l2240q l2241q l2242q l2243q l2244q l2245q l2246q l2247q
-     l2248q l2249q l2250q l2251q l2252q l2253q l2254q l2255q
-     l2256q l2257q l2258q l2259q l2260q l2261q l2262q l2263q
-     l2264q l2265q l2266q l2267q l2268q l2269q l2270q l2271q
-     l2272q l2273q l2274q l2275q l2276q l2277q l2278q l2279q
-     l2280q l2281q l2282q l2283q l2284q l2285q l2286q l2287q
-     l2288q l2289q l2290q l2291q l2292q l2293q l2294q l2295q
-     l2296q l2297q l2298q l2299q l2300q l2301q l2302q l2303q
-     l2304q l2305q l2306q l2307q l2308q l2309q l2310q l2311q
-     l2312q l2313q l2314q l2315q l2316q l2317q l2318q l2319q
-     l2320q l2321q l2322q l2323q l2324q l2325q l2326q l2327q
-     l2328q l2329q l2330q l2331q l2332q l2333q l2334q l2335q
-     l2336q l2337q l2338q l2339q l2340q l2341q l2342q l2343q
-     l2344q l2345q l2346q l2347q l2348q l2349q l2350q l2351q
-     l2352q l2353q l2354q l2355q l2356q l2357q l2358q l2359q
-     l2360q l2361q l2362q l2363q l2364q l2365q l2366q l2367q
-     l2368q l2369q l2370q l2371q l2372q l2373q l2374q l2375q
-     l2376q l2377q l2378q l2379q l2380q l2381q l2382q l2383q
-     l2384q l2385q l2386q l2387q l2388q l2389q l2390q l2391q
-     l2392q l2393q l2394q l2395q l2396q l2397q l2398q l2399q
-     l2400q l2401q l2402q l2403q l2404q l2405q l2406q l2407q
-     l2408q l2409q l2410q l2411q l2412q l2413q l2414q l2415q
-     l2416q l2417q l2418q l2419q l2420q l2421q l2422q l2423q
-     l2424q l2425q l2426q l2427q l2428q l2429q l2430q l2431q
-     l2432q l2433q l2434q l2435q l2436q l2437q l2438q l2439q
-     l2440q l2441q l2442q l2443q l2444q l2445q l2446q l2447q
-     l2448q l2449q l2450q l2451q l2452q l2453q l2454q l2455q
-     l2456q l2457q l2458q l2459q l2460q l2461q l2462q l2463q
-     l2464q l2465q l2466q l2467q l2468q l2469q l2470q l2471q
-     l2472q l2473q l2474q l2475q l2476q l2477q l2478q l2479q
-     l2480q l2481q l2482q l2483q l2484q l2485q l2486q l2487q
-     l2488q l2489q l2490q l2491q l2492q l2493q l2494q l2495q
-     l2496q l2497q l2498q l2499q l2500q l2501q l2502q l2503q
-     l2504q l2505q l2506q l2507q l2508q l2509q l2510q l2511q
-     l2512q l2513q l2514q l2515q l2516q l2517q l2518q l2519q
-     l2520q l2521q l2522q l2523q l2524q l2525q l2526q l2527q
-     l2528q l2529q l2530q l2531q l2532q l2533q l2534q l2535q
-     l2536q l2537q l2538q l2539q l2540q l2541q l2542q l2543q
-     l2544q l2545q l2546q l2547q l2548q l2549q l2550q l2551q
-     l2552q l2553q l2554q l2555q l2556q l2557q l2558q l2559q
-     l2560q l2561q l2562q l2563q l2564q l2565q l2566q l2567q
-     l2568q l2569q l2570q l2571q l2572q l2573q l2574q l2575q
-     l2576q l2577q l2578q l2579q l2580q l2581q l2582q l2583q
-     l2584q l2585q l2586q l2587q l2588q l2589q l2590q l2591q
-     l2592q l2593q l2594q l2595q l2596q l2597q l2598q l2599q
-     l2600q l2601q l2602q l2603q l2604q l2605q l2606q l2607q
-     l2608q l2609q l2610q l2611q l2612q l2613q l2614q l2615q
-     l2616q l2617q l2618q l2619q l2620q l2621q l2622q l2623q
-     l2624q l2625q l2626q l2627q l2628q l2629q l2630q l2631q
-     l2632q l2633q l2634q l2635q l2636q l2637q l2638q l2639q
-     l2640q l2641q l2642q l2643q l2644q l2645q l2646q l2647q
-     l2648q l2649q l2650q l2651q l2652q l2653q l2654q l2655q
-     l2656q l2657q l2658q l2659q l2660q l2661q l2662q l2663q
-     l2664q l2665q l2666q l2667q l2668q l2669q l2670q l2671q
-     l2672q l2673q l2674q l2675q l2676q l2677q l2678q l2679q
-     l2680q l2681q l2682q l2683q l2684q l2685q l2686q l2687q
-     l2688q l2689q l2690q l2691q l2692q l2693q l2694q l2695q
-     l2696q l2697q l2698q l2699q l2700q l2701q l2702q l2703q
-     l2704q l2705q l2706q l2707q l2708q l2709q l2710q l2711q
-     l2712q l2713q l2714q l2715q l2716q l2717q l2718q l2719q
-     l2720q l2721q l2722q l2723q l2724q l2725q l2726q l2727q
-     l2728q l2729q l2730q l2731q l2732q l2733q l2734q l2735q
-     l2736q l2737q l2738q l2739q l2740q l2741q l2742q l2743q
-     l2744q l2745q l2746q l2747q l2748q l2749q l2750q l2751q
-     l2752q l2753q l2754q l2755q l2756q l2757q l2758q l2759q
-     l2760q l2761q l2762q l2763q l2764q l2765q l2766q l2767q
-     l2768q l2769q l2770q l2771q l2772q l2773q l2774q l2775q
-     l2776q l2777q l2778q l2779q l2780q l2781q l2782q l2783q
-     l2784q l2785q l2786q l2787q l2788q l2789q l2790q l2791q
-     l2792q l2793q l2794q l2795q l2796q l2797q l2798q l2799q
-     l2800q l2801q l2802q l2803q l2804q l2805q l2806q l2807q
-     l2808q l2809q l2810q l2811q l2812q l2813q l2814q l2815q
-     l2816q l2817q l2818q l2819q l2820q l2821q l2822q l2823q
-     l2824q l2825q l2826q l2827q l2828q l2829q l2830q l2831q
-     l2832q l2833q l2834q l2835q l2836q l2837q l2838q l2839q
-     l2840q l2841q l2842q l2843q l2844q l2845q l2846q l2847q
-     l2848q l2849q l2850q l2851q l2852q l2853q l2854q l2855q
-     l2856q l2857q l2858q l2859q l2860q l2861q l2862q l2863q
-     l2864q l2865q l2866q l2867q l2868q l2869q l2870q l2871q
-     l2872q l2873q l2874q l2875q l2876q l2877q l2878q l2879q
-     l2880q l2881q l2882q l2883q l2884q l2885q l2886q l2887q
-     l2888q l2889q l2890q l2891q l2892q l2893q l2894q l2895q
-     l2896q l2897q l2898q l2899q l2900q l2901q l2902q l2903q
-     l2904q l2905q l2906q l2907q l2908q l2909q l2910q l2911q
-     l2912q l2913q l2914q l2915q l2916q l2917q l2918q l2919q
-     l2920q l2921q l2922q l2923q l2924q l2925q l2926q l2927q
-     l2928q l2929q l2930q l2931q l2932q l2933q l2934q l2935q
-     l2936q l2937q l2938q l2939q l2940q l2941q l2942q l2943q
-     l2944q l2945q l2946q l2947q l2948q l2949q l2950q l2951q
-     l2952q l2953q l2954q l2955q l2956q l2957q l2958q l2959q
-     l2960q l2961q l2962q l2963q l2964q l2965q l2966q l2967q
-     l2968q l2969q l2970q l2971q l2972q l2973q l2974q l2975q
-     l2976q l2977q l2978q l2979q l2980q l2981q l2982q l2983q
-     l2984q l2985q l2986q l2987q l2988q l2989q l2990q l2991q
-     l2992q l2993q l2994q l2995q l2996q l2997q l2998q l2999q
-     l3000q l3001q l3002q l3003q l3004q l3005q l3006q l3007q
-     l3008q l3009q l3010q l3011q l3012q l3013q l3014q l3015q
-     l3016q l3017q l3018q l3019q l3020q l3021q l3022q l3023q
-     l3024q l3025q l3026q l3027q l3028q l3029q l3030q l3031q
-     l3032q l3033q l3034q l3035q l3036q l3037q l3038q l3039q
-     l3040q l3041q l3042q l3043q l3044q l3045q l3046q l3047q
-     l3048q l3049q l3050q l3051q l3052q l3053q l3054q l3055q
-     l3056q l3057q l3058q l3059q l3060q l3061q l3062q l3063q
-     l3064q l3065q l3066q l3067q l3068q l3069q l3070q l3071q
-     l3072q l3073q l3074q l3075q l3076q l3077q l3078q l3079q
-     l3080q l3081q l3082q l3083q l3084q l3085q l3086q l3087q
-     l3088q l3089q l3090q l3091q l3092q l3093q l3094q l3095q
-     l3096q l3097q l3098q l3099q l3100q l3101q l3102q l3103q
-     l3104q l3105q l3106q l3107q l3108q l3109q l3110q l3111q
-     l3112q l3113q l3114q l3115q l3116q l3117q l3118q l3119q
-     l3120q l3121q l3122q l3123q l3124q l3125q l3126q l3127q
-     l3128q l3129q l3130q l3131q l3132q l3133q l3134q l3135q
-     l3136q l3137q l3138q l3139q l3140q l3141q l3142q l3143q
-     l3144q l3145q l3146q l3147q l3148q l3149q l3150q l3151q
-     l3152q l3153q l3154q l3155q l3156q l3157q l3158q l3159q
-     l3160q l3161q l3162q l3163q l3164q l3165q l3166q l3167q
-     l3168q l3169q l3170q l3171q l3172q l3173q l3174q l3175q
-     l3176q l3177q l3178q l3179q l3180q l3181q l3182q l3183q
-     l3184q l3185q l3186q l3187q l3188q l3189q l3190q l3191q
-     l3192q l3193q l3194q l3195q l3196q l3197q l3198q l3199q
-     l3200q l3201q l3202q l3203q l3204q l3205q l3206q l3207q
-     l3208q l3209q l3210q l3211q l3212q l3213q l3214q l3215q
-     l3216q l3217q l3218q l3219q l3220q l3221q l3222q l3223q
-     l3224q l3225q l3226q l3227q l3228q l3229q l3230q l3231q
-     l3232q l3233q l3234q l3235q l3236q l3237q l3238q l3239q
-     l3240q l3241q l3242q l3243q l3244q l3245q l3246q l3247q
-     l3248q l3249q l3250q l3251q l3252q l3253q l3254q l3255q
-     l3256q l3257q l3258q l3259q l3260q l3261q l3262q l3263q
-     l3264q l3265q l3266q l3267q l3268q l3269q l3270q l3271q
-     l3272q l3273q l3274q l3275q l3276q l3277q l3278q l3279q
-     l3280q l3281q l3282q l3283q l3284q l3285q l3286q l3287q
-     l3288q l3289q l3290q l3291q l3292q l3293q l3294q l3295q
-     l3296q l3297q l3298q l3299q l3300q l3301q l3302q l3303q
-     l3304q l3305q l3306q l3307q l3308q l3309q l3310q l3311q
-     l3312q l3313q l3314q l3315q l3316q l3317q l3318q l3319q
-     l3320q l3321q l3322q l3323q l3324q l3325q l3326q l3327q
-     l3328q l3329q l3330q l3331q l3332q l3333q l3334q l3335q
-     l3336q l3337q l3338q l3339q l3340q l3341q l3342q l3343q
-     l3344q l3345q l3346q l3347q l3348q l3349q l3350q l3351q
-     l3352q l3353q l3354q l3355q l3356q l3357q l3358q l3359q
-     l3360q l3361q l3362q l3363q l3364q l3365q l3366q l3367q
-     l3368q l3369q l3370q l3371q l3372q l3373q l3374q l3375q
-     l3376q l3377q l3378q l3379q l3380q l3381q l3382q l3383q
-     l3384q l3385q l3386q l3387q l3388q l3389q l3390q l3391q
-     l3392q l3393q l3394q l3395q l3396q l3397q l3398q l3399q
-     l3400q l3401q l3402q l3403q l3404q l3405q l3406q l3407q
-     l3408q l3409q l3410q l3411q l3412q l3413q l3414q l3415q
-     l3416q l3417q l3418q l3419q l3420q l3421q l3422q l3423q
-     l3424q l3425q l3426q l3427q l3428q l3429q l3430q l3431q
-     l3432q l3433q l3434q l3435q l3436q l3437q l3438q l3439q
-     l3440q l3441q l3442q l3443q l3444q l3445q l3446q l3447q
-     l3448q l3449q l3450q l3451q l3452q l3453q l3454q l3455q
-     l3456q l3457q l3458q l3459q l3460q l3461q l3462q l3463q
-     l3464q l3465q l3466q l3467q l3468q l3469q l3470q l3471q
-     l3472q l3473q l3474q l3475q l3476q l3477q l3478q l3479q
-     l3480q l3481q l3482q l3483q l3484q l3485q l3486q l3487q
-     l3488q l3489q l3490q l3491q l3492q l3493q l3494q l3495q
-     l3496q l3497q l3498q l3499q l3500q l3501q l3502q l3503q
-     l3504q l3505q l3506q l3507q l3508q l3509q l3510q l3511q
-     l3512q l3513q l3514q l3515q l3516q l3517q l3518q l3519q
-     l3520q l3521q l3522q l3523q l3524q l3525q l3526q l3527q
-     l3528q l3529q l3530q l3531q l3532q l3533q l3534q l3535q
-     l3536q l3537q l3538q l3539q l3540q l3541q l3542q l3543q
-     l3544q l3545q l3546q l3547q l3548q l3549q l3550q l3551q
-     l3552q l3553q l3554q l3555q l3556q l3557q l3558q l3559q
-     l3560q l3561q l3562q l3563q l3564q l3565q l3566q l3567q
-     l3568q l3569q l3570q l3571q l3572q l3573q l3574q l3575q
-     l3576q l3577q l3578q l3579q l3580q l3581q l3582q l3583q
-     l3584q l3585q l3586q l3587q l3588q l3589q l3590q l3591q
-     l3592q l3593q l3594q l3595q l3596q l3597q l3598q l3599q
-     l3600q l3601q l3602q l3603q l3604q l3605q l3606q l3607q
-     l3608q l3609q l3610q l3611q l3612q l3613q l3614q l3615q
-     l3616q l3617q l3618q l3619q l3620q l3621q l3622q l3623q
-     l3624q l3625q l3626q l3627q l3628q l3629q l3630q l3631q
-     l3632q l3633q l3634q l3635q l3636q l3637q l3638q l3639q
-     l3640q l3641q l3642q l3643q l3644q l3645q l3646q l3647q
-     l3648q l3649q l3650q l3651q l3652q l3653q l3654q l3655q
-     l3656q l3657q l3658q l3659q l3660q l3661q l3662q l3663q
-     l3664q l3665q l3666q l3667q l3668q l3669q l3670q l3671q
-     l3672q l3673q l3674q l3675q l3676q l3677q l3678q l3679q
-     l3680q l3681q l3682q l3683q l3684q l3685q l3686q l3687q
-     l3688q l3689q l3690q l3691q l3692q l3693q l3694q l3695q
-     l3696q l3697q l3698q l3699q l3700q l3701q l3702q l3703q
-     l3704q l3705q l3706q l3707q l3708q l3709q l3710q l3711q
-     l3712q l3713q l3714q l3715q l3716q l3717q l3718q l3719q
-     l3720q l3721q l3722q l3723q l3724q l3725q l3726q l3727q
-     l3728q l3729q l3730q l3731q l3732q l3733q l3734q l3735q
-     l3736q l3737q l3738q l3739q l3740q l3741q l3742q l3743q
-     l3744q l3745q l3746q l3747q l3748q l3749q l3750q l3751q
-     l3752q l3753q l3754q l3755q l3756q l3757q l3758q l3759q
-     l3760q l3761q l3762q l3763q l3764q l3765q l3766q l3767q
-     l3768q l3769q l3770q l3771q l3772q l3773q l3774q l3775q
-     l3776q l3777q l3778q l3779q l3780q l3781q l3782q l3783q
-     l3784q l3785q l3786q l3787q l3788q l3789q l3790q l3791q
-     l3792q l3793q l3794q l3795q l3796q l3797q l3798q l3799q
-     l3800q l3801q l3802q l3803q l3804q l3805q l3806q l3807q
-     l3808q l3809q l3810q l3811q l3812q l3813q l3814q l3815q
-     l3816q l3817q l3818q l3819q l3820q l3821q l3822q l3823q
-     l3824q l3825q l3826q l3827q l3828q l3829q l3830q l3831q
-     l3832q l3833q l3834q l3835q l3836q l3837q l3838q l3839q
-     l3840q l3841q l3842q l3843q l3844q l3845q l3846q l3847q
-     l3848q l3849q l3850q l3851q l3852q l3853q l3854q l3855q
-     l3856q l3857q l3858q l3859q l3860q l3861q l3862q l3863q
-     l3864q l3865q l3866q l3867q l3868q l3869q l3870q l3871q
-     l3872q l3873q l3874q l3875q l3876q l3877q l3878q l3879q
-     l3880q l3881q l3882q l3883q l3884q l3885q l3886q l3887q
-     l3888q l3889q l3890q l3891q l3892q l3893q l3894q l3895q
-     l3896q l3897q l3898q l3899q l3900q l3901q l3902q l3903q
-     l3904q l3905q l3906q l3907q l3908q l3909q l3910q l3911q
-     l3912q l3913q l3914q l3915q l3916q l3917q l3918q l3919q
-     l3920q l3921q l3922q l3923q l3924q l3925q l3926q l3927q
-     l3928q l3929q l3930q l3931q l3932q l3933q l3934q l3935q
-     l3936q l3937q l3938q l3939q l3940q l3941q l3942q l3943q
-     l3944q l3945q l3946q l3947q l3948q l3949q l3950q l3951q
-     l3952q l3953q l3954q l3955q l3956q l3957q l3958q l3959q
-     l3960q l3961q l3962q l3963q l3964q l3965q l3966q l3967q
-     l3968q l3969q l3970q l3971q l3972q l3973q l3974q l3975q
-     l3976q l3977q l3978q l3979q l3980q l3981q l3982q l3983q
-     l3984q l3985q l3986q l3987q l3988q l3989q l3990q l3991q
-     l3992q l3993q l3994q l3995q l3996q l3997q l3998q l3999q
-     l4000q l4001q l4002q l4003q l4004q l4005q l4006q l4007q
-     l4008q l4009q l4010q l4011q l4012q l4013q l4014q l4015q
-     l4016q l4017q l4018q l4019q l4020q l4021q l4022q l4023q
-     l4024q l4025q l4026q l4027q l4028q l4029q l4030q l4031q
-     l4032q l4033q l4034q l4035q l4036q l4037q l4038q l4039q
-     l4040q l4041q l4042q l4043q l4044q l4045q l4046q l4047q
-     l4048q l4049q l4050q l4051q l4052q l4053q l4054q l4055q
-     l4056q l4057q l4058q l4059q l4060q l4061q l4062q l4063q
-     l4064q l4065q l4066q l4067q l4068q l4069q l4070q l4071q
-     l4072q l4073q l4074q l4075q l4076q l4077q l4078q l4079q
-     l4080q l4081q l4082q l4083q l4084q l4085q l4086q l4087q
-     l4088q l4089q l4090q l4091q l4092q l4093q l4094q l4095q
+       l0q _    l1q _    l2q _    l3q _    l4q _    l5q _    l6q _    l7q _
+       l8q _    l9q _   l10q _   l11q _   l12q _   l13q _   l14q _   l15q _
+      l16q _   l17q _   l18q _   l19q _   l20q _   l21q _   l22q _   l23q _
+      l24q _   l25q _   l26q _   l27q _   l28q _   l29q _   l30q _   l31q _
+      l32q _   l33q _   l34q _   l35q _   l36q _   l37q _   l38q _   l39q _
+      l40q _   l41q _   l42q _   l43q _   l44q _   l45q _   l46q _   l47q _
+      l48q _   l49q _   l50q _   l51q _   l52q _   l53q _   l54q _   l55q _
+      l56q _   l57q _   l58q _   l59q _   l60q _   l61q _   l62q _   l63q _
+      l64q _   l65q _   l66q _   l67q _   l68q _   l69q _   l70q _   l71q _
+      l72q _   l73q _   l74q _   l75q _   l76q _   l77q _   l78q _   l79q _
+      l80q _   l81q _   l82q _   l83q _   l84q _   l85q _   l86q _   l87q _
+      l88q _   l89q _   l90q _   l91q _   l92q _   l93q _   l94q _   l95q _
+      l96q _   l97q _   l98q _   l99q _  l100q _  l101q _  l102q _  l103q _
+     l104q _  l105q _  l106q _  l107q _  l108q _  l109q _  l110q _  l111q _
+     l112q _  l113q _  l114q _  l115q _  l116q _  l117q _  l118q _  l119q _
+     l120q _  l121q _  l122q _  l123q _  l124q _  l125q _  l126q _  l127q _
+     l128q _  l129q _  l130q _  l131q _  l132q _  l133q _  l134q _  l135q _
+     l136q _  l137q _  l138q _  l139q _  l140q _  l141q _  l142q _  l143q _
+     l144q _  l145q _  l146q _  l147q _  l148q _  l149q _  l150q _  l151q _
+     l152q _  l153q _  l154q _  l155q _  l156q _  l157q _  l158q _  l159q _
+     l160q _  l161q _  l162q _  l163q _  l164q _  l165q _  l166q _  l167q _
+     l168q _  l169q _  l170q _  l171q _  l172q _  l173q _  l174q _  l175q _
+     l176q _  l177q _  l178q _  l179q _  l180q _  l181q _  l182q _  l183q _
+     l184q _  l185q _  l186q _  l187q _  l188q _  l189q _  l190q _  l191q _
+     l192q _  l193q _  l194q _  l195q _  l196q _  l197q _  l198q _  l199q _
+     l200q _  l201q _  l202q _  l203q _  l204q _  l205q _  l206q _  l207q _
+     l208q _  l209q _  l210q _  l211q _  l212q _  l213q _  l214q _  l215q _
+     l216q _  l217q _  l218q _  l219q _  l220q _  l221q _  l222q _  l223q _
+     l224q _  l225q _  l226q _  l227q _  l228q _  l229q _  l230q _  l231q _
+     l232q _  l233q _  l234q _  l235q _  l236q _  l237q _  l238q _  l239q _
+     l240q _  l241q _  l242q _  l243q _  l244q _  l245q _  l246q _  l247q _
+     l248q _  l249q _  l250q _  l251q _  l252q _  l253q _  l254q _  l255q _
+     l256q _  l257q _  l258q _  l259q _  l260q _  l261q _  l262q _  l263q _
+     l264q _  l265q _  l266q _  l267q _  l268q _  l269q _  l270q _  l271q _
+     l272q _  l273q _  l274q _  l275q _  l276q _  l277q _  l278q _  l279q _
+     l280q _  l281q _  l282q _  l283q _  l284q _  l285q _  l286q _  l287q _
+     l288q _  l289q _  l290q _  l291q _  l292q _  l293q _  l294q _  l295q _
+     l296q _  l297q _  l298q _  l299q _  l300q _  l301q _  l302q _  l303q _
+     l304q _  l305q _  l306q _  l307q _  l308q _  l309q _  l310q _  l311q _
+     l312q _  l313q _  l314q _  l315q _  l316q _  l317q _  l318q _  l319q _
+     l320q _  l321q _  l322q _  l323q _  l324q _  l325q _  l326q _  l327q _
+     l328q _  l329q _  l330q _  l331q _  l332q _  l333q _  l334q _  l335q _
+     l336q _  l337q _  l338q _  l339q _  l340q _  l341q _  l342q _  l343q _
+     l344q _  l345q _  l346q _  l347q _  l348q _  l349q _  l350q _  l351q _
+     l352q _  l353q _  l354q _  l355q _  l356q _  l357q _  l358q _  l359q _
+     l360q _  l361q _  l362q _  l363q _  l364q _  l365q _  l366q _  l367q _
+     l368q _  l369q _  l370q _  l371q _  l372q _  l373q _  l374q _  l375q _
+     l376q _  l377q _  l378q _  l379q _  l380q _  l381q _  l382q _  l383q _
+     l384q _  l385q _  l386q _  l387q _  l388q _  l389q _  l390q _  l391q _
+     l392q _  l393q _  l394q _  l395q _  l396q _  l397q _  l398q _  l399q _
+     l400q _  l401q _  l402q _  l403q _  l404q _  l405q _  l406q _  l407q _
+     l408q _  l409q _  l410q _  l411q _  l412q _  l413q _  l414q _  l415q _
+     l416q _  l417q _  l418q _  l419q _  l420q _  l421q _  l422q _  l423q _
+     l424q _  l425q _  l426q _  l427q _  l428q _  l429q _  l430q _  l431q _
+     l432q _  l433q _  l434q _  l435q _  l436q _  l437q _  l438q _  l439q _
+     l440q _  l441q _  l442q _  l443q _  l444q _  l445q _  l446q _  l447q _
+     l448q _  l449q _  l450q _  l451q _  l452q _  l453q _  l454q _  l455q _
+     l456q _  l457q _  l458q _  l459q _  l460q _  l461q _  l462q _  l463q _
+     l464q _  l465q _  l466q _  l467q _  l468q _  l469q _  l470q _  l471q _
+     l472q _  l473q _  l474q _  l475q _  l476q _  l477q _  l478q _  l479q _
+     l480q _  l481q _  l482q _  l483q _  l484q _  l485q _  l486q _  l487q _
+     l488q _  l489q _  l490q _  l491q _  l492q _  l493q _  l494q _  l495q _
+     l496q _  l497q _  l498q _  l499q _  l500q _  l501q _  l502q _  l503q _
+     l504q _  l505q _  l506q _  l507q _  l508q _  l509q _  l510q _  l511q _
+     l512q _  l513q _  l514q _  l515q _  l516q _  l517q _  l518q _  l519q _
+     l520q _  l521q _  l522q _  l523q _  l524q _  l525q _  l526q _  l527q _
+     l528q _  l529q _  l530q _  l531q _  l532q _  l533q _  l534q _  l535q _
+     l536q _  l537q _  l538q _  l539q _  l540q _  l541q _  l542q _  l543q _
+     l544q _  l545q _  l546q _  l547q _  l548q _  l549q _  l550q _  l551q _
+     l552q _  l553q _  l554q _  l555q _  l556q _  l557q _  l558q _  l559q _
+     l560q _  l561q _  l562q _  l563q _  l564q _  l565q _  l566q _  l567q _
+     l568q _  l569q _  l570q _  l571q _  l572q _  l573q _  l574q _  l575q _
+     l576q _  l577q _  l578q _  l579q _  l580q _  l581q _  l582q _  l583q _
+     l584q _  l585q _  l586q _  l587q _  l588q _  l589q _  l590q _  l591q _
+     l592q _  l593q _  l594q _  l595q _  l596q _  l597q _  l598q _  l599q _
+     l600q _  l601q _  l602q _  l603q _  l604q _  l605q _  l606q _  l607q _
+     l608q _  l609q _  l610q _  l611q _  l612q _  l613q _  l614q _  l615q _
+     l616q _  l617q _  l618q _  l619q _  l620q _  l621q _  l622q _  l623q _
+     l624q _  l625q _  l626q _  l627q _  l628q _  l629q _  l630q _  l631q _
+     l632q _  l633q _  l634q _  l635q _  l636q _  l637q _  l638q _  l639q _
+     l640q _  l641q _  l642q _  l643q _  l644q _  l645q _  l646q _  l647q _
+     l648q _  l649q _  l650q _  l651q _  l652q _  l653q _  l654q _  l655q _
+     l656q _  l657q _  l658q _  l659q _  l660q _  l661q _  l662q _  l663q _
+     l664q _  l665q _  l666q _  l667q _  l668q _  l669q _  l670q _  l671q _
+     l672q _  l673q _  l674q _  l675q _  l676q _  l677q _  l678q _  l679q _
+     l680q _  l681q _  l682q _  l683q _  l684q _  l685q _  l686q _  l687q _
+     l688q _  l689q _  l690q _  l691q _  l692q _  l693q _  l694q _  l695q _
+     l696q _  l697q _  l698q _  l699q _  l700q _  l701q _  l702q _  l703q _
+     l704q _  l705q _  l706q _  l707q _  l708q _  l709q _  l710q _  l711q _
+     l712q _  l713q _  l714q _  l715q _  l716q _  l717q _  l718q _  l719q _
+     l720q _  l721q _  l722q _  l723q _  l724q _  l725q _  l726q _  l727q _
+     l728q _  l729q _  l730q _  l731q _  l732q _  l733q _  l734q _  l735q _
+     l736q _  l737q _  l738q _  l739q _  l740q _  l741q _  l742q _  l743q _
+     l744q _  l745q _  l746q _  l747q _  l748q _  l749q _  l750q _  l751q _
+     l752q _  l753q _  l754q _  l755q _  l756q _  l757q _  l758q _  l759q _
+     l760q _  l761q _  l762q _  l763q _  l764q _  l765q _  l766q _  l767q _
+     l768q _  l769q _  l770q _  l771q _  l772q _  l773q _  l774q _  l775q _
+     l776q _  l777q _  l778q _  l779q _  l780q _  l781q _  l782q _  l783q _
+     l784q _  l785q _  l786q _  l787q _  l788q _  l789q _  l790q _  l791q _
+     l792q _  l793q _  l794q _  l795q _  l796q _  l797q _  l798q _  l799q _
+     l800q _  l801q _  l802q _  l803q _  l804q _  l805q _  l806q _  l807q _
+     l808q _  l809q _  l810q _  l811q _  l812q _  l813q _  l814q _  l815q _
+     l816q _  l817q _  l818q _  l819q _  l820q _  l821q _  l822q _  l823q _
+     l824q _  l825q _  l826q _  l827q _  l828q _  l829q _  l830q _  l831q _
+     l832q _  l833q _  l834q _  l835q _  l836q _  l837q _  l838q _  l839q _
+     l840q _  l841q _  l842q _  l843q _  l844q _  l845q _  l846q _  l847q _
+     l848q _  l849q _  l850q _  l851q _  l852q _  l853q _  l854q _  l855q _
+     l856q _  l857q _  l858q _  l859q _  l860q _  l861q _  l862q _  l863q _
+     l864q _  l865q _  l866q _  l867q _  l868q _  l869q _  l870q _  l871q _
+     l872q _  l873q _  l874q _  l875q _  l876q _  l877q _  l878q _  l879q _
+     l880q _  l881q _  l882q _  l883q _  l884q _  l885q _  l886q _  l887q _
+     l888q _  l889q _  l890q _  l891q _  l892q _  l893q _  l894q _  l895q _
+     l896q _  l897q _  l898q _  l899q _  l900q _  l901q _  l902q _  l903q _
+     l904q _  l905q _  l906q _  l907q _  l908q _  l909q _  l910q _  l911q _
+     l912q _  l913q _  l914q _  l915q _  l916q _  l917q _  l918q _  l919q _
+     l920q _  l921q _  l922q _  l923q _  l924q _  l925q _  l926q _  l927q _
+     l928q _  l929q _  l930q _  l931q _  l932q _  l933q _  l934q _  l935q _
+     l936q _  l937q _  l938q _  l939q _  l940q _  l941q _  l942q _  l943q _
+     l944q _  l945q _  l946q _  l947q _  l948q _  l949q _  l950q _  l951q _
+     l952q _  l953q _  l954q _  l955q _  l956q _  l957q _  l958q _  l959q _
+     l960q _  l961q _  l962q _  l963q _  l964q _  l965q _  l966q _  l967q _
+     l968q _  l969q _  l970q _  l971q _  l972q _  l973q _  l974q _  l975q _
+     l976q _  l977q _  l978q _  l979q _  l980q _  l981q _  l982q _  l983q _
+     l984q _  l985q _  l986q _  l987q _  l988q _  l989q _  l990q _  l991q _
+     l992q _  l993q _  l994q _  l995q _  l996q _  l997q _  l998q _  l999q _
+    l1000q _ l1001q _ l1002q _ l1003q _ l1004q _ l1005q _ l1006q _ l1007q _
+    l1008q _ l1009q _ l1010q _ l1011q _ l1012q _ l1013q _ l1014q _ l1015q _
+    l1016q _ l1017q _ l1018q _ l1019q _ l1020q _ l1021q _ l1022q _ l1023q _
+    l1024q _ l1025q _ l1026q _ l1027q _ l1028q _ l1029q _ l1030q _ l1031q _
+    l1032q _ l1033q _ l1034q _ l1035q _ l1036q _ l1037q _ l1038q _ l1039q _
+    l1040q _ l1041q _ l1042q _ l1043q _ l1044q _ l1045q _ l1046q _ l1047q _
+    l1048q _ l1049q _ l1050q _ l1051q _ l1052q _ l1053q _ l1054q _ l1055q _
+    l1056q _ l1057q _ l1058q _ l1059q _ l1060q _ l1061q _ l1062q _ l1063q _
+    l1064q _ l1065q _ l1066q _ l1067q _ l1068q _ l1069q _ l1070q _ l1071q _
+    l1072q _ l1073q _ l1074q _ l1075q _ l1076q _ l1077q _ l1078q _ l1079q _
+    l1080q _ l1081q _ l1082q _ l1083q _ l1084q _ l1085q _ l1086q _ l1087q _
+    l1088q _ l1089q _ l1090q _ l1091q _ l1092q _ l1093q _ l1094q _ l1095q _
+    l1096q _ l1097q _ l1098q _ l1099q _ l1100q _ l1101q _ l1102q _ l1103q _
+    l1104q _ l1105q _ l1106q _ l1107q _ l1108q _ l1109q _ l1110q _ l1111q _
+    l1112q _ l1113q _ l1114q _ l1115q _ l1116q _ l1117q _ l1118q _ l1119q _
+    l1120q _ l1121q _ l1122q _ l1123q _ l1124q _ l1125q _ l1126q _ l1127q _
+    l1128q _ l1129q _ l1130q _ l1131q _ l1132q _ l1133q _ l1134q _ l1135q _
+    l1136q _ l1137q _ l1138q _ l1139q _ l1140q _ l1141q _ l1142q _ l1143q _
+    l1144q _ l1145q _ l1146q _ l1147q _ l1148q _ l1149q _ l1150q _ l1151q _
+    l1152q _ l1153q _ l1154q _ l1155q _ l1156q _ l1157q _ l1158q _ l1159q _
+    l1160q _ l1161q _ l1162q _ l1163q _ l1164q _ l1165q _ l1166q _ l1167q _
+    l1168q _ l1169q _ l1170q _ l1171q _ l1172q _ l1173q _ l1174q _ l1175q _
+    l1176q _ l1177q _ l1178q _ l1179q _ l1180q _ l1181q _ l1182q _ l1183q _
+    l1184q _ l1185q _ l1186q _ l1187q _ l1188q _ l1189q _ l1190q _ l1191q _
+    l1192q _ l1193q _ l1194q _ l1195q _ l1196q _ l1197q _ l1198q _ l1199q _
+    l1200q _ l1201q _ l1202q _ l1203q _ l1204q _ l1205q _ l1206q _ l1207q _
+    l1208q _ l1209q _ l1210q _ l1211q _ l1212q _ l1213q _ l1214q _ l1215q _
+    l1216q _ l1217q _ l1218q _ l1219q _ l1220q _ l1221q _ l1222q _ l1223q _
+    l1224q _ l1225q _ l1226q _ l1227q _ l1228q _ l1229q _ l1230q _ l1231q _
+    l1232q _ l1233q _ l1234q _ l1235q _ l1236q _ l1237q _ l1238q _ l1239q _
+    l1240q _ l1241q _ l1242q _ l1243q _ l1244q _ l1245q _ l1246q _ l1247q _
+    l1248q _ l1249q _ l1250q _ l1251q _ l1252q _ l1253q _ l1254q _ l1255q _
+    l1256q _ l1257q _ l1258q _ l1259q _ l1260q _ l1261q _ l1262q _ l1263q _
+    l1264q _ l1265q _ l1266q _ l1267q _ l1268q _ l1269q _ l1270q _ l1271q _
+    l1272q _ l1273q _ l1274q _ l1275q _ l1276q _ l1277q _ l1278q _ l1279q _
+    l1280q _ l1281q _ l1282q _ l1283q _ l1284q _ l1285q _ l1286q _ l1287q _
+    l1288q _ l1289q _ l1290q _ l1291q _ l1292q _ l1293q _ l1294q _ l1295q _
+    l1296q _ l1297q _ l1298q _ l1299q _ l1300q _ l1301q _ l1302q _ l1303q _
+    l1304q _ l1305q _ l1306q _ l1307q _ l1308q _ l1309q _ l1310q _ l1311q _
+    l1312q _ l1313q _ l1314q _ l1315q _ l1316q _ l1317q _ l1318q _ l1319q _
+    l1320q _ l1321q _ l1322q _ l1323q _ l1324q _ l1325q _ l1326q _ l1327q _
+    l1328q _ l1329q _ l1330q _ l1331q _ l1332q _ l1333q _ l1334q _ l1335q _
+    l1336q _ l1337q _ l1338q _ l1339q _ l1340q _ l1341q _ l1342q _ l1343q _
+    l1344q _ l1345q _ l1346q _ l1347q _ l1348q _ l1349q _ l1350q _ l1351q _
+    l1352q _ l1353q _ l1354q _ l1355q _ l1356q _ l1357q _ l1358q _ l1359q _
+    l1360q _ l1361q _ l1362q _ l1363q _ l1364q _ l1365q _ l1366q _ l1367q _
+    l1368q _ l1369q _ l1370q _ l1371q _ l1372q _ l1373q _ l1374q _ l1375q _
+    l1376q _ l1377q _ l1378q _ l1379q _ l1380q _ l1381q _ l1382q _ l1383q _
+    l1384q _ l1385q _ l1386q _ l1387q _ l1388q _ l1389q _ l1390q _ l1391q _
+    l1392q _ l1393q _ l1394q _ l1395q _ l1396q _ l1397q _ l1398q _ l1399q _
+    l1400q _ l1401q _ l1402q _ l1403q _ l1404q _ l1405q _ l1406q _ l1407q _
+    l1408q _ l1409q _ l1410q _ l1411q _ l1412q _ l1413q _ l1414q _ l1415q _
+    l1416q _ l1417q _ l1418q _ l1419q _ l1420q _ l1421q _ l1422q _ l1423q _
+    l1424q _ l1425q _ l1426q _ l1427q _ l1428q _ l1429q _ l1430q _ l1431q _
+    l1432q _ l1433q _ l1434q _ l1435q _ l1436q _ l1437q _ l1438q _ l1439q _
+    l1440q _ l1441q _ l1442q _ l1443q _ l1444q _ l1445q _ l1446q _ l1447q _
+    l1448q _ l1449q _ l1450q _ l1451q _ l1452q _ l1453q _ l1454q _ l1455q _
+    l1456q _ l1457q _ l1458q _ l1459q _ l1460q _ l1461q _ l1462q _ l1463q _
+    l1464q _ l1465q _ l1466q _ l1467q _ l1468q _ l1469q _ l1470q _ l1471q _
+    l1472q _ l1473q _ l1474q _ l1475q _ l1476q _ l1477q _ l1478q _ l1479q _
+    l1480q _ l1481q _ l1482q _ l1483q _ l1484q _ l1485q _ l1486q _ l1487q _
+    l1488q _ l1489q _ l1490q _ l1491q _ l1492q _ l1493q _ l1494q _ l1495q _
+    l1496q _ l1497q _ l1498q _ l1499q _ l1500q _ l1501q _ l1502q _ l1503q _
+    l1504q _ l1505q _ l1506q _ l1507q _ l1508q _ l1509q _ l1510q _ l1511q _
+    l1512q _ l1513q _ l1514q _ l1515q _ l1516q _ l1517q _ l1518q _ l1519q _
+    l1520q _ l1521q _ l1522q _ l1523q _ l1524q _ l1525q _ l1526q _ l1527q _
+    l1528q _ l1529q _ l1530q _ l1531q _ l1532q _ l1533q _ l1534q _ l1535q _
+    l1536q _ l1537q _ l1538q _ l1539q _ l1540q _ l1541q _ l1542q _ l1543q _
+    l1544q _ l1545q _ l1546q _ l1547q _ l1548q _ l1549q _ l1550q _ l1551q _
+    l1552q _ l1553q _ l1554q _ l1555q _ l1556q _ l1557q _ l1558q _ l1559q _
+    l1560q _ l1561q _ l1562q _ l1563q _ l1564q _ l1565q _ l1566q _ l1567q _
+    l1568q _ l1569q _ l1570q _ l1571q _ l1572q _ l1573q _ l1574q _ l1575q _
+    l1576q _ l1577q _ l1578q _ l1579q _ l1580q _ l1581q _ l1582q _ l1583q _
+    l1584q _ l1585q _ l1586q _ l1587q _ l1588q _ l1589q _ l1590q _ l1591q _
+    l1592q _ l1593q _ l1594q _ l1595q _ l1596q _ l1597q _ l1598q _ l1599q _
+    l1600q _ l1601q _ l1602q _ l1603q _ l1604q _ l1605q _ l1606q _ l1607q _
+    l1608q _ l1609q _ l1610q _ l1611q _ l1612q _ l1613q _ l1614q _ l1615q _
+    l1616q _ l1617q _ l1618q _ l1619q _ l1620q _ l1621q _ l1622q _ l1623q _
+    l1624q _ l1625q _ l1626q _ l1627q _ l1628q _ l1629q _ l1630q _ l1631q _
+    l1632q _ l1633q _ l1634q _ l1635q _ l1636q _ l1637q _ l1638q _ l1639q _
+    l1640q _ l1641q _ l1642q _ l1643q _ l1644q _ l1645q _ l1646q _ l1647q _
+    l1648q _ l1649q _ l1650q _ l1651q _ l1652q _ l1653q _ l1654q _ l1655q _
+    l1656q _ l1657q _ l1658q _ l1659q _ l1660q _ l1661q _ l1662q _ l1663q _
+    l1664q _ l1665q _ l1666q _ l1667q _ l1668q _ l1669q _ l1670q _ l1671q _
+    l1672q _ l1673q _ l1674q _ l1675q _ l1676q _ l1677q _ l1678q _ l1679q _
+    l1680q _ l1681q _ l1682q _ l1683q _ l1684q _ l1685q _ l1686q _ l1687q _
+    l1688q _ l1689q _ l1690q _ l1691q _ l1692q _ l1693q _ l1694q _ l1695q _
+    l1696q _ l1697q _ l1698q _ l1699q _ l1700q _ l1701q _ l1702q _ l1703q _
+    l1704q _ l1705q _ l1706q _ l1707q _ l1708q _ l1709q _ l1710q _ l1711q _
+    l1712q _ l1713q _ l1714q _ l1715q _ l1716q _ l1717q _ l1718q _ l1719q _
+    l1720q _ l1721q _ l1722q _ l1723q _ l1724q _ l1725q _ l1726q _ l1727q _
+    l1728q _ l1729q _ l1730q _ l1731q _ l1732q _ l1733q _ l1734q _ l1735q _
+    l1736q _ l1737q _ l1738q _ l1739q _ l1740q _ l1741q _ l1742q _ l1743q _
+    l1744q _ l1745q _ l1746q _ l1747q _ l1748q _ l1749q _ l1750q _ l1751q _
+    l1752q _ l1753q _ l1754q _ l1755q _ l1756q _ l1757q _ l1758q _ l1759q _
+    l1760q _ l1761q _ l1762q _ l1763q _ l1764q _ l1765q _ l1766q _ l1767q _
+    l1768q _ l1769q _ l1770q _ l1771q _ l1772q _ l1773q _ l1774q _ l1775q _
+    l1776q _ l1777q _ l1778q _ l1779q _ l1780q _ l1781q _ l1782q _ l1783q _
+    l1784q _ l1785q _ l1786q _ l1787q _ l1788q _ l1789q _ l1790q _ l1791q _
+    l1792q _ l1793q _ l1794q _ l1795q _ l1796q _ l1797q _ l1798q _ l1799q _
+    l1800q _ l1801q _ l1802q _ l1803q _ l1804q _ l1805q _ l1806q _ l1807q _
+    l1808q _ l1809q _ l1810q _ l1811q _ l1812q _ l1813q _ l1814q _ l1815q _
+    l1816q _ l1817q _ l1818q _ l1819q _ l1820q _ l1821q _ l1822q _ l1823q _
+    l1824q _ l1825q _ l1826q _ l1827q _ l1828q _ l1829q _ l1830q _ l1831q _
+    l1832q _ l1833q _ l1834q _ l1835q _ l1836q _ l1837q _ l1838q _ l1839q _
+    l1840q _ l1841q _ l1842q _ l1843q _ l1844q _ l1845q _ l1846q _ l1847q _
+    l1848q _ l1849q _ l1850q _ l1851q _ l1852q _ l1853q _ l1854q _ l1855q _
+    l1856q _ l1857q _ l1858q _ l1859q _ l1860q _ l1861q _ l1862q _ l1863q _
+    l1864q _ l1865q _ l1866q _ l1867q _ l1868q _ l1869q _ l1870q _ l1871q _
+    l1872q _ l1873q _ l1874q _ l1875q _ l1876q _ l1877q _ l1878q _ l1879q _
+    l1880q _ l1881q _ l1882q _ l1883q _ l1884q _ l1885q _ l1886q _ l1887q _
+    l1888q _ l1889q _ l1890q _ l1891q _ l1892q _ l1893q _ l1894q _ l1895q _
+    l1896q _ l1897q _ l1898q _ l1899q _ l1900q _ l1901q _ l1902q _ l1903q _
+    l1904q _ l1905q _ l1906q _ l1907q _ l1908q _ l1909q _ l1910q _ l1911q _
+    l1912q _ l1913q _ l1914q _ l1915q _ l1916q _ l1917q _ l1918q _ l1919q _
+    l1920q _ l1921q _ l1922q _ l1923q _ l1924q _ l1925q _ l1926q _ l1927q _
+    l1928q _ l1929q _ l1930q _ l1931q _ l1932q _ l1933q _ l1934q _ l1935q _
+    l1936q _ l1937q _ l1938q _ l1939q _ l1940q _ l1941q _ l1942q _ l1943q _
+    l1944q _ l1945q _ l1946q _ l1947q _ l1948q _ l1949q _ l1950q _ l1951q _
+    l1952q _ l1953q _ l1954q _ l1955q _ l1956q _ l1957q _ l1958q _ l1959q _
+    l1960q _ l1961q _ l1962q _ l1963q _ l1964q _ l1965q _ l1966q _ l1967q _
+    l1968q _ l1969q _ l1970q _ l1971q _ l1972q _ l1973q _ l1974q _ l1975q _
+    l1976q _ l1977q _ l1978q _ l1979q _ l1980q _ l1981q _ l1982q _ l1983q _
+    l1984q _ l1985q _ l1986q _ l1987q _ l1988q _ l1989q _ l1990q _ l1991q _
+    l1992q _ l1993q _ l1994q _ l1995q _ l1996q _ l1997q _ l1998q _ l1999q _
+    l2000q _ l2001q _ l2002q _ l2003q _ l2004q _ l2005q _ l2006q _ l2007q _
+    l2008q _ l2009q _ l2010q _ l2011q _ l2012q _ l2013q _ l2014q _ l2015q _
+    l2016q _ l2017q _ l2018q _ l2019q _ l2020q _ l2021q _ l2022q _ l2023q _
+    l2024q _ l2025q _ l2026q _ l2027q _ l2028q _ l2029q _ l2030q _ l2031q _
+    l2032q _ l2033q _ l2034q _ l2035q _ l2036q _ l2037q _ l2038q _ l2039q _
+    l2040q _ l2041q _ l2042q _ l2043q _ l2044q _ l2045q _ l2046q _ l2047q _
+    l2048q _ l2049q _ l2050q _ l2051q _ l2052q _ l2053q _ l2054q _ l2055q _
+    l2056q _ l2057q _ l2058q _ l2059q _ l2060q _ l2061q _ l2062q _ l2063q _
+    l2064q _ l2065q _ l2066q _ l2067q _ l2068q _ l2069q _ l2070q _ l2071q _
+    l2072q _ l2073q _ l2074q _ l2075q _ l2076q _ l2077q _ l2078q _ l2079q _
+    l2080q _ l2081q _ l2082q _ l2083q _ l2084q _ l2085q _ l2086q _ l2087q _
+    l2088q _ l2089q _ l2090q _ l2091q _ l2092q _ l2093q _ l2094q _ l2095q _
+    l2096q _ l2097q _ l2098q _ l2099q _ l2100q _ l2101q _ l2102q _ l2103q _
+    l2104q _ l2105q _ l2106q _ l2107q _ l2108q _ l2109q _ l2110q _ l2111q _
+    l2112q _ l2113q _ l2114q _ l2115q _ l2116q _ l2117q _ l2118q _ l2119q _
+    l2120q _ l2121q _ l2122q _ l2123q _ l2124q _ l2125q _ l2126q _ l2127q _
+    l2128q _ l2129q _ l2130q _ l2131q _ l2132q _ l2133q _ l2134q _ l2135q _
+    l2136q _ l2137q _ l2138q _ l2139q _ l2140q _ l2141q _ l2142q _ l2143q _
+    l2144q _ l2145q _ l2146q _ l2147q _ l2148q _ l2149q _ l2150q _ l2151q _
+    l2152q _ l2153q _ l2154q _ l2155q _ l2156q _ l2157q _ l2158q _ l2159q _
+    l2160q _ l2161q _ l2162q _ l2163q _ l2164q _ l2165q _ l2166q _ l2167q _
+    l2168q _ l2169q _ l2170q _ l2171q _ l2172q _ l2173q _ l2174q _ l2175q _
+    l2176q _ l2177q _ l2178q _ l2179q _ l2180q _ l2181q _ l2182q _ l2183q _
+    l2184q _ l2185q _ l2186q _ l2187q _ l2188q _ l2189q _ l2190q _ l2191q _
+    l2192q _ l2193q _ l2194q _ l2195q _ l2196q _ l2197q _ l2198q _ l2199q _
+    l2200q _ l2201q _ l2202q _ l2203q _ l2204q _ l2205q _ l2206q _ l2207q _
+    l2208q _ l2209q _ l2210q _ l2211q _ l2212q _ l2213q _ l2214q _ l2215q _
+    l2216q _ l2217q _ l2218q _ l2219q _ l2220q _ l2221q _ l2222q _ l2223q _
+    l2224q _ l2225q _ l2226q _ l2227q _ l2228q _ l2229q _ l2230q _ l2231q _
+    l2232q _ l2233q _ l2234q _ l2235q _ l2236q _ l2237q _ l2238q _ l2239q _
+    l2240q _ l2241q _ l2242q _ l2243q _ l2244q _ l2245q _ l2246q _ l2247q _
+    l2248q _ l2249q _ l2250q _ l2251q _ l2252q _ l2253q _ l2254q _ l2255q _
+    l2256q _ l2257q _ l2258q _ l2259q _ l2260q _ l2261q _ l2262q _ l2263q _
+    l2264q _ l2265q _ l2266q _ l2267q _ l2268q _ l2269q _ l2270q _ l2271q _
+    l2272q _ l2273q _ l2274q _ l2275q _ l2276q _ l2277q _ l2278q _ l2279q _
+    l2280q _ l2281q _ l2282q _ l2283q _ l2284q _ l2285q _ l2286q _ l2287q _
+    l2288q _ l2289q _ l2290q _ l2291q _ l2292q _ l2293q _ l2294q _ l2295q _
+    l2296q _ l2297q _ l2298q _ l2299q _ l2300q _ l2301q _ l2302q _ l2303q _
+    l2304q _ l2305q _ l2306q _ l2307q _ l2308q _ l2309q _ l2310q _ l2311q _
+    l2312q _ l2313q _ l2314q _ l2315q _ l2316q _ l2317q _ l2318q _ l2319q _
+    l2320q _ l2321q _ l2322q _ l2323q _ l2324q _ l2325q _ l2326q _ l2327q _
+    l2328q _ l2329q _ l2330q _ l2331q _ l2332q _ l2333q _ l2334q _ l2335q _
+    l2336q _ l2337q _ l2338q _ l2339q _ l2340q _ l2341q _ l2342q _ l2343q _
+    l2344q _ l2345q _ l2346q _ l2347q _ l2348q _ l2349q _ l2350q _ l2351q _
+    l2352q _ l2353q _ l2354q _ l2355q _ l2356q _ l2357q _ l2358q _ l2359q _
+    l2360q _ l2361q _ l2362q _ l2363q _ l2364q _ l2365q _ l2366q _ l2367q _
+    l2368q _ l2369q _ l2370q _ l2371q _ l2372q _ l2373q _ l2374q _ l2375q _
+    l2376q _ l2377q _ l2378q _ l2379q _ l2380q _ l2381q _ l2382q _ l2383q _
+    l2384q _ l2385q _ l2386q _ l2387q _ l2388q _ l2389q _ l2390q _ l2391q _
+    l2392q _ l2393q _ l2394q _ l2395q _ l2396q _ l2397q _ l2398q _ l2399q _
+    l2400q _ l2401q _ l2402q _ l2403q _ l2404q _ l2405q _ l2406q _ l2407q _
+    l2408q _ l2409q _ l2410q _ l2411q _ l2412q _ l2413q _ l2414q _ l2415q _
+    l2416q _ l2417q _ l2418q _ l2419q _ l2420q _ l2421q _ l2422q _ l2423q _
+    l2424q _ l2425q _ l2426q _ l2427q _ l2428q _ l2429q _ l2430q _ l2431q _
+    l2432q _ l2433q _ l2434q _ l2435q _ l2436q _ l2437q _ l2438q _ l2439q _
+    l2440q _ l2441q _ l2442q _ l2443q _ l2444q _ l2445q _ l2446q _ l2447q _
+    l2448q _ l2449q _ l2450q _ l2451q _ l2452q _ l2453q _ l2454q _ l2455q _
+    l2456q _ l2457q _ l2458q _ l2459q _ l2460q _ l2461q _ l2462q _ l2463q _
+    l2464q _ l2465q _ l2466q _ l2467q _ l2468q _ l2469q _ l2470q _ l2471q _
+    l2472q _ l2473q _ l2474q _ l2475q _ l2476q _ l2477q _ l2478q _ l2479q _
+    l2480q _ l2481q _ l2482q _ l2483q _ l2484q _ l2485q _ l2486q _ l2487q _
+    l2488q _ l2489q _ l2490q _ l2491q _ l2492q _ l2493q _ l2494q _ l2495q _
+    l2496q _ l2497q _ l2498q _ l2499q _ l2500q _ l2501q _ l2502q _ l2503q _
+    l2504q _ l2505q _ l2506q _ l2507q _ l2508q _ l2509q _ l2510q _ l2511q _
+    l2512q _ l2513q _ l2514q _ l2515q _ l2516q _ l2517q _ l2518q _ l2519q _
+    l2520q _ l2521q _ l2522q _ l2523q _ l2524q _ l2525q _ l2526q _ l2527q _
+    l2528q _ l2529q _ l2530q _ l2531q _ l2532q _ l2533q _ l2534q _ l2535q _
+    l2536q _ l2537q _ l2538q _ l2539q _ l2540q _ l2541q _ l2542q _ l2543q _
+    l2544q _ l2545q _ l2546q _ l2547q _ l2548q _ l2549q _ l2550q _ l2551q _
+    l2552q _ l2553q _ l2554q _ l2555q _ l2556q _ l2557q _ l2558q _ l2559q _
+    l2560q _ l2561q _ l2562q _ l2563q _ l2564q _ l2565q _ l2566q _ l2567q _
+    l2568q _ l2569q _ l2570q _ l2571q _ l2572q _ l2573q _ l2574q _ l2575q _
+    l2576q _ l2577q _ l2578q _ l2579q _ l2580q _ l2581q _ l2582q _ l2583q _
+    l2584q _ l2585q _ l2586q _ l2587q _ l2588q _ l2589q _ l2590q _ l2591q _
+    l2592q _ l2593q _ l2594q _ l2595q _ l2596q _ l2597q _ l2598q _ l2599q _
+    l2600q _ l2601q _ l2602q _ l2603q _ l2604q _ l2605q _ l2606q _ l2607q _
+    l2608q _ l2609q _ l2610q _ l2611q _ l2612q _ l2613q _ l2614q _ l2615q _
+    l2616q _ l2617q _ l2618q _ l2619q _ l2620q _ l2621q _ l2622q _ l2623q _
+    l2624q _ l2625q _ l2626q _ l2627q _ l2628q _ l2629q _ l2630q _ l2631q _
+    l2632q _ l2633q _ l2634q _ l2635q _ l2636q _ l2637q _ l2638q _ l2639q _
+    l2640q _ l2641q _ l2642q _ l2643q _ l2644q _ l2645q _ l2646q _ l2647q _
+    l2648q _ l2649q _ l2650q _ l2651q _ l2652q _ l2653q _ l2654q _ l2655q _
+    l2656q _ l2657q _ l2658q _ l2659q _ l2660q _ l2661q _ l2662q _ l2663q _
+    l2664q _ l2665q _ l2666q _ l2667q _ l2668q _ l2669q _ l2670q _ l2671q _
+    l2672q _ l2673q _ l2674q _ l2675q _ l2676q _ l2677q _ l2678q _ l2679q _
+    l2680q _ l2681q _ l2682q _ l2683q _ l2684q _ l2685q _ l2686q _ l2687q _
+    l2688q _ l2689q _ l2690q _ l2691q _ l2692q _ l2693q _ l2694q _ l2695q _
+    l2696q _ l2697q _ l2698q _ l2699q _ l2700q _ l2701q _ l2702q _ l2703q _
+    l2704q _ l2705q _ l2706q _ l2707q _ l2708q _ l2709q _ l2710q _ l2711q _
+    l2712q _ l2713q _ l2714q _ l2715q _ l2716q _ l2717q _ l2718q _ l2719q _
+    l2720q _ l2721q _ l2722q _ l2723q _ l2724q _ l2725q _ l2726q _ l2727q _
+    l2728q _ l2729q _ l2730q _ l2731q _ l2732q _ l2733q _ l2734q _ l2735q _
+    l2736q _ l2737q _ l2738q _ l2739q _ l2740q _ l2741q _ l2742q _ l2743q _
+    l2744q _ l2745q _ l2746q _ l2747q _ l2748q _ l2749q _ l2750q _ l2751q _
+    l2752q _ l2753q _ l2754q _ l2755q _ l2756q _ l2757q _ l2758q _ l2759q _
+    l2760q _ l2761q _ l2762q _ l2763q _ l2764q _ l2765q _ l2766q _ l2767q _
+    l2768q _ l2769q _ l2770q _ l2771q _ l2772q _ l2773q _ l2774q _ l2775q _
+    l2776q _ l2777q _ l2778q _ l2779q _ l2780q _ l2781q _ l2782q _ l2783q _
+    l2784q _ l2785q _ l2786q _ l2787q _ l2788q _ l2789q _ l2790q _ l2791q _
+    l2792q _ l2793q _ l2794q _ l2795q _ l2796q _ l2797q _ l2798q _ l2799q _
+    l2800q _ l2801q _ l2802q _ l2803q _ l2804q _ l2805q _ l2806q _ l2807q _
+    l2808q _ l2809q _ l2810q _ l2811q _ l2812q _ l2813q _ l2814q _ l2815q _
+    l2816q _ l2817q _ l2818q _ l2819q _ l2820q _ l2821q _ l2822q _ l2823q _
+    l2824q _ l2825q _ l2826q _ l2827q _ l2828q _ l2829q _ l2830q _ l2831q _
+    l2832q _ l2833q _ l2834q _ l2835q _ l2836q _ l2837q _ l2838q _ l2839q _
+    l2840q _ l2841q _ l2842q _ l2843q _ l2844q _ l2845q _ l2846q _ l2847q _
+    l2848q _ l2849q _ l2850q _ l2851q _ l2852q _ l2853q _ l2854q _ l2855q _
+    l2856q _ l2857q _ l2858q _ l2859q _ l2860q _ l2861q _ l2862q _ l2863q _
+    l2864q _ l2865q _ l2866q _ l2867q _ l2868q _ l2869q _ l2870q _ l2871q _
+    l2872q _ l2873q _ l2874q _ l2875q _ l2876q _ l2877q _ l2878q _ l2879q _
+    l2880q _ l2881q _ l2882q _ l2883q _ l2884q _ l2885q _ l2886q _ l2887q _
+    l2888q _ l2889q _ l2890q _ l2891q _ l2892q _ l2893q _ l2894q _ l2895q _
+    l2896q _ l2897q _ l2898q _ l2899q _ l2900q _ l2901q _ l2902q _ l2903q _
+    l2904q _ l2905q _ l2906q _ l2907q _ l2908q _ l2909q _ l2910q _ l2911q _
+    l2912q _ l2913q _ l2914q _ l2915q _ l2916q _ l2917q _ l2918q _ l2919q _
+    l2920q _ l2921q _ l2922q _ l2923q _ l2924q _ l2925q _ l2926q _ l2927q _
+    l2928q _ l2929q _ l2930q _ l2931q _ l2932q _ l2933q _ l2934q _ l2935q _
+    l2936q _ l2937q _ l2938q _ l2939q _ l2940q _ l2941q _ l2942q _ l2943q _
+    l2944q _ l2945q _ l2946q _ l2947q _ l2948q _ l2949q _ l2950q _ l2951q _
+    l2952q _ l2953q _ l2954q _ l2955q _ l2956q _ l2957q _ l2958q _ l2959q _
+    l2960q _ l2961q _ l2962q _ l2963q _ l2964q _ l2965q _ l2966q _ l2967q _
+    l2968q _ l2969q _ l2970q _ l2971q _ l2972q _ l2973q _ l2974q _ l2975q _
+    l2976q _ l2977q _ l2978q _ l2979q _ l2980q _ l2981q _ l2982q _ l2983q _
+    l2984q _ l2985q _ l2986q _ l2987q _ l2988q _ l2989q _ l2990q _ l2991q _
+    l2992q _ l2993q _ l2994q _ l2995q _ l2996q _ l2997q _ l2998q _ l2999q _
+    l3000q _ l3001q _ l3002q _ l3003q _ l3004q _ l3005q _ l3006q _ l3007q _
+    l3008q _ l3009q _ l3010q _ l3011q _ l3012q _ l3013q _ l3014q _ l3015q _
+    l3016q _ l3017q _ l3018q _ l3019q _ l3020q _ l3021q _ l3022q _ l3023q _
+    l3024q _ l3025q _ l3026q _ l3027q _ l3028q _ l3029q _ l3030q _ l3031q _
+    l3032q _ l3033q _ l3034q _ l3035q _ l3036q _ l3037q _ l3038q _ l3039q _
+    l3040q _ l3041q _ l3042q _ l3043q _ l3044q _ l3045q _ l3046q _ l3047q _
+    l3048q _ l3049q _ l3050q _ l3051q _ l3052q _ l3053q _ l3054q _ l3055q _
+    l3056q _ l3057q _ l3058q _ l3059q _ l3060q _ l3061q _ l3062q _ l3063q _
+    l3064q _ l3065q _ l3066q _ l3067q _ l3068q _ l3069q _ l3070q _ l3071q _
+    l3072q _ l3073q _ l3074q _ l3075q _ l3076q _ l3077q _ l3078q _ l3079q _
+    l3080q _ l3081q _ l3082q _ l3083q _ l3084q _ l3085q _ l3086q _ l3087q _
+    l3088q _ l3089q _ l3090q _ l3091q _ l3092q _ l3093q _ l3094q _ l3095q _
+    l3096q _ l3097q _ l3098q _ l3099q _ l3100q _ l3101q _ l3102q _ l3103q _
+    l3104q _ l3105q _ l3106q _ l3107q _ l3108q _ l3109q _ l3110q _ l3111q _
+    l3112q _ l3113q _ l3114q _ l3115q _ l3116q _ l3117q _ l3118q _ l3119q _
+    l3120q _ l3121q _ l3122q _ l3123q _ l3124q _ l3125q _ l3126q _ l3127q _
+    l3128q _ l3129q _ l3130q _ l3131q _ l3132q _ l3133q _ l3134q _ l3135q _
+    l3136q _ l3137q _ l3138q _ l3139q _ l3140q _ l3141q _ l3142q _ l3143q _
+    l3144q _ l3145q _ l3146q _ l3147q _ l3148q _ l3149q _ l3150q _ l3151q _
+    l3152q _ l3153q _ l3154q _ l3155q _ l3156q _ l3157q _ l3158q _ l3159q _
+    l3160q _ l3161q _ l3162q _ l3163q _ l3164q _ l3165q _ l3166q _ l3167q _
+    l3168q _ l3169q _ l3170q _ l3171q _ l3172q _ l3173q _ l3174q _ l3175q _
+    l3176q _ l3177q _ l3178q _ l3179q _ l3180q _ l3181q _ l3182q _ l3183q _
+    l3184q _ l3185q _ l3186q _ l3187q _ l3188q _ l3189q _ l3190q _ l3191q _
+    l3192q _ l3193q _ l3194q _ l3195q _ l3196q _ l3197q _ l3198q _ l3199q _
+    l3200q _ l3201q _ l3202q _ l3203q _ l3204q _ l3205q _ l3206q _ l3207q _
+    l3208q _ l3209q _ l3210q _ l3211q _ l3212q _ l3213q _ l3214q _ l3215q _
+    l3216q _ l3217q _ l3218q _ l3219q _ l3220q _ l3221q _ l3222q _ l3223q _
+    l3224q _ l3225q _ l3226q _ l3227q _ l3228q _ l3229q _ l3230q _ l3231q _
+    l3232q _ l3233q _ l3234q _ l3235q _ l3236q _ l3237q _ l3238q _ l3239q _
+    l3240q _ l3241q _ l3242q _ l3243q _ l3244q _ l3245q _ l3246q _ l3247q _
+    l3248q _ l3249q _ l3250q _ l3251q _ l3252q _ l3253q _ l3254q _ l3255q _
+    l3256q _ l3257q _ l3258q _ l3259q _ l3260q _ l3261q _ l3262q _ l3263q _
+    l3264q _ l3265q _ l3266q _ l3267q _ l3268q _ l3269q _ l3270q _ l3271q _
+    l3272q _ l3273q _ l3274q _ l3275q _ l3276q _ l3277q _ l3278q _ l3279q _
+    l3280q _ l3281q _ l3282q _ l3283q _ l3284q _ l3285q _ l3286q _ l3287q _
+    l3288q _ l3289q _ l3290q _ l3291q _ l3292q _ l3293q _ l3294q _ l3295q _
+    l3296q _ l3297q _ l3298q _ l3299q _ l3300q _ l3301q _ l3302q _ l3303q _
+    l3304q _ l3305q _ l3306q _ l3307q _ l3308q _ l3309q _ l3310q _ l3311q _
+    l3312q _ l3313q _ l3314q _ l3315q _ l3316q _ l3317q _ l3318q _ l3319q _
+    l3320q _ l3321q _ l3322q _ l3323q _ l3324q _ l3325q _ l3326q _ l3327q _
+    l3328q _ l3329q _ l3330q _ l3331q _ l3332q _ l3333q _ l3334q _ l3335q _
+    l3336q _ l3337q _ l3338q _ l3339q _ l3340q _ l3341q _ l3342q _ l3343q _
+    l3344q _ l3345q _ l3346q _ l3347q _ l3348q _ l3349q _ l3350q _ l3351q _
+    l3352q _ l3353q _ l3354q _ l3355q _ l3356q _ l3357q _ l3358q _ l3359q _
+    l3360q _ l3361q _ l3362q _ l3363q _ l3364q _ l3365q _ l3366q _ l3367q _
+    l3368q _ l3369q _ l3370q _ l3371q _ l3372q _ l3373q _ l3374q _ l3375q _
+    l3376q _ l3377q _ l3378q _ l3379q _ l3380q _ l3381q _ l3382q _ l3383q _
+    l3384q _ l3385q _ l3386q _ l3387q _ l3388q _ l3389q _ l3390q _ l3391q _
+    l3392q _ l3393q _ l3394q _ l3395q _ l3396q _ l3397q _ l3398q _ l3399q _
+    l3400q _ l3401q _ l3402q _ l3403q _ l3404q _ l3405q _ l3406q _ l3407q _
+    l3408q _ l3409q _ l3410q _ l3411q _ l3412q _ l3413q _ l3414q _ l3415q _
+    l3416q _ l3417q _ l3418q _ l3419q _ l3420q _ l3421q _ l3422q _ l3423q _
+    l3424q _ l3425q _ l3426q _ l3427q _ l3428q _ l3429q _ l3430q _ l3431q _
+    l3432q _ l3433q _ l3434q _ l3435q _ l3436q _ l3437q _ l3438q _ l3439q _
+    l3440q _ l3441q _ l3442q _ l3443q _ l3444q _ l3445q _ l3446q _ l3447q _
+    l3448q _ l3449q _ l3450q _ l3451q _ l3452q _ l3453q _ l3454q _ l3455q _
+    l3456q _ l3457q _ l3458q _ l3459q _ l3460q _ l3461q _ l3462q _ l3463q _
+    l3464q _ l3465q _ l3466q _ l3467q _ l3468q _ l3469q _ l3470q _ l3471q _
+    l3472q _ l3473q _ l3474q _ l3475q _ l3476q _ l3477q _ l3478q _ l3479q _
+    l3480q _ l3481q _ l3482q _ l3483q _ l3484q _ l3485q _ l3486q _ l3487q _
+    l3488q _ l3489q _ l3490q _ l3491q _ l3492q _ l3493q _ l3494q _ l3495q _
+    l3496q _ l3497q _ l3498q _ l3499q _ l3500q _ l3501q _ l3502q _ l3503q _
+    l3504q _ l3505q _ l3506q _ l3507q _ l3508q _ l3509q _ l3510q _ l3511q _
+    l3512q _ l3513q _ l3514q _ l3515q _ l3516q _ l3517q _ l3518q _ l3519q _
+    l3520q _ l3521q _ l3522q _ l3523q _ l3524q _ l3525q _ l3526q _ l3527q _
+    l3528q _ l3529q _ l3530q _ l3531q _ l3532q _ l3533q _ l3534q _ l3535q _
+    l3536q _ l3537q _ l3538q _ l3539q _ l3540q _ l3541q _ l3542q _ l3543q _
+    l3544q _ l3545q _ l3546q _ l3547q _ l3548q _ l3549q _ l3550q _ l3551q _
+    l3552q _ l3553q _ l3554q _ l3555q _ l3556q _ l3557q _ l3558q _ l3559q _
+    l3560q _ l3561q _ l3562q _ l3563q _ l3564q _ l3565q _ l3566q _ l3567q _
+    l3568q _ l3569q _ l3570q _ l3571q _ l3572q _ l3573q _ l3574q _ l3575q _
+    l3576q _ l3577q _ l3578q _ l3579q _ l3580q _ l3581q _ l3582q _ l3583q _
+    l3584q _ l3585q _ l3586q _ l3587q _ l3588q _ l3589q _ l3590q _ l3591q _
+    l3592q _ l3593q _ l3594q _ l3595q _ l3596q _ l3597q _ l3598q _ l3599q _
+    l3600q _ l3601q _ l3602q _ l3603q _ l3604q _ l3605q _ l3606q _ l3607q _
+    l3608q _ l3609q _ l3610q _ l3611q _ l3612q _ l3613q _ l3614q _ l3615q _
+    l3616q _ l3617q _ l3618q _ l3619q _ l3620q _ l3621q _ l3622q _ l3623q _
+    l3624q _ l3625q _ l3626q _ l3627q _ l3628q _ l3629q _ l3630q _ l3631q _
+    l3632q _ l3633q _ l3634q _ l3635q _ l3636q _ l3637q _ l3638q _ l3639q _
+    l3640q _ l3641q _ l3642q _ l3643q _ l3644q _ l3645q _ l3646q _ l3647q _
+    l3648q _ l3649q _ l3650q _ l3651q _ l3652q _ l3653q _ l3654q _ l3655q _
+    l3656q _ l3657q _ l3658q _ l3659q _ l3660q _ l3661q _ l3662q _ l3663q _
+    l3664q _ l3665q _ l3666q _ l3667q _ l3668q _ l3669q _ l3670q _ l3671q _
+    l3672q _ l3673q _ l3674q _ l3675q _ l3676q _ l3677q _ l3678q _ l3679q _
+    l3680q _ l3681q _ l3682q _ l3683q _ l3684q _ l3685q _ l3686q _ l3687q _
+    l3688q _ l3689q _ l3690q _ l3691q _ l3692q _ l3693q _ l3694q _ l3695q _
+    l3696q _ l3697q _ l3698q _ l3699q _ l3700q _ l3701q _ l3702q _ l3703q _
+    l3704q _ l3705q _ l3706q _ l3707q _ l3708q _ l3709q _ l3710q _ l3711q _
+    l3712q _ l3713q _ l3714q _ l3715q _ l3716q _ l3717q _ l3718q _ l3719q _
+    l3720q _ l3721q _ l3722q _ l3723q _ l3724q _ l3725q _ l3726q _ l3727q _
+    l3728q _ l3729q _ l3730q _ l3731q _ l3732q _ l3733q _ l3734q _ l3735q _
+    l3736q _ l3737q _ l3738q _ l3739q _ l3740q _ l3741q _ l3742q _ l3743q _
+    l3744q _ l3745q _ l3746q _ l3747q _ l3748q _ l3749q _ l3750q _ l3751q _
+    l3752q _ l3753q _ l3754q _ l3755q _ l3756q _ l3757q _ l3758q _ l3759q _
+    l3760q _ l3761q _ l3762q _ l3763q _ l3764q _ l3765q _ l3766q _ l3767q _
+    l3768q _ l3769q _ l3770q _ l3771q _ l3772q _ l3773q _ l3774q _ l3775q _
+    l3776q _ l3777q _ l3778q _ l3779q _ l3780q _ l3781q _ l3782q _ l3783q _
+    l3784q _ l3785q _ l3786q _ l3787q _ l3788q _ l3789q _ l3790q _ l3791q _
+    l3792q _ l3793q _ l3794q _ l3795q _ l3796q _ l3797q _ l3798q _ l3799q _
+    l3800q _ l3801q _ l3802q _ l3803q _ l3804q _ l3805q _ l3806q _ l3807q _
+    l3808q _ l3809q _ l3810q _ l3811q _ l3812q _ l3813q _ l3814q _ l3815q _
+    l3816q _ l3817q _ l3818q _ l3819q _ l3820q _ l3821q _ l3822q _ l3823q _
+    l3824q _ l3825q _ l3826q _ l3827q _ l3828q _ l3829q _ l3830q _ l3831q _
+    l3832q _ l3833q _ l3834q _ l3835q _ l3836q _ l3837q _ l3838q _ l3839q _
+    l3840q _ l3841q _ l3842q _ l3843q _ l3844q _ l3845q _ l3846q _ l3847q _
+    l3848q _ l3849q _ l3850q _ l3851q _ l3852q _ l3853q _ l3854q _ l3855q _
+    l3856q _ l3857q _ l3858q _ l3859q _ l3860q _ l3861q _ l3862q _ l3863q _
+    l3864q _ l3865q _ l3866q _ l3867q _ l3868q _ l3869q _ l3870q _ l3871q _
+    l3872q _ l3873q _ l3874q _ l3875q _ l3876q _ l3877q _ l3878q _ l3879q _
+    l3880q _ l3881q _ l3882q _ l3883q _ l3884q _ l3885q _ l3886q _ l3887q _
+    l3888q _ l3889q _ l3890q _ l3891q _ l3892q _ l3893q _ l3894q _ l3895q _
+    l3896q _ l3897q _ l3898q _ l3899q _ l3900q _ l3901q _ l3902q _ l3903q _
+    l3904q _ l3905q _ l3906q _ l3907q _ l3908q _ l3909q _ l3910q _ l3911q _
+    l3912q _ l3913q _ l3914q _ l3915q _ l3916q _ l3917q _ l3918q _ l3919q _
+    l3920q _ l3921q _ l3922q _ l3923q _ l3924q _ l3925q _ l3926q _ l3927q _
+    l3928q _ l3929q _ l3930q _ l3931q _ l3932q _ l3933q _ l3934q _ l3935q _
+    l3936q _ l3937q _ l3938q _ l3939q _ l3940q _ l3941q _ l3942q _ l3943q _
+    l3944q _ l3945q _ l3946q _ l3947q _ l3948q _ l3949q _ l3950q _ l3951q _
+    l3952q _ l3953q _ l3954q _ l3955q _ l3956q _ l3957q _ l3958q _ l3959q _
+    l3960q _ l3961q _ l3962q _ l3963q _ l3964q _ l3965q _ l3966q _ l3967q _
+    l3968q _ l3969q _ l3970q _ l3971q _ l3972q _ l3973q _ l3974q _ l3975q _
+    l3976q _ l3977q _ l3978q _ l3979q _ l3980q _ l3981q _ l3982q _ l3983q _
+    l3984q _ l3985q _ l3986q _ l3987q _ l3988q _ l3989q _ l3990q _ l3991q _
+    l3992q _ l3993q _ l3994q _ l3995q _ l3996q _ l3997q _ l3998q _ l3999q _
+    l4000q _ l4001q _ l4002q _ l4003q _ l4004q _ l4005q _ l4006q _ l4007q _
+    l4008q _ l4009q _ l4010q _ l4011q _ l4012q _ l4013q _ l4014q _ l4015q _
+    l4016q _ l4017q _ l4018q _ l4019q _ l4020q _ l4021q _ l4022q _ l4023q _
+    l4024q _ l4025q _ l4026q _ l4027q _ l4028q _ l4029q _ l4030q _ l4031q _
+    l4032q _ l4033q _ l4034q _ l4035q _ l4036q _ l4037q _ l4038q _ l4039q _
+    l4040q _ l4041q _ l4042q _ l4043q _ l4044q _ l4045q _ l4046q _ l4047q _
+    l4048q _ l4049q _ l4050q _ l4051q _ l4052q _ l4053q _ l4054q _ l4055q _
+    l4056q _ l4057q _ l4058q _ l4059q _ l4060q _ l4061q _ l4062q _ l4063q _
+    l4064q _ l4065q _ l4066q _ l4067q _ l4068q _ l4069q _ l4070q _ l4071q _
+    l4072q _ l4073q _ l4074q _ l4075q _ l4076q _ l4077q _ l4078q _ l4079q _
+    l4080q _ l4081q _ l4082q _ l4083q _ l4084q _ l4085q _ l4086q _ l4087q _
+    l4088q _ l4089q _ l4090q _ l4091q _ l4092q _ l4093q _ l4094q _ l4095q _
 ];
 define register offset=0x10000000 size=4 [
-        l0 _    l1 _    l2 _    l3 _    l4 _    l5 _    l6 _    l7 _
-        l8 _    l9 _   l10 _   l11 _   l12 _   l13 _   l14 _   l15 _
-       l16 _   l17 _   l18 _   l19 _   l20 _   l21 _   l22 _   l23 _
-       l24 _   l25 _   l26 _   l27 _   l28 _   l29 _   l30 _   l31 _
-       l32 _   l33 _   l34 _   l35 _   l36 _   l37 _   l38 _   l39 _
-       l40 _   l41 _   l42 _   l43 _   l44 _   l45 _   l46 _   l47 _
-       l48 _   l49 _   l50 _   l51 _   l52 _   l53 _   l54 _   l55 _
-       l56 _   l57 _   l58 _   l59 _   l60 _   l61 _   l62 _   l63 _
-       l64 _   l65 _   l66 _   l67 _   l68 _   l69 _   l70 _   l71 _
-       l72 _   l73 _   l74 _   l75 _   l76 _   l77 _   l78 _   l79 _
-       l80 _   l81 _   l82 _   l83 _   l84 _   l85 _   l86 _   l87 _
-       l88 _   l89 _   l90 _   l91 _   l92 _   l93 _   l94 _   l95 _
-       l96 _   l97 _   l98 _   l99 _  l100 _  l101 _  l102 _  l103 _
-      l104 _  l105 _  l106 _  l107 _  l108 _  l109 _  l110 _  l111 _
-      l112 _  l113 _  l114 _  l115 _  l116 _  l117 _  l118 _  l119 _
-      l120 _  l121 _  l122 _  l123 _  l124 _  l125 _  l126 _  l127 _
-      l128 _  l129 _  l130 _  l131 _  l132 _  l133 _  l134 _  l135 _
-      l136 _  l137 _  l138 _  l139 _  l140 _  l141 _  l142 _  l143 _
-      l144 _  l145 _  l146 _  l147 _  l148 _  l149 _  l150 _  l151 _
-      l152 _  l153 _  l154 _  l155 _  l156 _  l157 _  l158 _  l159 _
-      l160 _  l161 _  l162 _  l163 _  l164 _  l165 _  l166 _  l167 _
-      l168 _  l169 _  l170 _  l171 _  l172 _  l173 _  l174 _  l175 _
-      l176 _  l177 _  l178 _  l179 _  l180 _  l181 _  l182 _  l183 _
-      l184 _  l185 _  l186 _  l187 _  l188 _  l189 _  l190 _  l191 _
-      l192 _  l193 _  l194 _  l195 _  l196 _  l197 _  l198 _  l199 _
-      l200 _  l201 _  l202 _  l203 _  l204 _  l205 _  l206 _  l207 _
-      l208 _  l209 _  l210 _  l211 _  l212 _  l213 _  l214 _  l215 _
-      l216 _  l217 _  l218 _  l219 _  l220 _  l221 _  l222 _  l223 _
-      l224 _  l225 _  l226 _  l227 _  l228 _  l229 _  l230 _  l231 _
-      l232 _  l233 _  l234 _  l235 _  l236 _  l237 _  l238 _  l239 _
-      l240 _  l241 _  l242 _  l243 _  l244 _  l245 _  l246 _  l247 _
-      l248 _  l249 _  l250 _  l251 _  l252 _  l253 _  l254 _  l255 _
-      l256 _  l257 _  l258 _  l259 _  l260 _  l261 _  l262 _  l263 _
-      l264 _  l265 _  l266 _  l267 _  l268 _  l269 _  l270 _  l271 _
-      l272 _  l273 _  l274 _  l275 _  l276 _  l277 _  l278 _  l279 _
-      l280 _  l281 _  l282 _  l283 _  l284 _  l285 _  l286 _  l287 _
-      l288 _  l289 _  l290 _  l291 _  l292 _  l293 _  l294 _  l295 _
-      l296 _  l297 _  l298 _  l299 _  l300 _  l301 _  l302 _  l303 _
-      l304 _  l305 _  l306 _  l307 _  l308 _  l309 _  l310 _  l311 _
-      l312 _  l313 _  l314 _  l315 _  l316 _  l317 _  l318 _  l319 _
-      l320 _  l321 _  l322 _  l323 _  l324 _  l325 _  l326 _  l327 _
-      l328 _  l329 _  l330 _  l331 _  l332 _  l333 _  l334 _  l335 _
-      l336 _  l337 _  l338 _  l339 _  l340 _  l341 _  l342 _  l343 _
-      l344 _  l345 _  l346 _  l347 _  l348 _  l349 _  l350 _  l351 _
-      l352 _  l353 _  l354 _  l355 _  l356 _  l357 _  l358 _  l359 _
-      l360 _  l361 _  l362 _  l363 _  l364 _  l365 _  l366 _  l367 _
-      l368 _  l369 _  l370 _  l371 _  l372 _  l373 _  l374 _  l375 _
-      l376 _  l377 _  l378 _  l379 _  l380 _  l381 _  l382 _  l383 _
-      l384 _  l385 _  l386 _  l387 _  l388 _  l389 _  l390 _  l391 _
-      l392 _  l393 _  l394 _  l395 _  l396 _  l397 _  l398 _  l399 _
-      l400 _  l401 _  l402 _  l403 _  l404 _  l405 _  l406 _  l407 _
-      l408 _  l409 _  l410 _  l411 _  l412 _  l413 _  l414 _  l415 _
-      l416 _  l417 _  l418 _  l419 _  l420 _  l421 _  l422 _  l423 _
-      l424 _  l425 _  l426 _  l427 _  l428 _  l429 _  l430 _  l431 _
-      l432 _  l433 _  l434 _  l435 _  l436 _  l437 _  l438 _  l439 _
-      l440 _  l441 _  l442 _  l443 _  l444 _  l445 _  l446 _  l447 _
-      l448 _  l449 _  l450 _  l451 _  l452 _  l453 _  l454 _  l455 _
-      l456 _  l457 _  l458 _  l459 _  l460 _  l461 _  l462 _  l463 _
-      l464 _  l465 _  l466 _  l467 _  l468 _  l469 _  l470 _  l471 _
-      l472 _  l473 _  l474 _  l475 _  l476 _  l477 _  l478 _  l479 _
-      l480 _  l481 _  l482 _  l483 _  l484 _  l485 _  l486 _  l487 _
-      l488 _  l489 _  l490 _  l491 _  l492 _  l493 _  l494 _  l495 _
-      l496 _  l497 _  l498 _  l499 _  l500 _  l501 _  l502 _  l503 _
-      l504 _  l505 _  l506 _  l507 _  l508 _  l509 _  l510 _  l511 _
-      l512 _  l513 _  l514 _  l515 _  l516 _  l517 _  l518 _  l519 _
-      l520 _  l521 _  l522 _  l523 _  l524 _  l525 _  l526 _  l527 _
-      l528 _  l529 _  l530 _  l531 _  l532 _  l533 _  l534 _  l535 _
-      l536 _  l537 _  l538 _  l539 _  l540 _  l541 _  l542 _  l543 _
-      l544 _  l545 _  l546 _  l547 _  l548 _  l549 _  l550 _  l551 _
-      l552 _  l553 _  l554 _  l555 _  l556 _  l557 _  l558 _  l559 _
-      l560 _  l561 _  l562 _  l563 _  l564 _  l565 _  l566 _  l567 _
-      l568 _  l569 _  l570 _  l571 _  l572 _  l573 _  l574 _  l575 _
-      l576 _  l577 _  l578 _  l579 _  l580 _  l581 _  l582 _  l583 _
-      l584 _  l585 _  l586 _  l587 _  l588 _  l589 _  l590 _  l591 _
-      l592 _  l593 _  l594 _  l595 _  l596 _  l597 _  l598 _  l599 _
-      l600 _  l601 _  l602 _  l603 _  l604 _  l605 _  l606 _  l607 _
-      l608 _  l609 _  l610 _  l611 _  l612 _  l613 _  l614 _  l615 _
-      l616 _  l617 _  l618 _  l619 _  l620 _  l621 _  l622 _  l623 _
-      l624 _  l625 _  l626 _  l627 _  l628 _  l629 _  l630 _  l631 _
-      l632 _  l633 _  l634 _  l635 _  l636 _  l637 _  l638 _  l639 _
-      l640 _  l641 _  l642 _  l643 _  l644 _  l645 _  l646 _  l647 _
-      l648 _  l649 _  l650 _  l651 _  l652 _  l653 _  l654 _  l655 _
-      l656 _  l657 _  l658 _  l659 _  l660 _  l661 _  l662 _  l663 _
-      l664 _  l665 _  l666 _  l667 _  l668 _  l669 _  l670 _  l671 _
-      l672 _  l673 _  l674 _  l675 _  l676 _  l677 _  l678 _  l679 _
-      l680 _  l681 _  l682 _  l683 _  l684 _  l685 _  l686 _  l687 _
-      l688 _  l689 _  l690 _  l691 _  l692 _  l693 _  l694 _  l695 _
-      l696 _  l697 _  l698 _  l699 _  l700 _  l701 _  l702 _  l703 _
-      l704 _  l705 _  l706 _  l707 _  l708 _  l709 _  l710 _  l711 _
-      l712 _  l713 _  l714 _  l715 _  l716 _  l717 _  l718 _  l719 _
-      l720 _  l721 _  l722 _  l723 _  l724 _  l725 _  l726 _  l727 _
-      l728 _  l729 _  l730 _  l731 _  l732 _  l733 _  l734 _  l735 _
-      l736 _  l737 _  l738 _  l739 _  l740 _  l741 _  l742 _  l743 _
-      l744 _  l745 _  l746 _  l747 _  l748 _  l749 _  l750 _  l751 _
-      l752 _  l753 _  l754 _  l755 _  l756 _  l757 _  l758 _  l759 _
-      l760 _  l761 _  l762 _  l763 _  l764 _  l765 _  l766 _  l767 _
-      l768 _  l769 _  l770 _  l771 _  l772 _  l773 _  l774 _  l775 _
-      l776 _  l777 _  l778 _  l779 _  l780 _  l781 _  l782 _  l783 _
-      l784 _  l785 _  l786 _  l787 _  l788 _  l789 _  l790 _  l791 _
-      l792 _  l793 _  l794 _  l795 _  l796 _  l797 _  l798 _  l799 _
-      l800 _  l801 _  l802 _  l803 _  l804 _  l805 _  l806 _  l807 _
-      l808 _  l809 _  l810 _  l811 _  l812 _  l813 _  l814 _  l815 _
-      l816 _  l817 _  l818 _  l819 _  l820 _  l821 _  l822 _  l823 _
-      l824 _  l825 _  l826 _  l827 _  l828 _  l829 _  l830 _  l831 _
-      l832 _  l833 _  l834 _  l835 _  l836 _  l837 _  l838 _  l839 _
-      l840 _  l841 _  l842 _  l843 _  l844 _  l845 _  l846 _  l847 _
-      l848 _  l849 _  l850 _  l851 _  l852 _  l853 _  l854 _  l855 _
-      l856 _  l857 _  l858 _  l859 _  l860 _  l861 _  l862 _  l863 _
-      l864 _  l865 _  l866 _  l867 _  l868 _  l869 _  l870 _  l871 _
-      l872 _  l873 _  l874 _  l875 _  l876 _  l877 _  l878 _  l879 _
-      l880 _  l881 _  l882 _  l883 _  l884 _  l885 _  l886 _  l887 _
-      l888 _  l889 _  l890 _  l891 _  l892 _  l893 _  l894 _  l895 _
-      l896 _  l897 _  l898 _  l899 _  l900 _  l901 _  l902 _  l903 _
-      l904 _  l905 _  l906 _  l907 _  l908 _  l909 _  l910 _  l911 _
-      l912 _  l913 _  l914 _  l915 _  l916 _  l917 _  l918 _  l919 _
-      l920 _  l921 _  l922 _  l923 _  l924 _  l925 _  l926 _  l927 _
-      l928 _  l929 _  l930 _  l931 _  l932 _  l933 _  l934 _  l935 _
-      l936 _  l937 _  l938 _  l939 _  l940 _  l941 _  l942 _  l943 _
-      l944 _  l945 _  l946 _  l947 _  l948 _  l949 _  l950 _  l951 _
-      l952 _  l953 _  l954 _  l955 _  l956 _  l957 _  l958 _  l959 _
-      l960 _  l961 _  l962 _  l963 _  l964 _  l965 _  l966 _  l967 _
-      l968 _  l969 _  l970 _  l971 _  l972 _  l973 _  l974 _  l975 _
-      l976 _  l977 _  l978 _  l979 _  l980 _  l981 _  l982 _  l983 _
-      l984 _  l985 _  l986 _  l987 _  l988 _  l989 _  l990 _  l991 _
-      l992 _  l993 _  l994 _  l995 _  l996 _  l997 _  l998 _  l999 _
-     l1000 _ l1001 _ l1002 _ l1003 _ l1004 _ l1005 _ l1006 _ l1007 _
-     l1008 _ l1009 _ l1010 _ l1011 _ l1012 _ l1013 _ l1014 _ l1015 _
-     l1016 _ l1017 _ l1018 _ l1019 _ l1020 _ l1021 _ l1022 _ l1023 _
-     l1024 _ l1025 _ l1026 _ l1027 _ l1028 _ l1029 _ l1030 _ l1031 _
-     l1032 _ l1033 _ l1034 _ l1035 _ l1036 _ l1037 _ l1038 _ l1039 _
-     l1040 _ l1041 _ l1042 _ l1043 _ l1044 _ l1045 _ l1046 _ l1047 _
-     l1048 _ l1049 _ l1050 _ l1051 _ l1052 _ l1053 _ l1054 _ l1055 _
-     l1056 _ l1057 _ l1058 _ l1059 _ l1060 _ l1061 _ l1062 _ l1063 _
-     l1064 _ l1065 _ l1066 _ l1067 _ l1068 _ l1069 _ l1070 _ l1071 _
-     l1072 _ l1073 _ l1074 _ l1075 _ l1076 _ l1077 _ l1078 _ l1079 _
-     l1080 _ l1081 _ l1082 _ l1083 _ l1084 _ l1085 _ l1086 _ l1087 _
-     l1088 _ l1089 _ l1090 _ l1091 _ l1092 _ l1093 _ l1094 _ l1095 _
-     l1096 _ l1097 _ l1098 _ l1099 _ l1100 _ l1101 _ l1102 _ l1103 _
-     l1104 _ l1105 _ l1106 _ l1107 _ l1108 _ l1109 _ l1110 _ l1111 _
-     l1112 _ l1113 _ l1114 _ l1115 _ l1116 _ l1117 _ l1118 _ l1119 _
-     l1120 _ l1121 _ l1122 _ l1123 _ l1124 _ l1125 _ l1126 _ l1127 _
-     l1128 _ l1129 _ l1130 _ l1131 _ l1132 _ l1133 _ l1134 _ l1135 _
-     l1136 _ l1137 _ l1138 _ l1139 _ l1140 _ l1141 _ l1142 _ l1143 _
-     l1144 _ l1145 _ l1146 _ l1147 _ l1148 _ l1149 _ l1150 _ l1151 _
-     l1152 _ l1153 _ l1154 _ l1155 _ l1156 _ l1157 _ l1158 _ l1159 _
-     l1160 _ l1161 _ l1162 _ l1163 _ l1164 _ l1165 _ l1166 _ l1167 _
-     l1168 _ l1169 _ l1170 _ l1171 _ l1172 _ l1173 _ l1174 _ l1175 _
-     l1176 _ l1177 _ l1178 _ l1179 _ l1180 _ l1181 _ l1182 _ l1183 _
-     l1184 _ l1185 _ l1186 _ l1187 _ l1188 _ l1189 _ l1190 _ l1191 _
-     l1192 _ l1193 _ l1194 _ l1195 _ l1196 _ l1197 _ l1198 _ l1199 _
-     l1200 _ l1201 _ l1202 _ l1203 _ l1204 _ l1205 _ l1206 _ l1207 _
-     l1208 _ l1209 _ l1210 _ l1211 _ l1212 _ l1213 _ l1214 _ l1215 _
-     l1216 _ l1217 _ l1218 _ l1219 _ l1220 _ l1221 _ l1222 _ l1223 _
-     l1224 _ l1225 _ l1226 _ l1227 _ l1228 _ l1229 _ l1230 _ l1231 _
-     l1232 _ l1233 _ l1234 _ l1235 _ l1236 _ l1237 _ l1238 _ l1239 _
-     l1240 _ l1241 _ l1242 _ l1243 _ l1244 _ l1245 _ l1246 _ l1247 _
-     l1248 _ l1249 _ l1250 _ l1251 _ l1252 _ l1253 _ l1254 _ l1255 _
-     l1256 _ l1257 _ l1258 _ l1259 _ l1260 _ l1261 _ l1262 _ l1263 _
-     l1264 _ l1265 _ l1266 _ l1267 _ l1268 _ l1269 _ l1270 _ l1271 _
-     l1272 _ l1273 _ l1274 _ l1275 _ l1276 _ l1277 _ l1278 _ l1279 _
-     l1280 _ l1281 _ l1282 _ l1283 _ l1284 _ l1285 _ l1286 _ l1287 _
-     l1288 _ l1289 _ l1290 _ l1291 _ l1292 _ l1293 _ l1294 _ l1295 _
-     l1296 _ l1297 _ l1298 _ l1299 _ l1300 _ l1301 _ l1302 _ l1303 _
-     l1304 _ l1305 _ l1306 _ l1307 _ l1308 _ l1309 _ l1310 _ l1311 _
-     l1312 _ l1313 _ l1314 _ l1315 _ l1316 _ l1317 _ l1318 _ l1319 _
-     l1320 _ l1321 _ l1322 _ l1323 _ l1324 _ l1325 _ l1326 _ l1327 _
-     l1328 _ l1329 _ l1330 _ l1331 _ l1332 _ l1333 _ l1334 _ l1335 _
-     l1336 _ l1337 _ l1338 _ l1339 _ l1340 _ l1341 _ l1342 _ l1343 _
-     l1344 _ l1345 _ l1346 _ l1347 _ l1348 _ l1349 _ l1350 _ l1351 _
-     l1352 _ l1353 _ l1354 _ l1355 _ l1356 _ l1357 _ l1358 _ l1359 _
-     l1360 _ l1361 _ l1362 _ l1363 _ l1364 _ l1365 _ l1366 _ l1367 _
-     l1368 _ l1369 _ l1370 _ l1371 _ l1372 _ l1373 _ l1374 _ l1375 _
-     l1376 _ l1377 _ l1378 _ l1379 _ l1380 _ l1381 _ l1382 _ l1383 _
-     l1384 _ l1385 _ l1386 _ l1387 _ l1388 _ l1389 _ l1390 _ l1391 _
-     l1392 _ l1393 _ l1394 _ l1395 _ l1396 _ l1397 _ l1398 _ l1399 _
-     l1400 _ l1401 _ l1402 _ l1403 _ l1404 _ l1405 _ l1406 _ l1407 _
-     l1408 _ l1409 _ l1410 _ l1411 _ l1412 _ l1413 _ l1414 _ l1415 _
-     l1416 _ l1417 _ l1418 _ l1419 _ l1420 _ l1421 _ l1422 _ l1423 _
-     l1424 _ l1425 _ l1426 _ l1427 _ l1428 _ l1429 _ l1430 _ l1431 _
-     l1432 _ l1433 _ l1434 _ l1435 _ l1436 _ l1437 _ l1438 _ l1439 _
-     l1440 _ l1441 _ l1442 _ l1443 _ l1444 _ l1445 _ l1446 _ l1447 _
-     l1448 _ l1449 _ l1450 _ l1451 _ l1452 _ l1453 _ l1454 _ l1455 _
-     l1456 _ l1457 _ l1458 _ l1459 _ l1460 _ l1461 _ l1462 _ l1463 _
-     l1464 _ l1465 _ l1466 _ l1467 _ l1468 _ l1469 _ l1470 _ l1471 _
-     l1472 _ l1473 _ l1474 _ l1475 _ l1476 _ l1477 _ l1478 _ l1479 _
-     l1480 _ l1481 _ l1482 _ l1483 _ l1484 _ l1485 _ l1486 _ l1487 _
-     l1488 _ l1489 _ l1490 _ l1491 _ l1492 _ l1493 _ l1494 _ l1495 _
-     l1496 _ l1497 _ l1498 _ l1499 _ l1500 _ l1501 _ l1502 _ l1503 _
-     l1504 _ l1505 _ l1506 _ l1507 _ l1508 _ l1509 _ l1510 _ l1511 _
-     l1512 _ l1513 _ l1514 _ l1515 _ l1516 _ l1517 _ l1518 _ l1519 _
-     l1520 _ l1521 _ l1522 _ l1523 _ l1524 _ l1525 _ l1526 _ l1527 _
-     l1528 _ l1529 _ l1530 _ l1531 _ l1532 _ l1533 _ l1534 _ l1535 _
-     l1536 _ l1537 _ l1538 _ l1539 _ l1540 _ l1541 _ l1542 _ l1543 _
-     l1544 _ l1545 _ l1546 _ l1547 _ l1548 _ l1549 _ l1550 _ l1551 _
-     l1552 _ l1553 _ l1554 _ l1555 _ l1556 _ l1557 _ l1558 _ l1559 _
-     l1560 _ l1561 _ l1562 _ l1563 _ l1564 _ l1565 _ l1566 _ l1567 _
-     l1568 _ l1569 _ l1570 _ l1571 _ l1572 _ l1573 _ l1574 _ l1575 _
-     l1576 _ l1577 _ l1578 _ l1579 _ l1580 _ l1581 _ l1582 _ l1583 _
-     l1584 _ l1585 _ l1586 _ l1587 _ l1588 _ l1589 _ l1590 _ l1591 _
-     l1592 _ l1593 _ l1594 _ l1595 _ l1596 _ l1597 _ l1598 _ l1599 _
-     l1600 _ l1601 _ l1602 _ l1603 _ l1604 _ l1605 _ l1606 _ l1607 _
-     l1608 _ l1609 _ l1610 _ l1611 _ l1612 _ l1613 _ l1614 _ l1615 _
-     l1616 _ l1617 _ l1618 _ l1619 _ l1620 _ l1621 _ l1622 _ l1623 _
-     l1624 _ l1625 _ l1626 _ l1627 _ l1628 _ l1629 _ l1630 _ l1631 _
-     l1632 _ l1633 _ l1634 _ l1635 _ l1636 _ l1637 _ l1638 _ l1639 _
-     l1640 _ l1641 _ l1642 _ l1643 _ l1644 _ l1645 _ l1646 _ l1647 _
-     l1648 _ l1649 _ l1650 _ l1651 _ l1652 _ l1653 _ l1654 _ l1655 _
-     l1656 _ l1657 _ l1658 _ l1659 _ l1660 _ l1661 _ l1662 _ l1663 _
-     l1664 _ l1665 _ l1666 _ l1667 _ l1668 _ l1669 _ l1670 _ l1671 _
-     l1672 _ l1673 _ l1674 _ l1675 _ l1676 _ l1677 _ l1678 _ l1679 _
-     l1680 _ l1681 _ l1682 _ l1683 _ l1684 _ l1685 _ l1686 _ l1687 _
-     l1688 _ l1689 _ l1690 _ l1691 _ l1692 _ l1693 _ l1694 _ l1695 _
-     l1696 _ l1697 _ l1698 _ l1699 _ l1700 _ l1701 _ l1702 _ l1703 _
-     l1704 _ l1705 _ l1706 _ l1707 _ l1708 _ l1709 _ l1710 _ l1711 _
-     l1712 _ l1713 _ l1714 _ l1715 _ l1716 _ l1717 _ l1718 _ l1719 _
-     l1720 _ l1721 _ l1722 _ l1723 _ l1724 _ l1725 _ l1726 _ l1727 _
-     l1728 _ l1729 _ l1730 _ l1731 _ l1732 _ l1733 _ l1734 _ l1735 _
-     l1736 _ l1737 _ l1738 _ l1739 _ l1740 _ l1741 _ l1742 _ l1743 _
-     l1744 _ l1745 _ l1746 _ l1747 _ l1748 _ l1749 _ l1750 _ l1751 _
-     l1752 _ l1753 _ l1754 _ l1755 _ l1756 _ l1757 _ l1758 _ l1759 _
-     l1760 _ l1761 _ l1762 _ l1763 _ l1764 _ l1765 _ l1766 _ l1767 _
-     l1768 _ l1769 _ l1770 _ l1771 _ l1772 _ l1773 _ l1774 _ l1775 _
-     l1776 _ l1777 _ l1778 _ l1779 _ l1780 _ l1781 _ l1782 _ l1783 _
-     l1784 _ l1785 _ l1786 _ l1787 _ l1788 _ l1789 _ l1790 _ l1791 _
-     l1792 _ l1793 _ l1794 _ l1795 _ l1796 _ l1797 _ l1798 _ l1799 _
-     l1800 _ l1801 _ l1802 _ l1803 _ l1804 _ l1805 _ l1806 _ l1807 _
-     l1808 _ l1809 _ l1810 _ l1811 _ l1812 _ l1813 _ l1814 _ l1815 _
-     l1816 _ l1817 _ l1818 _ l1819 _ l1820 _ l1821 _ l1822 _ l1823 _
-     l1824 _ l1825 _ l1826 _ l1827 _ l1828 _ l1829 _ l1830 _ l1831 _
-     l1832 _ l1833 _ l1834 _ l1835 _ l1836 _ l1837 _ l1838 _ l1839 _
-     l1840 _ l1841 _ l1842 _ l1843 _ l1844 _ l1845 _ l1846 _ l1847 _
-     l1848 _ l1849 _ l1850 _ l1851 _ l1852 _ l1853 _ l1854 _ l1855 _
-     l1856 _ l1857 _ l1858 _ l1859 _ l1860 _ l1861 _ l1862 _ l1863 _
-     l1864 _ l1865 _ l1866 _ l1867 _ l1868 _ l1869 _ l1870 _ l1871 _
-     l1872 _ l1873 _ l1874 _ l1875 _ l1876 _ l1877 _ l1878 _ l1879 _
-     l1880 _ l1881 _ l1882 _ l1883 _ l1884 _ l1885 _ l1886 _ l1887 _
-     l1888 _ l1889 _ l1890 _ l1891 _ l1892 _ l1893 _ l1894 _ l1895 _
-     l1896 _ l1897 _ l1898 _ l1899 _ l1900 _ l1901 _ l1902 _ l1903 _
-     l1904 _ l1905 _ l1906 _ l1907 _ l1908 _ l1909 _ l1910 _ l1911 _
-     l1912 _ l1913 _ l1914 _ l1915 _ l1916 _ l1917 _ l1918 _ l1919 _
-     l1920 _ l1921 _ l1922 _ l1923 _ l1924 _ l1925 _ l1926 _ l1927 _
-     l1928 _ l1929 _ l1930 _ l1931 _ l1932 _ l1933 _ l1934 _ l1935 _
-     l1936 _ l1937 _ l1938 _ l1939 _ l1940 _ l1941 _ l1942 _ l1943 _
-     l1944 _ l1945 _ l1946 _ l1947 _ l1948 _ l1949 _ l1950 _ l1951 _
-     l1952 _ l1953 _ l1954 _ l1955 _ l1956 _ l1957 _ l1958 _ l1959 _
-     l1960 _ l1961 _ l1962 _ l1963 _ l1964 _ l1965 _ l1966 _ l1967 _
-     l1968 _ l1969 _ l1970 _ l1971 _ l1972 _ l1973 _ l1974 _ l1975 _
-     l1976 _ l1977 _ l1978 _ l1979 _ l1980 _ l1981 _ l1982 _ l1983 _
-     l1984 _ l1985 _ l1986 _ l1987 _ l1988 _ l1989 _ l1990 _ l1991 _
-     l1992 _ l1993 _ l1994 _ l1995 _ l1996 _ l1997 _ l1998 _ l1999 _
-     l2000 _ l2001 _ l2002 _ l2003 _ l2004 _ l2005 _ l2006 _ l2007 _
-     l2008 _ l2009 _ l2010 _ l2011 _ l2012 _ l2013 _ l2014 _ l2015 _
-     l2016 _ l2017 _ l2018 _ l2019 _ l2020 _ l2021 _ l2022 _ l2023 _
-     l2024 _ l2025 _ l2026 _ l2027 _ l2028 _ l2029 _ l2030 _ l2031 _
-     l2032 _ l2033 _ l2034 _ l2035 _ l2036 _ l2037 _ l2038 _ l2039 _
-     l2040 _ l2041 _ l2042 _ l2043 _ l2044 _ l2045 _ l2046 _ l2047 _
-     l2048 _ l2049 _ l2050 _ l2051 _ l2052 _ l2053 _ l2054 _ l2055 _
-     l2056 _ l2057 _ l2058 _ l2059 _ l2060 _ l2061 _ l2062 _ l2063 _
-     l2064 _ l2065 _ l2066 _ l2067 _ l2068 _ l2069 _ l2070 _ l2071 _
-     l2072 _ l2073 _ l2074 _ l2075 _ l2076 _ l2077 _ l2078 _ l2079 _
-     l2080 _ l2081 _ l2082 _ l2083 _ l2084 _ l2085 _ l2086 _ l2087 _
-     l2088 _ l2089 _ l2090 _ l2091 _ l2092 _ l2093 _ l2094 _ l2095 _
-     l2096 _ l2097 _ l2098 _ l2099 _ l2100 _ l2101 _ l2102 _ l2103 _
-     l2104 _ l2105 _ l2106 _ l2107 _ l2108 _ l2109 _ l2110 _ l2111 _
-     l2112 _ l2113 _ l2114 _ l2115 _ l2116 _ l2117 _ l2118 _ l2119 _
-     l2120 _ l2121 _ l2122 _ l2123 _ l2124 _ l2125 _ l2126 _ l2127 _
-     l2128 _ l2129 _ l2130 _ l2131 _ l2132 _ l2133 _ l2134 _ l2135 _
-     l2136 _ l2137 _ l2138 _ l2139 _ l2140 _ l2141 _ l2142 _ l2143 _
-     l2144 _ l2145 _ l2146 _ l2147 _ l2148 _ l2149 _ l2150 _ l2151 _
-     l2152 _ l2153 _ l2154 _ l2155 _ l2156 _ l2157 _ l2158 _ l2159 _
-     l2160 _ l2161 _ l2162 _ l2163 _ l2164 _ l2165 _ l2166 _ l2167 _
-     l2168 _ l2169 _ l2170 _ l2171 _ l2172 _ l2173 _ l2174 _ l2175 _
-     l2176 _ l2177 _ l2178 _ l2179 _ l2180 _ l2181 _ l2182 _ l2183 _
-     l2184 _ l2185 _ l2186 _ l2187 _ l2188 _ l2189 _ l2190 _ l2191 _
-     l2192 _ l2193 _ l2194 _ l2195 _ l2196 _ l2197 _ l2198 _ l2199 _
-     l2200 _ l2201 _ l2202 _ l2203 _ l2204 _ l2205 _ l2206 _ l2207 _
-     l2208 _ l2209 _ l2210 _ l2211 _ l2212 _ l2213 _ l2214 _ l2215 _
-     l2216 _ l2217 _ l2218 _ l2219 _ l2220 _ l2221 _ l2222 _ l2223 _
-     l2224 _ l2225 _ l2226 _ l2227 _ l2228 _ l2229 _ l2230 _ l2231 _
-     l2232 _ l2233 _ l2234 _ l2235 _ l2236 _ l2237 _ l2238 _ l2239 _
-     l2240 _ l2241 _ l2242 _ l2243 _ l2244 _ l2245 _ l2246 _ l2247 _
-     l2248 _ l2249 _ l2250 _ l2251 _ l2252 _ l2253 _ l2254 _ l2255 _
-     l2256 _ l2257 _ l2258 _ l2259 _ l2260 _ l2261 _ l2262 _ l2263 _
-     l2264 _ l2265 _ l2266 _ l2267 _ l2268 _ l2269 _ l2270 _ l2271 _
-     l2272 _ l2273 _ l2274 _ l2275 _ l2276 _ l2277 _ l2278 _ l2279 _
-     l2280 _ l2281 _ l2282 _ l2283 _ l2284 _ l2285 _ l2286 _ l2287 _
-     l2288 _ l2289 _ l2290 _ l2291 _ l2292 _ l2293 _ l2294 _ l2295 _
-     l2296 _ l2297 _ l2298 _ l2299 _ l2300 _ l2301 _ l2302 _ l2303 _
-     l2304 _ l2305 _ l2306 _ l2307 _ l2308 _ l2309 _ l2310 _ l2311 _
-     l2312 _ l2313 _ l2314 _ l2315 _ l2316 _ l2317 _ l2318 _ l2319 _
-     l2320 _ l2321 _ l2322 _ l2323 _ l2324 _ l2325 _ l2326 _ l2327 _
-     l2328 _ l2329 _ l2330 _ l2331 _ l2332 _ l2333 _ l2334 _ l2335 _
-     l2336 _ l2337 _ l2338 _ l2339 _ l2340 _ l2341 _ l2342 _ l2343 _
-     l2344 _ l2345 _ l2346 _ l2347 _ l2348 _ l2349 _ l2350 _ l2351 _
-     l2352 _ l2353 _ l2354 _ l2355 _ l2356 _ l2357 _ l2358 _ l2359 _
-     l2360 _ l2361 _ l2362 _ l2363 _ l2364 _ l2365 _ l2366 _ l2367 _
-     l2368 _ l2369 _ l2370 _ l2371 _ l2372 _ l2373 _ l2374 _ l2375 _
-     l2376 _ l2377 _ l2378 _ l2379 _ l2380 _ l2381 _ l2382 _ l2383 _
-     l2384 _ l2385 _ l2386 _ l2387 _ l2388 _ l2389 _ l2390 _ l2391 _
-     l2392 _ l2393 _ l2394 _ l2395 _ l2396 _ l2397 _ l2398 _ l2399 _
-     l2400 _ l2401 _ l2402 _ l2403 _ l2404 _ l2405 _ l2406 _ l2407 _
-     l2408 _ l2409 _ l2410 _ l2411 _ l2412 _ l2413 _ l2414 _ l2415 _
-     l2416 _ l2417 _ l2418 _ l2419 _ l2420 _ l2421 _ l2422 _ l2423 _
-     l2424 _ l2425 _ l2426 _ l2427 _ l2428 _ l2429 _ l2430 _ l2431 _
-     l2432 _ l2433 _ l2434 _ l2435 _ l2436 _ l2437 _ l2438 _ l2439 _
-     l2440 _ l2441 _ l2442 _ l2443 _ l2444 _ l2445 _ l2446 _ l2447 _
-     l2448 _ l2449 _ l2450 _ l2451 _ l2452 _ l2453 _ l2454 _ l2455 _
-     l2456 _ l2457 _ l2458 _ l2459 _ l2460 _ l2461 _ l2462 _ l2463 _
-     l2464 _ l2465 _ l2466 _ l2467 _ l2468 _ l2469 _ l2470 _ l2471 _
-     l2472 _ l2473 _ l2474 _ l2475 _ l2476 _ l2477 _ l2478 _ l2479 _
-     l2480 _ l2481 _ l2482 _ l2483 _ l2484 _ l2485 _ l2486 _ l2487 _
-     l2488 _ l2489 _ l2490 _ l2491 _ l2492 _ l2493 _ l2494 _ l2495 _
-     l2496 _ l2497 _ l2498 _ l2499 _ l2500 _ l2501 _ l2502 _ l2503 _
-     l2504 _ l2505 _ l2506 _ l2507 _ l2508 _ l2509 _ l2510 _ l2511 _
-     l2512 _ l2513 _ l2514 _ l2515 _ l2516 _ l2517 _ l2518 _ l2519 _
-     l2520 _ l2521 _ l2522 _ l2523 _ l2524 _ l2525 _ l2526 _ l2527 _
-     l2528 _ l2529 _ l2530 _ l2531 _ l2532 _ l2533 _ l2534 _ l2535 _
-     l2536 _ l2537 _ l2538 _ l2539 _ l2540 _ l2541 _ l2542 _ l2543 _
-     l2544 _ l2545 _ l2546 _ l2547 _ l2548 _ l2549 _ l2550 _ l2551 _
-     l2552 _ l2553 _ l2554 _ l2555 _ l2556 _ l2557 _ l2558 _ l2559 _
-     l2560 _ l2561 _ l2562 _ l2563 _ l2564 _ l2565 _ l2566 _ l2567 _
-     l2568 _ l2569 _ l2570 _ l2571 _ l2572 _ l2573 _ l2574 _ l2575 _
-     l2576 _ l2577 _ l2578 _ l2579 _ l2580 _ l2581 _ l2582 _ l2583 _
-     l2584 _ l2585 _ l2586 _ l2587 _ l2588 _ l2589 _ l2590 _ l2591 _
-     l2592 _ l2593 _ l2594 _ l2595 _ l2596 _ l2597 _ l2598 _ l2599 _
-     l2600 _ l2601 _ l2602 _ l2603 _ l2604 _ l2605 _ l2606 _ l2607 _
-     l2608 _ l2609 _ l2610 _ l2611 _ l2612 _ l2613 _ l2614 _ l2615 _
-     l2616 _ l2617 _ l2618 _ l2619 _ l2620 _ l2621 _ l2622 _ l2623 _
-     l2624 _ l2625 _ l2626 _ l2627 _ l2628 _ l2629 _ l2630 _ l2631 _
-     l2632 _ l2633 _ l2634 _ l2635 _ l2636 _ l2637 _ l2638 _ l2639 _
-     l2640 _ l2641 _ l2642 _ l2643 _ l2644 _ l2645 _ l2646 _ l2647 _
-     l2648 _ l2649 _ l2650 _ l2651 _ l2652 _ l2653 _ l2654 _ l2655 _
-     l2656 _ l2657 _ l2658 _ l2659 _ l2660 _ l2661 _ l2662 _ l2663 _
-     l2664 _ l2665 _ l2666 _ l2667 _ l2668 _ l2669 _ l2670 _ l2671 _
-     l2672 _ l2673 _ l2674 _ l2675 _ l2676 _ l2677 _ l2678 _ l2679 _
-     l2680 _ l2681 _ l2682 _ l2683 _ l2684 _ l2685 _ l2686 _ l2687 _
-     l2688 _ l2689 _ l2690 _ l2691 _ l2692 _ l2693 _ l2694 _ l2695 _
-     l2696 _ l2697 _ l2698 _ l2699 _ l2700 _ l2701 _ l2702 _ l2703 _
-     l2704 _ l2705 _ l2706 _ l2707 _ l2708 _ l2709 _ l2710 _ l2711 _
-     l2712 _ l2713 _ l2714 _ l2715 _ l2716 _ l2717 _ l2718 _ l2719 _
-     l2720 _ l2721 _ l2722 _ l2723 _ l2724 _ l2725 _ l2726 _ l2727 _
-     l2728 _ l2729 _ l2730 _ l2731 _ l2732 _ l2733 _ l2734 _ l2735 _
-     l2736 _ l2737 _ l2738 _ l2739 _ l2740 _ l2741 _ l2742 _ l2743 _
-     l2744 _ l2745 _ l2746 _ l2747 _ l2748 _ l2749 _ l2750 _ l2751 _
-     l2752 _ l2753 _ l2754 _ l2755 _ l2756 _ l2757 _ l2758 _ l2759 _
-     l2760 _ l2761 _ l2762 _ l2763 _ l2764 _ l2765 _ l2766 _ l2767 _
-     l2768 _ l2769 _ l2770 _ l2771 _ l2772 _ l2773 _ l2774 _ l2775 _
-     l2776 _ l2777 _ l2778 _ l2779 _ l2780 _ l2781 _ l2782 _ l2783 _
-     l2784 _ l2785 _ l2786 _ l2787 _ l2788 _ l2789 _ l2790 _ l2791 _
-     l2792 _ l2793 _ l2794 _ l2795 _ l2796 _ l2797 _ l2798 _ l2799 _
-     l2800 _ l2801 _ l2802 _ l2803 _ l2804 _ l2805 _ l2806 _ l2807 _
-     l2808 _ l2809 _ l2810 _ l2811 _ l2812 _ l2813 _ l2814 _ l2815 _
-     l2816 _ l2817 _ l2818 _ l2819 _ l2820 _ l2821 _ l2822 _ l2823 _
-     l2824 _ l2825 _ l2826 _ l2827 _ l2828 _ l2829 _ l2830 _ l2831 _
-     l2832 _ l2833 _ l2834 _ l2835 _ l2836 _ l2837 _ l2838 _ l2839 _
-     l2840 _ l2841 _ l2842 _ l2843 _ l2844 _ l2845 _ l2846 _ l2847 _
-     l2848 _ l2849 _ l2850 _ l2851 _ l2852 _ l2853 _ l2854 _ l2855 _
-     l2856 _ l2857 _ l2858 _ l2859 _ l2860 _ l2861 _ l2862 _ l2863 _
-     l2864 _ l2865 _ l2866 _ l2867 _ l2868 _ l2869 _ l2870 _ l2871 _
-     l2872 _ l2873 _ l2874 _ l2875 _ l2876 _ l2877 _ l2878 _ l2879 _
-     l2880 _ l2881 _ l2882 _ l2883 _ l2884 _ l2885 _ l2886 _ l2887 _
-     l2888 _ l2889 _ l2890 _ l2891 _ l2892 _ l2893 _ l2894 _ l2895 _
-     l2896 _ l2897 _ l2898 _ l2899 _ l2900 _ l2901 _ l2902 _ l2903 _
-     l2904 _ l2905 _ l2906 _ l2907 _ l2908 _ l2909 _ l2910 _ l2911 _
-     l2912 _ l2913 _ l2914 _ l2915 _ l2916 _ l2917 _ l2918 _ l2919 _
-     l2920 _ l2921 _ l2922 _ l2923 _ l2924 _ l2925 _ l2926 _ l2927 _
-     l2928 _ l2929 _ l2930 _ l2931 _ l2932 _ l2933 _ l2934 _ l2935 _
-     l2936 _ l2937 _ l2938 _ l2939 _ l2940 _ l2941 _ l2942 _ l2943 _
-     l2944 _ l2945 _ l2946 _ l2947 _ l2948 _ l2949 _ l2950 _ l2951 _
-     l2952 _ l2953 _ l2954 _ l2955 _ l2956 _ l2957 _ l2958 _ l2959 _
-     l2960 _ l2961 _ l2962 _ l2963 _ l2964 _ l2965 _ l2966 _ l2967 _
-     l2968 _ l2969 _ l2970 _ l2971 _ l2972 _ l2973 _ l2974 _ l2975 _
-     l2976 _ l2977 _ l2978 _ l2979 _ l2980 _ l2981 _ l2982 _ l2983 _
-     l2984 _ l2985 _ l2986 _ l2987 _ l2988 _ l2989 _ l2990 _ l2991 _
-     l2992 _ l2993 _ l2994 _ l2995 _ l2996 _ l2997 _ l2998 _ l2999 _
-     l3000 _ l3001 _ l3002 _ l3003 _ l3004 _ l3005 _ l3006 _ l3007 _
-     l3008 _ l3009 _ l3010 _ l3011 _ l3012 _ l3013 _ l3014 _ l3015 _
-     l3016 _ l3017 _ l3018 _ l3019 _ l3020 _ l3021 _ l3022 _ l3023 _
-     l3024 _ l3025 _ l3026 _ l3027 _ l3028 _ l3029 _ l3030 _ l3031 _
-     l3032 _ l3033 _ l3034 _ l3035 _ l3036 _ l3037 _ l3038 _ l3039 _
-     l3040 _ l3041 _ l3042 _ l3043 _ l3044 _ l3045 _ l3046 _ l3047 _
-     l3048 _ l3049 _ l3050 _ l3051 _ l3052 _ l3053 _ l3054 _ l3055 _
-     l3056 _ l3057 _ l3058 _ l3059 _ l3060 _ l3061 _ l3062 _ l3063 _
-     l3064 _ l3065 _ l3066 _ l3067 _ l3068 _ l3069 _ l3070 _ l3071 _
-     l3072 _ l3073 _ l3074 _ l3075 _ l3076 _ l3077 _ l3078 _ l3079 _
-     l3080 _ l3081 _ l3082 _ l3083 _ l3084 _ l3085 _ l3086 _ l3087 _
-     l3088 _ l3089 _ l3090 _ l3091 _ l3092 _ l3093 _ l3094 _ l3095 _
-     l3096 _ l3097 _ l3098 _ l3099 _ l3100 _ l3101 _ l3102 _ l3103 _
-     l3104 _ l3105 _ l3106 _ l3107 _ l3108 _ l3109 _ l3110 _ l3111 _
-     l3112 _ l3113 _ l3114 _ l3115 _ l3116 _ l3117 _ l3118 _ l3119 _
-     l3120 _ l3121 _ l3122 _ l3123 _ l3124 _ l3125 _ l3126 _ l3127 _
-     l3128 _ l3129 _ l3130 _ l3131 _ l3132 _ l3133 _ l3134 _ l3135 _
-     l3136 _ l3137 _ l3138 _ l3139 _ l3140 _ l3141 _ l3142 _ l3143 _
-     l3144 _ l3145 _ l3146 _ l3147 _ l3148 _ l3149 _ l3150 _ l3151 _
-     l3152 _ l3153 _ l3154 _ l3155 _ l3156 _ l3157 _ l3158 _ l3159 _
-     l3160 _ l3161 _ l3162 _ l3163 _ l3164 _ l3165 _ l3166 _ l3167 _
-     l3168 _ l3169 _ l3170 _ l3171 _ l3172 _ l3173 _ l3174 _ l3175 _
-     l3176 _ l3177 _ l3178 _ l3179 _ l3180 _ l3181 _ l3182 _ l3183 _
-     l3184 _ l3185 _ l3186 _ l3187 _ l3188 _ l3189 _ l3190 _ l3191 _
-     l3192 _ l3193 _ l3194 _ l3195 _ l3196 _ l3197 _ l3198 _ l3199 _
-     l3200 _ l3201 _ l3202 _ l3203 _ l3204 _ l3205 _ l3206 _ l3207 _
-     l3208 _ l3209 _ l3210 _ l3211 _ l3212 _ l3213 _ l3214 _ l3215 _
-     l3216 _ l3217 _ l3218 _ l3219 _ l3220 _ l3221 _ l3222 _ l3223 _
-     l3224 _ l3225 _ l3226 _ l3227 _ l3228 _ l3229 _ l3230 _ l3231 _
-     l3232 _ l3233 _ l3234 _ l3235 _ l3236 _ l3237 _ l3238 _ l3239 _
-     l3240 _ l3241 _ l3242 _ l3243 _ l3244 _ l3245 _ l3246 _ l3247 _
-     l3248 _ l3249 _ l3250 _ l3251 _ l3252 _ l3253 _ l3254 _ l3255 _
-     l3256 _ l3257 _ l3258 _ l3259 _ l3260 _ l3261 _ l3262 _ l3263 _
-     l3264 _ l3265 _ l3266 _ l3267 _ l3268 _ l3269 _ l3270 _ l3271 _
-     l3272 _ l3273 _ l3274 _ l3275 _ l3276 _ l3277 _ l3278 _ l3279 _
-     l3280 _ l3281 _ l3282 _ l3283 _ l3284 _ l3285 _ l3286 _ l3287 _
-     l3288 _ l3289 _ l3290 _ l3291 _ l3292 _ l3293 _ l3294 _ l3295 _
-     l3296 _ l3297 _ l3298 _ l3299 _ l3300 _ l3301 _ l3302 _ l3303 _
-     l3304 _ l3305 _ l3306 _ l3307 _ l3308 _ l3309 _ l3310 _ l3311 _
-     l3312 _ l3313 _ l3314 _ l3315 _ l3316 _ l3317 _ l3318 _ l3319 _
-     l3320 _ l3321 _ l3322 _ l3323 _ l3324 _ l3325 _ l3326 _ l3327 _
-     l3328 _ l3329 _ l3330 _ l3331 _ l3332 _ l3333 _ l3334 _ l3335 _
-     l3336 _ l3337 _ l3338 _ l3339 _ l3340 _ l3341 _ l3342 _ l3343 _
-     l3344 _ l3345 _ l3346 _ l3347 _ l3348 _ l3349 _ l3350 _ l3351 _
-     l3352 _ l3353 _ l3354 _ l3355 _ l3356 _ l3357 _ l3358 _ l3359 _
-     l3360 _ l3361 _ l3362 _ l3363 _ l3364 _ l3365 _ l3366 _ l3367 _
-     l3368 _ l3369 _ l3370 _ l3371 _ l3372 _ l3373 _ l3374 _ l3375 _
-     l3376 _ l3377 _ l3378 _ l3379 _ l3380 _ l3381 _ l3382 _ l3383 _
-     l3384 _ l3385 _ l3386 _ l3387 _ l3388 _ l3389 _ l3390 _ l3391 _
-     l3392 _ l3393 _ l3394 _ l3395 _ l3396 _ l3397 _ l3398 _ l3399 _
-     l3400 _ l3401 _ l3402 _ l3403 _ l3404 _ l3405 _ l3406 _ l3407 _
-     l3408 _ l3409 _ l3410 _ l3411 _ l3412 _ l3413 _ l3414 _ l3415 _
-     l3416 _ l3417 _ l3418 _ l3419 _ l3420 _ l3421 _ l3422 _ l3423 _
-     l3424 _ l3425 _ l3426 _ l3427 _ l3428 _ l3429 _ l3430 _ l3431 _
-     l3432 _ l3433 _ l3434 _ l3435 _ l3436 _ l3437 _ l3438 _ l3439 _
-     l3440 _ l3441 _ l3442 _ l3443 _ l3444 _ l3445 _ l3446 _ l3447 _
-     l3448 _ l3449 _ l3450 _ l3451 _ l3452 _ l3453 _ l3454 _ l3455 _
-     l3456 _ l3457 _ l3458 _ l3459 _ l3460 _ l3461 _ l3462 _ l3463 _
-     l3464 _ l3465 _ l3466 _ l3467 _ l3468 _ l3469 _ l3470 _ l3471 _
-     l3472 _ l3473 _ l3474 _ l3475 _ l3476 _ l3477 _ l3478 _ l3479 _
-     l3480 _ l3481 _ l3482 _ l3483 _ l3484 _ l3485 _ l3486 _ l3487 _
-     l3488 _ l3489 _ l3490 _ l3491 _ l3492 _ l3493 _ l3494 _ l3495 _
-     l3496 _ l3497 _ l3498 _ l3499 _ l3500 _ l3501 _ l3502 _ l3503 _
-     l3504 _ l3505 _ l3506 _ l3507 _ l3508 _ l3509 _ l3510 _ l3511 _
-     l3512 _ l3513 _ l3514 _ l3515 _ l3516 _ l3517 _ l3518 _ l3519 _
-     l3520 _ l3521 _ l3522 _ l3523 _ l3524 _ l3525 _ l3526 _ l3527 _
-     l3528 _ l3529 _ l3530 _ l3531 _ l3532 _ l3533 _ l3534 _ l3535 _
-     l3536 _ l3537 _ l3538 _ l3539 _ l3540 _ l3541 _ l3542 _ l3543 _
-     l3544 _ l3545 _ l3546 _ l3547 _ l3548 _ l3549 _ l3550 _ l3551 _
-     l3552 _ l3553 _ l3554 _ l3555 _ l3556 _ l3557 _ l3558 _ l3559 _
-     l3560 _ l3561 _ l3562 _ l3563 _ l3564 _ l3565 _ l3566 _ l3567 _
-     l3568 _ l3569 _ l3570 _ l3571 _ l3572 _ l3573 _ l3574 _ l3575 _
-     l3576 _ l3577 _ l3578 _ l3579 _ l3580 _ l3581 _ l3582 _ l3583 _
-     l3584 _ l3585 _ l3586 _ l3587 _ l3588 _ l3589 _ l3590 _ l3591 _
-     l3592 _ l3593 _ l3594 _ l3595 _ l3596 _ l3597 _ l3598 _ l3599 _
-     l3600 _ l3601 _ l3602 _ l3603 _ l3604 _ l3605 _ l3606 _ l3607 _
-     l3608 _ l3609 _ l3610 _ l3611 _ l3612 _ l3613 _ l3614 _ l3615 _
-     l3616 _ l3617 _ l3618 _ l3619 _ l3620 _ l3621 _ l3622 _ l3623 _
-     l3624 _ l3625 _ l3626 _ l3627 _ l3628 _ l3629 _ l3630 _ l3631 _
-     l3632 _ l3633 _ l3634 _ l3635 _ l3636 _ l3637 _ l3638 _ l3639 _
-     l3640 _ l3641 _ l3642 _ l3643 _ l3644 _ l3645 _ l3646 _ l3647 _
-     l3648 _ l3649 _ l3650 _ l3651 _ l3652 _ l3653 _ l3654 _ l3655 _
-     l3656 _ l3657 _ l3658 _ l3659 _ l3660 _ l3661 _ l3662 _ l3663 _
-     l3664 _ l3665 _ l3666 _ l3667 _ l3668 _ l3669 _ l3670 _ l3671 _
-     l3672 _ l3673 _ l3674 _ l3675 _ l3676 _ l3677 _ l3678 _ l3679 _
-     l3680 _ l3681 _ l3682 _ l3683 _ l3684 _ l3685 _ l3686 _ l3687 _
-     l3688 _ l3689 _ l3690 _ l3691 _ l3692 _ l3693 _ l3694 _ l3695 _
-     l3696 _ l3697 _ l3698 _ l3699 _ l3700 _ l3701 _ l3702 _ l3703 _
-     l3704 _ l3705 _ l3706 _ l3707 _ l3708 _ l3709 _ l3710 _ l3711 _
-     l3712 _ l3713 _ l3714 _ l3715 _ l3716 _ l3717 _ l3718 _ l3719 _
-     l3720 _ l3721 _ l3722 _ l3723 _ l3724 _ l3725 _ l3726 _ l3727 _
-     l3728 _ l3729 _ l3730 _ l3731 _ l3732 _ l3733 _ l3734 _ l3735 _
-     l3736 _ l3737 _ l3738 _ l3739 _ l3740 _ l3741 _ l3742 _ l3743 _
-     l3744 _ l3745 _ l3746 _ l3747 _ l3748 _ l3749 _ l3750 _ l3751 _
-     l3752 _ l3753 _ l3754 _ l3755 _ l3756 _ l3757 _ l3758 _ l3759 _
-     l3760 _ l3761 _ l3762 _ l3763 _ l3764 _ l3765 _ l3766 _ l3767 _
-     l3768 _ l3769 _ l3770 _ l3771 _ l3772 _ l3773 _ l3774 _ l3775 _
-     l3776 _ l3777 _ l3778 _ l3779 _ l3780 _ l3781 _ l3782 _ l3783 _
-     l3784 _ l3785 _ l3786 _ l3787 _ l3788 _ l3789 _ l3790 _ l3791 _
-     l3792 _ l3793 _ l3794 _ l3795 _ l3796 _ l3797 _ l3798 _ l3799 _
-     l3800 _ l3801 _ l3802 _ l3803 _ l3804 _ l3805 _ l3806 _ l3807 _
-     l3808 _ l3809 _ l3810 _ l3811 _ l3812 _ l3813 _ l3814 _ l3815 _
-     l3816 _ l3817 _ l3818 _ l3819 _ l3820 _ l3821 _ l3822 _ l3823 _
-     l3824 _ l3825 _ l3826 _ l3827 _ l3828 _ l3829 _ l3830 _ l3831 _
-     l3832 _ l3833 _ l3834 _ l3835 _ l3836 _ l3837 _ l3838 _ l3839 _
-     l3840 _ l3841 _ l3842 _ l3843 _ l3844 _ l3845 _ l3846 _ l3847 _
-     l3848 _ l3849 _ l3850 _ l3851 _ l3852 _ l3853 _ l3854 _ l3855 _
-     l3856 _ l3857 _ l3858 _ l3859 _ l3860 _ l3861 _ l3862 _ l3863 _
-     l3864 _ l3865 _ l3866 _ l3867 _ l3868 _ l3869 _ l3870 _ l3871 _
-     l3872 _ l3873 _ l3874 _ l3875 _ l3876 _ l3877 _ l3878 _ l3879 _
-     l3880 _ l3881 _ l3882 _ l3883 _ l3884 _ l3885 _ l3886 _ l3887 _
-     l3888 _ l3889 _ l3890 _ l3891 _ l3892 _ l3893 _ l3894 _ l3895 _
-     l3896 _ l3897 _ l3898 _ l3899 _ l3900 _ l3901 _ l3902 _ l3903 _
-     l3904 _ l3905 _ l3906 _ l3907 _ l3908 _ l3909 _ l3910 _ l3911 _
-     l3912 _ l3913 _ l3914 _ l3915 _ l3916 _ l3917 _ l3918 _ l3919 _
-     l3920 _ l3921 _ l3922 _ l3923 _ l3924 _ l3925 _ l3926 _ l3927 _
-     l3928 _ l3929 _ l3930 _ l3931 _ l3932 _ l3933 _ l3934 _ l3935 _
-     l3936 _ l3937 _ l3938 _ l3939 _ l3940 _ l3941 _ l3942 _ l3943 _
-     l3944 _ l3945 _ l3946 _ l3947 _ l3948 _ l3949 _ l3950 _ l3951 _
-     l3952 _ l3953 _ l3954 _ l3955 _ l3956 _ l3957 _ l3958 _ l3959 _
-     l3960 _ l3961 _ l3962 _ l3963 _ l3964 _ l3965 _ l3966 _ l3967 _
-     l3968 _ l3969 _ l3970 _ l3971 _ l3972 _ l3973 _ l3974 _ l3975 _
-     l3976 _ l3977 _ l3978 _ l3979 _ l3980 _ l3981 _ l3982 _ l3983 _
-     l3984 _ l3985 _ l3986 _ l3987 _ l3988 _ l3989 _ l3990 _ l3991 _
-     l3992 _ l3993 _ l3994 _ l3995 _ l3996 _ l3997 _ l3998 _ l3999 _
-     l4000 _ l4001 _ l4002 _ l4003 _ l4004 _ l4005 _ l4006 _ l4007 _
-     l4008 _ l4009 _ l4010 _ l4011 _ l4012 _ l4013 _ l4014 _ l4015 _
-     l4016 _ l4017 _ l4018 _ l4019 _ l4020 _ l4021 _ l4022 _ l4023 _
-     l4024 _ l4025 _ l4026 _ l4027 _ l4028 _ l4029 _ l4030 _ l4031 _
-     l4032 _ l4033 _ l4034 _ l4035 _ l4036 _ l4037 _ l4038 _ l4039 _
-     l4040 _ l4041 _ l4042 _ l4043 _ l4044 _ l4045 _ l4046 _ l4047 _
-     l4048 _ l4049 _ l4050 _ l4051 _ l4052 _ l4053 _ l4054 _ l4055 _
-     l4056 _ l4057 _ l4058 _ l4059 _ l4060 _ l4061 _ l4062 _ l4063 _
-     l4064 _ l4065 _ l4066 _ l4067 _ l4068 _ l4069 _ l4070 _ l4071 _
-     l4072 _ l4073 _ l4074 _ l4075 _ l4076 _ l4077 _ l4078 _ l4079 _
-     l4080 _ l4081 _ l4082 _ l4083 _ l4084 _ l4085 _ l4086 _ l4087 _
-     l4088 _ l4089 _ l4090 _ l4091 _ l4092 _ l4093 _ l4094 _ l4095 _
+       l0 _ _ _    l1 _ _ _    l2 _ _ _    l3 _ _ _    l4 _ _ _    l5 _ _ _    l6 _ _ _    l7 _ _ _
+       l8 _ _ _    l9 _ _ _   l10 _ _ _   l11 _ _ _   l12 _ _ _   l13 _ _ _   l14 _ _ _   l15 _ _ _
+      l16 _ _ _   l17 _ _ _   l18 _ _ _   l19 _ _ _   l20 _ _ _   l21 _ _ _   l22 _ _ _   l23 _ _ _
+      l24 _ _ _   l25 _ _ _   l26 _ _ _   l27 _ _ _   l28 _ _ _   l29 _ _ _   l30 _ _ _   l31 _ _ _
+      l32 _ _ _   l33 _ _ _   l34 _ _ _   l35 _ _ _   l36 _ _ _   l37 _ _ _   l38 _ _ _   l39 _ _ _
+      l40 _ _ _   l41 _ _ _   l42 _ _ _   l43 _ _ _   l44 _ _ _   l45 _ _ _   l46 _ _ _   l47 _ _ _
+      l48 _ _ _   l49 _ _ _   l50 _ _ _   l51 _ _ _   l52 _ _ _   l53 _ _ _   l54 _ _ _   l55 _ _ _
+      l56 _ _ _   l57 _ _ _   l58 _ _ _   l59 _ _ _   l60 _ _ _   l61 _ _ _   l62 _ _ _   l63 _ _ _
+      l64 _ _ _   l65 _ _ _   l66 _ _ _   l67 _ _ _   l68 _ _ _   l69 _ _ _   l70 _ _ _   l71 _ _ _
+      l72 _ _ _   l73 _ _ _   l74 _ _ _   l75 _ _ _   l76 _ _ _   l77 _ _ _   l78 _ _ _   l79 _ _ _
+      l80 _ _ _   l81 _ _ _   l82 _ _ _   l83 _ _ _   l84 _ _ _   l85 _ _ _   l86 _ _ _   l87 _ _ _
+      l88 _ _ _   l89 _ _ _   l90 _ _ _   l91 _ _ _   l92 _ _ _   l93 _ _ _   l94 _ _ _   l95 _ _ _
+      l96 _ _ _   l97 _ _ _   l98 _ _ _   l99 _ _ _  l100 _ _ _  l101 _ _ _  l102 _ _ _  l103 _ _ _
+     l104 _ _ _  l105 _ _ _  l106 _ _ _  l107 _ _ _  l108 _ _ _  l109 _ _ _  l110 _ _ _  l111 _ _ _
+     l112 _ _ _  l113 _ _ _  l114 _ _ _  l115 _ _ _  l116 _ _ _  l117 _ _ _  l118 _ _ _  l119 _ _ _
+     l120 _ _ _  l121 _ _ _  l122 _ _ _  l123 _ _ _  l124 _ _ _  l125 _ _ _  l126 _ _ _  l127 _ _ _
+     l128 _ _ _  l129 _ _ _  l130 _ _ _  l131 _ _ _  l132 _ _ _  l133 _ _ _  l134 _ _ _  l135 _ _ _
+     l136 _ _ _  l137 _ _ _  l138 _ _ _  l139 _ _ _  l140 _ _ _  l141 _ _ _  l142 _ _ _  l143 _ _ _
+     l144 _ _ _  l145 _ _ _  l146 _ _ _  l147 _ _ _  l148 _ _ _  l149 _ _ _  l150 _ _ _  l151 _ _ _
+     l152 _ _ _  l153 _ _ _  l154 _ _ _  l155 _ _ _  l156 _ _ _  l157 _ _ _  l158 _ _ _  l159 _ _ _
+     l160 _ _ _  l161 _ _ _  l162 _ _ _  l163 _ _ _  l164 _ _ _  l165 _ _ _  l166 _ _ _  l167 _ _ _
+     l168 _ _ _  l169 _ _ _  l170 _ _ _  l171 _ _ _  l172 _ _ _  l173 _ _ _  l174 _ _ _  l175 _ _ _
+     l176 _ _ _  l177 _ _ _  l178 _ _ _  l179 _ _ _  l180 _ _ _  l181 _ _ _  l182 _ _ _  l183 _ _ _
+     l184 _ _ _  l185 _ _ _  l186 _ _ _  l187 _ _ _  l188 _ _ _  l189 _ _ _  l190 _ _ _  l191 _ _ _
+     l192 _ _ _  l193 _ _ _  l194 _ _ _  l195 _ _ _  l196 _ _ _  l197 _ _ _  l198 _ _ _  l199 _ _ _
+     l200 _ _ _  l201 _ _ _  l202 _ _ _  l203 _ _ _  l204 _ _ _  l205 _ _ _  l206 _ _ _  l207 _ _ _
+     l208 _ _ _  l209 _ _ _  l210 _ _ _  l211 _ _ _  l212 _ _ _  l213 _ _ _  l214 _ _ _  l215 _ _ _
+     l216 _ _ _  l217 _ _ _  l218 _ _ _  l219 _ _ _  l220 _ _ _  l221 _ _ _  l222 _ _ _  l223 _ _ _
+     l224 _ _ _  l225 _ _ _  l226 _ _ _  l227 _ _ _  l228 _ _ _  l229 _ _ _  l230 _ _ _  l231 _ _ _
+     l232 _ _ _  l233 _ _ _  l234 _ _ _  l235 _ _ _  l236 _ _ _  l237 _ _ _  l238 _ _ _  l239 _ _ _
+     l240 _ _ _  l241 _ _ _  l242 _ _ _  l243 _ _ _  l244 _ _ _  l245 _ _ _  l246 _ _ _  l247 _ _ _
+     l248 _ _ _  l249 _ _ _  l250 _ _ _  l251 _ _ _  l252 _ _ _  l253 _ _ _  l254 _ _ _  l255 _ _ _
+     l256 _ _ _  l257 _ _ _  l258 _ _ _  l259 _ _ _  l260 _ _ _  l261 _ _ _  l262 _ _ _  l263 _ _ _
+     l264 _ _ _  l265 _ _ _  l266 _ _ _  l267 _ _ _  l268 _ _ _  l269 _ _ _  l270 _ _ _  l271 _ _ _
+     l272 _ _ _  l273 _ _ _  l274 _ _ _  l275 _ _ _  l276 _ _ _  l277 _ _ _  l278 _ _ _  l279 _ _ _
+     l280 _ _ _  l281 _ _ _  l282 _ _ _  l283 _ _ _  l284 _ _ _  l285 _ _ _  l286 _ _ _  l287 _ _ _
+     l288 _ _ _  l289 _ _ _  l290 _ _ _  l291 _ _ _  l292 _ _ _  l293 _ _ _  l294 _ _ _  l295 _ _ _
+     l296 _ _ _  l297 _ _ _  l298 _ _ _  l299 _ _ _  l300 _ _ _  l301 _ _ _  l302 _ _ _  l303 _ _ _
+     l304 _ _ _  l305 _ _ _  l306 _ _ _  l307 _ _ _  l308 _ _ _  l309 _ _ _  l310 _ _ _  l311 _ _ _
+     l312 _ _ _  l313 _ _ _  l314 _ _ _  l315 _ _ _  l316 _ _ _  l317 _ _ _  l318 _ _ _  l319 _ _ _
+     l320 _ _ _  l321 _ _ _  l322 _ _ _  l323 _ _ _  l324 _ _ _  l325 _ _ _  l326 _ _ _  l327 _ _ _
+     l328 _ _ _  l329 _ _ _  l330 _ _ _  l331 _ _ _  l332 _ _ _  l333 _ _ _  l334 _ _ _  l335 _ _ _
+     l336 _ _ _  l337 _ _ _  l338 _ _ _  l339 _ _ _  l340 _ _ _  l341 _ _ _  l342 _ _ _  l343 _ _ _
+     l344 _ _ _  l345 _ _ _  l346 _ _ _  l347 _ _ _  l348 _ _ _  l349 _ _ _  l350 _ _ _  l351 _ _ _
+     l352 _ _ _  l353 _ _ _  l354 _ _ _  l355 _ _ _  l356 _ _ _  l357 _ _ _  l358 _ _ _  l359 _ _ _
+     l360 _ _ _  l361 _ _ _  l362 _ _ _  l363 _ _ _  l364 _ _ _  l365 _ _ _  l366 _ _ _  l367 _ _ _
+     l368 _ _ _  l369 _ _ _  l370 _ _ _  l371 _ _ _  l372 _ _ _  l373 _ _ _  l374 _ _ _  l375 _ _ _
+     l376 _ _ _  l377 _ _ _  l378 _ _ _  l379 _ _ _  l380 _ _ _  l381 _ _ _  l382 _ _ _  l383 _ _ _
+     l384 _ _ _  l385 _ _ _  l386 _ _ _  l387 _ _ _  l388 _ _ _  l389 _ _ _  l390 _ _ _  l391 _ _ _
+     l392 _ _ _  l393 _ _ _  l394 _ _ _  l395 _ _ _  l396 _ _ _  l397 _ _ _  l398 _ _ _  l399 _ _ _
+     l400 _ _ _  l401 _ _ _  l402 _ _ _  l403 _ _ _  l404 _ _ _  l405 _ _ _  l406 _ _ _  l407 _ _ _
+     l408 _ _ _  l409 _ _ _  l410 _ _ _  l411 _ _ _  l412 _ _ _  l413 _ _ _  l414 _ _ _  l415 _ _ _
+     l416 _ _ _  l417 _ _ _  l418 _ _ _  l419 _ _ _  l420 _ _ _  l421 _ _ _  l422 _ _ _  l423 _ _ _
+     l424 _ _ _  l425 _ _ _  l426 _ _ _  l427 _ _ _  l428 _ _ _  l429 _ _ _  l430 _ _ _  l431 _ _ _
+     l432 _ _ _  l433 _ _ _  l434 _ _ _  l435 _ _ _  l436 _ _ _  l437 _ _ _  l438 _ _ _  l439 _ _ _
+     l440 _ _ _  l441 _ _ _  l442 _ _ _  l443 _ _ _  l444 _ _ _  l445 _ _ _  l446 _ _ _  l447 _ _ _
+     l448 _ _ _  l449 _ _ _  l450 _ _ _  l451 _ _ _  l452 _ _ _  l453 _ _ _  l454 _ _ _  l455 _ _ _
+     l456 _ _ _  l457 _ _ _  l458 _ _ _  l459 _ _ _  l460 _ _ _  l461 _ _ _  l462 _ _ _  l463 _ _ _
+     l464 _ _ _  l465 _ _ _  l466 _ _ _  l467 _ _ _  l468 _ _ _  l469 _ _ _  l470 _ _ _  l471 _ _ _
+     l472 _ _ _  l473 _ _ _  l474 _ _ _  l475 _ _ _  l476 _ _ _  l477 _ _ _  l478 _ _ _  l479 _ _ _
+     l480 _ _ _  l481 _ _ _  l482 _ _ _  l483 _ _ _  l484 _ _ _  l485 _ _ _  l486 _ _ _  l487 _ _ _
+     l488 _ _ _  l489 _ _ _  l490 _ _ _  l491 _ _ _  l492 _ _ _  l493 _ _ _  l494 _ _ _  l495 _ _ _
+     l496 _ _ _  l497 _ _ _  l498 _ _ _  l499 _ _ _  l500 _ _ _  l501 _ _ _  l502 _ _ _  l503 _ _ _
+     l504 _ _ _  l505 _ _ _  l506 _ _ _  l507 _ _ _  l508 _ _ _  l509 _ _ _  l510 _ _ _  l511 _ _ _
+     l512 _ _ _  l513 _ _ _  l514 _ _ _  l515 _ _ _  l516 _ _ _  l517 _ _ _  l518 _ _ _  l519 _ _ _
+     l520 _ _ _  l521 _ _ _  l522 _ _ _  l523 _ _ _  l524 _ _ _  l525 _ _ _  l526 _ _ _  l527 _ _ _
+     l528 _ _ _  l529 _ _ _  l530 _ _ _  l531 _ _ _  l532 _ _ _  l533 _ _ _  l534 _ _ _  l535 _ _ _
+     l536 _ _ _  l537 _ _ _  l538 _ _ _  l539 _ _ _  l540 _ _ _  l541 _ _ _  l542 _ _ _  l543 _ _ _
+     l544 _ _ _  l545 _ _ _  l546 _ _ _  l547 _ _ _  l548 _ _ _  l549 _ _ _  l550 _ _ _  l551 _ _ _
+     l552 _ _ _  l553 _ _ _  l554 _ _ _  l555 _ _ _  l556 _ _ _  l557 _ _ _  l558 _ _ _  l559 _ _ _
+     l560 _ _ _  l561 _ _ _  l562 _ _ _  l563 _ _ _  l564 _ _ _  l565 _ _ _  l566 _ _ _  l567 _ _ _
+     l568 _ _ _  l569 _ _ _  l570 _ _ _  l571 _ _ _  l572 _ _ _  l573 _ _ _  l574 _ _ _  l575 _ _ _
+     l576 _ _ _  l577 _ _ _  l578 _ _ _  l579 _ _ _  l580 _ _ _  l581 _ _ _  l582 _ _ _  l583 _ _ _
+     l584 _ _ _  l585 _ _ _  l586 _ _ _  l587 _ _ _  l588 _ _ _  l589 _ _ _  l590 _ _ _  l591 _ _ _
+     l592 _ _ _  l593 _ _ _  l594 _ _ _  l595 _ _ _  l596 _ _ _  l597 _ _ _  l598 _ _ _  l599 _ _ _
+     l600 _ _ _  l601 _ _ _  l602 _ _ _  l603 _ _ _  l604 _ _ _  l605 _ _ _  l606 _ _ _  l607 _ _ _
+     l608 _ _ _  l609 _ _ _  l610 _ _ _  l611 _ _ _  l612 _ _ _  l613 _ _ _  l614 _ _ _  l615 _ _ _
+     l616 _ _ _  l617 _ _ _  l618 _ _ _  l619 _ _ _  l620 _ _ _  l621 _ _ _  l622 _ _ _  l623 _ _ _
+     l624 _ _ _  l625 _ _ _  l626 _ _ _  l627 _ _ _  l628 _ _ _  l629 _ _ _  l630 _ _ _  l631 _ _ _
+     l632 _ _ _  l633 _ _ _  l634 _ _ _  l635 _ _ _  l636 _ _ _  l637 _ _ _  l638 _ _ _  l639 _ _ _
+     l640 _ _ _  l641 _ _ _  l642 _ _ _  l643 _ _ _  l644 _ _ _  l645 _ _ _  l646 _ _ _  l647 _ _ _
+     l648 _ _ _  l649 _ _ _  l650 _ _ _  l651 _ _ _  l652 _ _ _  l653 _ _ _  l654 _ _ _  l655 _ _ _
+     l656 _ _ _  l657 _ _ _  l658 _ _ _  l659 _ _ _  l660 _ _ _  l661 _ _ _  l662 _ _ _  l663 _ _ _
+     l664 _ _ _  l665 _ _ _  l666 _ _ _  l667 _ _ _  l668 _ _ _  l669 _ _ _  l670 _ _ _  l671 _ _ _
+     l672 _ _ _  l673 _ _ _  l674 _ _ _  l675 _ _ _  l676 _ _ _  l677 _ _ _  l678 _ _ _  l679 _ _ _
+     l680 _ _ _  l681 _ _ _  l682 _ _ _  l683 _ _ _  l684 _ _ _  l685 _ _ _  l686 _ _ _  l687 _ _ _
+     l688 _ _ _  l689 _ _ _  l690 _ _ _  l691 _ _ _  l692 _ _ _  l693 _ _ _  l694 _ _ _  l695 _ _ _
+     l696 _ _ _  l697 _ _ _  l698 _ _ _  l699 _ _ _  l700 _ _ _  l701 _ _ _  l702 _ _ _  l703 _ _ _
+     l704 _ _ _  l705 _ _ _  l706 _ _ _  l707 _ _ _  l708 _ _ _  l709 _ _ _  l710 _ _ _  l711 _ _ _
+     l712 _ _ _  l713 _ _ _  l714 _ _ _  l715 _ _ _  l716 _ _ _  l717 _ _ _  l718 _ _ _  l719 _ _ _
+     l720 _ _ _  l721 _ _ _  l722 _ _ _  l723 _ _ _  l724 _ _ _  l725 _ _ _  l726 _ _ _  l727 _ _ _
+     l728 _ _ _  l729 _ _ _  l730 _ _ _  l731 _ _ _  l732 _ _ _  l733 _ _ _  l734 _ _ _  l735 _ _ _
+     l736 _ _ _  l737 _ _ _  l738 _ _ _  l739 _ _ _  l740 _ _ _  l741 _ _ _  l742 _ _ _  l743 _ _ _
+     l744 _ _ _  l745 _ _ _  l746 _ _ _  l747 _ _ _  l748 _ _ _  l749 _ _ _  l750 _ _ _  l751 _ _ _
+     l752 _ _ _  l753 _ _ _  l754 _ _ _  l755 _ _ _  l756 _ _ _  l757 _ _ _  l758 _ _ _  l759 _ _ _
+     l760 _ _ _  l761 _ _ _  l762 _ _ _  l763 _ _ _  l764 _ _ _  l765 _ _ _  l766 _ _ _  l767 _ _ _
+     l768 _ _ _  l769 _ _ _  l770 _ _ _  l771 _ _ _  l772 _ _ _  l773 _ _ _  l774 _ _ _  l775 _ _ _
+     l776 _ _ _  l777 _ _ _  l778 _ _ _  l779 _ _ _  l780 _ _ _  l781 _ _ _  l782 _ _ _  l783 _ _ _
+     l784 _ _ _  l785 _ _ _  l786 _ _ _  l787 _ _ _  l788 _ _ _  l789 _ _ _  l790 _ _ _  l791 _ _ _
+     l792 _ _ _  l793 _ _ _  l794 _ _ _  l795 _ _ _  l796 _ _ _  l797 _ _ _  l798 _ _ _  l799 _ _ _
+     l800 _ _ _  l801 _ _ _  l802 _ _ _  l803 _ _ _  l804 _ _ _  l805 _ _ _  l806 _ _ _  l807 _ _ _
+     l808 _ _ _  l809 _ _ _  l810 _ _ _  l811 _ _ _  l812 _ _ _  l813 _ _ _  l814 _ _ _  l815 _ _ _
+     l816 _ _ _  l817 _ _ _  l818 _ _ _  l819 _ _ _  l820 _ _ _  l821 _ _ _  l822 _ _ _  l823 _ _ _
+     l824 _ _ _  l825 _ _ _  l826 _ _ _  l827 _ _ _  l828 _ _ _  l829 _ _ _  l830 _ _ _  l831 _ _ _
+     l832 _ _ _  l833 _ _ _  l834 _ _ _  l835 _ _ _  l836 _ _ _  l837 _ _ _  l838 _ _ _  l839 _ _ _
+     l840 _ _ _  l841 _ _ _  l842 _ _ _  l843 _ _ _  l844 _ _ _  l845 _ _ _  l846 _ _ _  l847 _ _ _
+     l848 _ _ _  l849 _ _ _  l850 _ _ _  l851 _ _ _  l852 _ _ _  l853 _ _ _  l854 _ _ _  l855 _ _ _
+     l856 _ _ _  l857 _ _ _  l858 _ _ _  l859 _ _ _  l860 _ _ _  l861 _ _ _  l862 _ _ _  l863 _ _ _
+     l864 _ _ _  l865 _ _ _  l866 _ _ _  l867 _ _ _  l868 _ _ _  l869 _ _ _  l870 _ _ _  l871 _ _ _
+     l872 _ _ _  l873 _ _ _  l874 _ _ _  l875 _ _ _  l876 _ _ _  l877 _ _ _  l878 _ _ _  l879 _ _ _
+     l880 _ _ _  l881 _ _ _  l882 _ _ _  l883 _ _ _  l884 _ _ _  l885 _ _ _  l886 _ _ _  l887 _ _ _
+     l888 _ _ _  l889 _ _ _  l890 _ _ _  l891 _ _ _  l892 _ _ _  l893 _ _ _  l894 _ _ _  l895 _ _ _
+     l896 _ _ _  l897 _ _ _  l898 _ _ _  l899 _ _ _  l900 _ _ _  l901 _ _ _  l902 _ _ _  l903 _ _ _
+     l904 _ _ _  l905 _ _ _  l906 _ _ _  l907 _ _ _  l908 _ _ _  l909 _ _ _  l910 _ _ _  l911 _ _ _
+     l912 _ _ _  l913 _ _ _  l914 _ _ _  l915 _ _ _  l916 _ _ _  l917 _ _ _  l918 _ _ _  l919 _ _ _
+     l920 _ _ _  l921 _ _ _  l922 _ _ _  l923 _ _ _  l924 _ _ _  l925 _ _ _  l926 _ _ _  l927 _ _ _
+     l928 _ _ _  l929 _ _ _  l930 _ _ _  l931 _ _ _  l932 _ _ _  l933 _ _ _  l934 _ _ _  l935 _ _ _
+     l936 _ _ _  l937 _ _ _  l938 _ _ _  l939 _ _ _  l940 _ _ _  l941 _ _ _  l942 _ _ _  l943 _ _ _
+     l944 _ _ _  l945 _ _ _  l946 _ _ _  l947 _ _ _  l948 _ _ _  l949 _ _ _  l950 _ _ _  l951 _ _ _
+     l952 _ _ _  l953 _ _ _  l954 _ _ _  l955 _ _ _  l956 _ _ _  l957 _ _ _  l958 _ _ _  l959 _ _ _
+     l960 _ _ _  l961 _ _ _  l962 _ _ _  l963 _ _ _  l964 _ _ _  l965 _ _ _  l966 _ _ _  l967 _ _ _
+     l968 _ _ _  l969 _ _ _  l970 _ _ _  l971 _ _ _  l972 _ _ _  l973 _ _ _  l974 _ _ _  l975 _ _ _
+     l976 _ _ _  l977 _ _ _  l978 _ _ _  l979 _ _ _  l980 _ _ _  l981 _ _ _  l982 _ _ _  l983 _ _ _
+     l984 _ _ _  l985 _ _ _  l986 _ _ _  l987 _ _ _  l988 _ _ _  l989 _ _ _  l990 _ _ _  l991 _ _ _
+     l992 _ _ _  l993 _ _ _  l994 _ _ _  l995 _ _ _  l996 _ _ _  l997 _ _ _  l998 _ _ _  l999 _ _ _
+    l1000 _ _ _ l1001 _ _ _ l1002 _ _ _ l1003 _ _ _ l1004 _ _ _ l1005 _ _ _ l1006 _ _ _ l1007 _ _ _
+    l1008 _ _ _ l1009 _ _ _ l1010 _ _ _ l1011 _ _ _ l1012 _ _ _ l1013 _ _ _ l1014 _ _ _ l1015 _ _ _
+    l1016 _ _ _ l1017 _ _ _ l1018 _ _ _ l1019 _ _ _ l1020 _ _ _ l1021 _ _ _ l1022 _ _ _ l1023 _ _ _
+    l1024 _ _ _ l1025 _ _ _ l1026 _ _ _ l1027 _ _ _ l1028 _ _ _ l1029 _ _ _ l1030 _ _ _ l1031 _ _ _
+    l1032 _ _ _ l1033 _ _ _ l1034 _ _ _ l1035 _ _ _ l1036 _ _ _ l1037 _ _ _ l1038 _ _ _ l1039 _ _ _
+    l1040 _ _ _ l1041 _ _ _ l1042 _ _ _ l1043 _ _ _ l1044 _ _ _ l1045 _ _ _ l1046 _ _ _ l1047 _ _ _
+    l1048 _ _ _ l1049 _ _ _ l1050 _ _ _ l1051 _ _ _ l1052 _ _ _ l1053 _ _ _ l1054 _ _ _ l1055 _ _ _
+    l1056 _ _ _ l1057 _ _ _ l1058 _ _ _ l1059 _ _ _ l1060 _ _ _ l1061 _ _ _ l1062 _ _ _ l1063 _ _ _
+    l1064 _ _ _ l1065 _ _ _ l1066 _ _ _ l1067 _ _ _ l1068 _ _ _ l1069 _ _ _ l1070 _ _ _ l1071 _ _ _
+    l1072 _ _ _ l1073 _ _ _ l1074 _ _ _ l1075 _ _ _ l1076 _ _ _ l1077 _ _ _ l1078 _ _ _ l1079 _ _ _
+    l1080 _ _ _ l1081 _ _ _ l1082 _ _ _ l1083 _ _ _ l1084 _ _ _ l1085 _ _ _ l1086 _ _ _ l1087 _ _ _
+    l1088 _ _ _ l1089 _ _ _ l1090 _ _ _ l1091 _ _ _ l1092 _ _ _ l1093 _ _ _ l1094 _ _ _ l1095 _ _ _
+    l1096 _ _ _ l1097 _ _ _ l1098 _ _ _ l1099 _ _ _ l1100 _ _ _ l1101 _ _ _ l1102 _ _ _ l1103 _ _ _
+    l1104 _ _ _ l1105 _ _ _ l1106 _ _ _ l1107 _ _ _ l1108 _ _ _ l1109 _ _ _ l1110 _ _ _ l1111 _ _ _
+    l1112 _ _ _ l1113 _ _ _ l1114 _ _ _ l1115 _ _ _ l1116 _ _ _ l1117 _ _ _ l1118 _ _ _ l1119 _ _ _
+    l1120 _ _ _ l1121 _ _ _ l1122 _ _ _ l1123 _ _ _ l1124 _ _ _ l1125 _ _ _ l1126 _ _ _ l1127 _ _ _
+    l1128 _ _ _ l1129 _ _ _ l1130 _ _ _ l1131 _ _ _ l1132 _ _ _ l1133 _ _ _ l1134 _ _ _ l1135 _ _ _
+    l1136 _ _ _ l1137 _ _ _ l1138 _ _ _ l1139 _ _ _ l1140 _ _ _ l1141 _ _ _ l1142 _ _ _ l1143 _ _ _
+    l1144 _ _ _ l1145 _ _ _ l1146 _ _ _ l1147 _ _ _ l1148 _ _ _ l1149 _ _ _ l1150 _ _ _ l1151 _ _ _
+    l1152 _ _ _ l1153 _ _ _ l1154 _ _ _ l1155 _ _ _ l1156 _ _ _ l1157 _ _ _ l1158 _ _ _ l1159 _ _ _
+    l1160 _ _ _ l1161 _ _ _ l1162 _ _ _ l1163 _ _ _ l1164 _ _ _ l1165 _ _ _ l1166 _ _ _ l1167 _ _ _
+    l1168 _ _ _ l1169 _ _ _ l1170 _ _ _ l1171 _ _ _ l1172 _ _ _ l1173 _ _ _ l1174 _ _ _ l1175 _ _ _
+    l1176 _ _ _ l1177 _ _ _ l1178 _ _ _ l1179 _ _ _ l1180 _ _ _ l1181 _ _ _ l1182 _ _ _ l1183 _ _ _
+    l1184 _ _ _ l1185 _ _ _ l1186 _ _ _ l1187 _ _ _ l1188 _ _ _ l1189 _ _ _ l1190 _ _ _ l1191 _ _ _
+    l1192 _ _ _ l1193 _ _ _ l1194 _ _ _ l1195 _ _ _ l1196 _ _ _ l1197 _ _ _ l1198 _ _ _ l1199 _ _ _
+    l1200 _ _ _ l1201 _ _ _ l1202 _ _ _ l1203 _ _ _ l1204 _ _ _ l1205 _ _ _ l1206 _ _ _ l1207 _ _ _
+    l1208 _ _ _ l1209 _ _ _ l1210 _ _ _ l1211 _ _ _ l1212 _ _ _ l1213 _ _ _ l1214 _ _ _ l1215 _ _ _
+    l1216 _ _ _ l1217 _ _ _ l1218 _ _ _ l1219 _ _ _ l1220 _ _ _ l1221 _ _ _ l1222 _ _ _ l1223 _ _ _
+    l1224 _ _ _ l1225 _ _ _ l1226 _ _ _ l1227 _ _ _ l1228 _ _ _ l1229 _ _ _ l1230 _ _ _ l1231 _ _ _
+    l1232 _ _ _ l1233 _ _ _ l1234 _ _ _ l1235 _ _ _ l1236 _ _ _ l1237 _ _ _ l1238 _ _ _ l1239 _ _ _
+    l1240 _ _ _ l1241 _ _ _ l1242 _ _ _ l1243 _ _ _ l1244 _ _ _ l1245 _ _ _ l1246 _ _ _ l1247 _ _ _
+    l1248 _ _ _ l1249 _ _ _ l1250 _ _ _ l1251 _ _ _ l1252 _ _ _ l1253 _ _ _ l1254 _ _ _ l1255 _ _ _
+    l1256 _ _ _ l1257 _ _ _ l1258 _ _ _ l1259 _ _ _ l1260 _ _ _ l1261 _ _ _ l1262 _ _ _ l1263 _ _ _
+    l1264 _ _ _ l1265 _ _ _ l1266 _ _ _ l1267 _ _ _ l1268 _ _ _ l1269 _ _ _ l1270 _ _ _ l1271 _ _ _
+    l1272 _ _ _ l1273 _ _ _ l1274 _ _ _ l1275 _ _ _ l1276 _ _ _ l1277 _ _ _ l1278 _ _ _ l1279 _ _ _
+    l1280 _ _ _ l1281 _ _ _ l1282 _ _ _ l1283 _ _ _ l1284 _ _ _ l1285 _ _ _ l1286 _ _ _ l1287 _ _ _
+    l1288 _ _ _ l1289 _ _ _ l1290 _ _ _ l1291 _ _ _ l1292 _ _ _ l1293 _ _ _ l1294 _ _ _ l1295 _ _ _
+    l1296 _ _ _ l1297 _ _ _ l1298 _ _ _ l1299 _ _ _ l1300 _ _ _ l1301 _ _ _ l1302 _ _ _ l1303 _ _ _
+    l1304 _ _ _ l1305 _ _ _ l1306 _ _ _ l1307 _ _ _ l1308 _ _ _ l1309 _ _ _ l1310 _ _ _ l1311 _ _ _
+    l1312 _ _ _ l1313 _ _ _ l1314 _ _ _ l1315 _ _ _ l1316 _ _ _ l1317 _ _ _ l1318 _ _ _ l1319 _ _ _
+    l1320 _ _ _ l1321 _ _ _ l1322 _ _ _ l1323 _ _ _ l1324 _ _ _ l1325 _ _ _ l1326 _ _ _ l1327 _ _ _
+    l1328 _ _ _ l1329 _ _ _ l1330 _ _ _ l1331 _ _ _ l1332 _ _ _ l1333 _ _ _ l1334 _ _ _ l1335 _ _ _
+    l1336 _ _ _ l1337 _ _ _ l1338 _ _ _ l1339 _ _ _ l1340 _ _ _ l1341 _ _ _ l1342 _ _ _ l1343 _ _ _
+    l1344 _ _ _ l1345 _ _ _ l1346 _ _ _ l1347 _ _ _ l1348 _ _ _ l1349 _ _ _ l1350 _ _ _ l1351 _ _ _
+    l1352 _ _ _ l1353 _ _ _ l1354 _ _ _ l1355 _ _ _ l1356 _ _ _ l1357 _ _ _ l1358 _ _ _ l1359 _ _ _
+    l1360 _ _ _ l1361 _ _ _ l1362 _ _ _ l1363 _ _ _ l1364 _ _ _ l1365 _ _ _ l1366 _ _ _ l1367 _ _ _
+    l1368 _ _ _ l1369 _ _ _ l1370 _ _ _ l1371 _ _ _ l1372 _ _ _ l1373 _ _ _ l1374 _ _ _ l1375 _ _ _
+    l1376 _ _ _ l1377 _ _ _ l1378 _ _ _ l1379 _ _ _ l1380 _ _ _ l1381 _ _ _ l1382 _ _ _ l1383 _ _ _
+    l1384 _ _ _ l1385 _ _ _ l1386 _ _ _ l1387 _ _ _ l1388 _ _ _ l1389 _ _ _ l1390 _ _ _ l1391 _ _ _
+    l1392 _ _ _ l1393 _ _ _ l1394 _ _ _ l1395 _ _ _ l1396 _ _ _ l1397 _ _ _ l1398 _ _ _ l1399 _ _ _
+    l1400 _ _ _ l1401 _ _ _ l1402 _ _ _ l1403 _ _ _ l1404 _ _ _ l1405 _ _ _ l1406 _ _ _ l1407 _ _ _
+    l1408 _ _ _ l1409 _ _ _ l1410 _ _ _ l1411 _ _ _ l1412 _ _ _ l1413 _ _ _ l1414 _ _ _ l1415 _ _ _
+    l1416 _ _ _ l1417 _ _ _ l1418 _ _ _ l1419 _ _ _ l1420 _ _ _ l1421 _ _ _ l1422 _ _ _ l1423 _ _ _
+    l1424 _ _ _ l1425 _ _ _ l1426 _ _ _ l1427 _ _ _ l1428 _ _ _ l1429 _ _ _ l1430 _ _ _ l1431 _ _ _
+    l1432 _ _ _ l1433 _ _ _ l1434 _ _ _ l1435 _ _ _ l1436 _ _ _ l1437 _ _ _ l1438 _ _ _ l1439 _ _ _
+    l1440 _ _ _ l1441 _ _ _ l1442 _ _ _ l1443 _ _ _ l1444 _ _ _ l1445 _ _ _ l1446 _ _ _ l1447 _ _ _
+    l1448 _ _ _ l1449 _ _ _ l1450 _ _ _ l1451 _ _ _ l1452 _ _ _ l1453 _ _ _ l1454 _ _ _ l1455 _ _ _
+    l1456 _ _ _ l1457 _ _ _ l1458 _ _ _ l1459 _ _ _ l1460 _ _ _ l1461 _ _ _ l1462 _ _ _ l1463 _ _ _
+    l1464 _ _ _ l1465 _ _ _ l1466 _ _ _ l1467 _ _ _ l1468 _ _ _ l1469 _ _ _ l1470 _ _ _ l1471 _ _ _
+    l1472 _ _ _ l1473 _ _ _ l1474 _ _ _ l1475 _ _ _ l1476 _ _ _ l1477 _ _ _ l1478 _ _ _ l1479 _ _ _
+    l1480 _ _ _ l1481 _ _ _ l1482 _ _ _ l1483 _ _ _ l1484 _ _ _ l1485 _ _ _ l1486 _ _ _ l1487 _ _ _
+    l1488 _ _ _ l1489 _ _ _ l1490 _ _ _ l1491 _ _ _ l1492 _ _ _ l1493 _ _ _ l1494 _ _ _ l1495 _ _ _
+    l1496 _ _ _ l1497 _ _ _ l1498 _ _ _ l1499 _ _ _ l1500 _ _ _ l1501 _ _ _ l1502 _ _ _ l1503 _ _ _
+    l1504 _ _ _ l1505 _ _ _ l1506 _ _ _ l1507 _ _ _ l1508 _ _ _ l1509 _ _ _ l1510 _ _ _ l1511 _ _ _
+    l1512 _ _ _ l1513 _ _ _ l1514 _ _ _ l1515 _ _ _ l1516 _ _ _ l1517 _ _ _ l1518 _ _ _ l1519 _ _ _
+    l1520 _ _ _ l1521 _ _ _ l1522 _ _ _ l1523 _ _ _ l1524 _ _ _ l1525 _ _ _ l1526 _ _ _ l1527 _ _ _
+    l1528 _ _ _ l1529 _ _ _ l1530 _ _ _ l1531 _ _ _ l1532 _ _ _ l1533 _ _ _ l1534 _ _ _ l1535 _ _ _
+    l1536 _ _ _ l1537 _ _ _ l1538 _ _ _ l1539 _ _ _ l1540 _ _ _ l1541 _ _ _ l1542 _ _ _ l1543 _ _ _
+    l1544 _ _ _ l1545 _ _ _ l1546 _ _ _ l1547 _ _ _ l1548 _ _ _ l1549 _ _ _ l1550 _ _ _ l1551 _ _ _
+    l1552 _ _ _ l1553 _ _ _ l1554 _ _ _ l1555 _ _ _ l1556 _ _ _ l1557 _ _ _ l1558 _ _ _ l1559 _ _ _
+    l1560 _ _ _ l1561 _ _ _ l1562 _ _ _ l1563 _ _ _ l1564 _ _ _ l1565 _ _ _ l1566 _ _ _ l1567 _ _ _
+    l1568 _ _ _ l1569 _ _ _ l1570 _ _ _ l1571 _ _ _ l1572 _ _ _ l1573 _ _ _ l1574 _ _ _ l1575 _ _ _
+    l1576 _ _ _ l1577 _ _ _ l1578 _ _ _ l1579 _ _ _ l1580 _ _ _ l1581 _ _ _ l1582 _ _ _ l1583 _ _ _
+    l1584 _ _ _ l1585 _ _ _ l1586 _ _ _ l1587 _ _ _ l1588 _ _ _ l1589 _ _ _ l1590 _ _ _ l1591 _ _ _
+    l1592 _ _ _ l1593 _ _ _ l1594 _ _ _ l1595 _ _ _ l1596 _ _ _ l1597 _ _ _ l1598 _ _ _ l1599 _ _ _
+    l1600 _ _ _ l1601 _ _ _ l1602 _ _ _ l1603 _ _ _ l1604 _ _ _ l1605 _ _ _ l1606 _ _ _ l1607 _ _ _
+    l1608 _ _ _ l1609 _ _ _ l1610 _ _ _ l1611 _ _ _ l1612 _ _ _ l1613 _ _ _ l1614 _ _ _ l1615 _ _ _
+    l1616 _ _ _ l1617 _ _ _ l1618 _ _ _ l1619 _ _ _ l1620 _ _ _ l1621 _ _ _ l1622 _ _ _ l1623 _ _ _
+    l1624 _ _ _ l1625 _ _ _ l1626 _ _ _ l1627 _ _ _ l1628 _ _ _ l1629 _ _ _ l1630 _ _ _ l1631 _ _ _
+    l1632 _ _ _ l1633 _ _ _ l1634 _ _ _ l1635 _ _ _ l1636 _ _ _ l1637 _ _ _ l1638 _ _ _ l1639 _ _ _
+    l1640 _ _ _ l1641 _ _ _ l1642 _ _ _ l1643 _ _ _ l1644 _ _ _ l1645 _ _ _ l1646 _ _ _ l1647 _ _ _
+    l1648 _ _ _ l1649 _ _ _ l1650 _ _ _ l1651 _ _ _ l1652 _ _ _ l1653 _ _ _ l1654 _ _ _ l1655 _ _ _
+    l1656 _ _ _ l1657 _ _ _ l1658 _ _ _ l1659 _ _ _ l1660 _ _ _ l1661 _ _ _ l1662 _ _ _ l1663 _ _ _
+    l1664 _ _ _ l1665 _ _ _ l1666 _ _ _ l1667 _ _ _ l1668 _ _ _ l1669 _ _ _ l1670 _ _ _ l1671 _ _ _
+    l1672 _ _ _ l1673 _ _ _ l1674 _ _ _ l1675 _ _ _ l1676 _ _ _ l1677 _ _ _ l1678 _ _ _ l1679 _ _ _
+    l1680 _ _ _ l1681 _ _ _ l1682 _ _ _ l1683 _ _ _ l1684 _ _ _ l1685 _ _ _ l1686 _ _ _ l1687 _ _ _
+    l1688 _ _ _ l1689 _ _ _ l1690 _ _ _ l1691 _ _ _ l1692 _ _ _ l1693 _ _ _ l1694 _ _ _ l1695 _ _ _
+    l1696 _ _ _ l1697 _ _ _ l1698 _ _ _ l1699 _ _ _ l1700 _ _ _ l1701 _ _ _ l1702 _ _ _ l1703 _ _ _
+    l1704 _ _ _ l1705 _ _ _ l1706 _ _ _ l1707 _ _ _ l1708 _ _ _ l1709 _ _ _ l1710 _ _ _ l1711 _ _ _
+    l1712 _ _ _ l1713 _ _ _ l1714 _ _ _ l1715 _ _ _ l1716 _ _ _ l1717 _ _ _ l1718 _ _ _ l1719 _ _ _
+    l1720 _ _ _ l1721 _ _ _ l1722 _ _ _ l1723 _ _ _ l1724 _ _ _ l1725 _ _ _ l1726 _ _ _ l1727 _ _ _
+    l1728 _ _ _ l1729 _ _ _ l1730 _ _ _ l1731 _ _ _ l1732 _ _ _ l1733 _ _ _ l1734 _ _ _ l1735 _ _ _
+    l1736 _ _ _ l1737 _ _ _ l1738 _ _ _ l1739 _ _ _ l1740 _ _ _ l1741 _ _ _ l1742 _ _ _ l1743 _ _ _
+    l1744 _ _ _ l1745 _ _ _ l1746 _ _ _ l1747 _ _ _ l1748 _ _ _ l1749 _ _ _ l1750 _ _ _ l1751 _ _ _
+    l1752 _ _ _ l1753 _ _ _ l1754 _ _ _ l1755 _ _ _ l1756 _ _ _ l1757 _ _ _ l1758 _ _ _ l1759 _ _ _
+    l1760 _ _ _ l1761 _ _ _ l1762 _ _ _ l1763 _ _ _ l1764 _ _ _ l1765 _ _ _ l1766 _ _ _ l1767 _ _ _
+    l1768 _ _ _ l1769 _ _ _ l1770 _ _ _ l1771 _ _ _ l1772 _ _ _ l1773 _ _ _ l1774 _ _ _ l1775 _ _ _
+    l1776 _ _ _ l1777 _ _ _ l1778 _ _ _ l1779 _ _ _ l1780 _ _ _ l1781 _ _ _ l1782 _ _ _ l1783 _ _ _
+    l1784 _ _ _ l1785 _ _ _ l1786 _ _ _ l1787 _ _ _ l1788 _ _ _ l1789 _ _ _ l1790 _ _ _ l1791 _ _ _
+    l1792 _ _ _ l1793 _ _ _ l1794 _ _ _ l1795 _ _ _ l1796 _ _ _ l1797 _ _ _ l1798 _ _ _ l1799 _ _ _
+    l1800 _ _ _ l1801 _ _ _ l1802 _ _ _ l1803 _ _ _ l1804 _ _ _ l1805 _ _ _ l1806 _ _ _ l1807 _ _ _
+    l1808 _ _ _ l1809 _ _ _ l1810 _ _ _ l1811 _ _ _ l1812 _ _ _ l1813 _ _ _ l1814 _ _ _ l1815 _ _ _
+    l1816 _ _ _ l1817 _ _ _ l1818 _ _ _ l1819 _ _ _ l1820 _ _ _ l1821 _ _ _ l1822 _ _ _ l1823 _ _ _
+    l1824 _ _ _ l1825 _ _ _ l1826 _ _ _ l1827 _ _ _ l1828 _ _ _ l1829 _ _ _ l1830 _ _ _ l1831 _ _ _
+    l1832 _ _ _ l1833 _ _ _ l1834 _ _ _ l1835 _ _ _ l1836 _ _ _ l1837 _ _ _ l1838 _ _ _ l1839 _ _ _
+    l1840 _ _ _ l1841 _ _ _ l1842 _ _ _ l1843 _ _ _ l1844 _ _ _ l1845 _ _ _ l1846 _ _ _ l1847 _ _ _
+    l1848 _ _ _ l1849 _ _ _ l1850 _ _ _ l1851 _ _ _ l1852 _ _ _ l1853 _ _ _ l1854 _ _ _ l1855 _ _ _
+    l1856 _ _ _ l1857 _ _ _ l1858 _ _ _ l1859 _ _ _ l1860 _ _ _ l1861 _ _ _ l1862 _ _ _ l1863 _ _ _
+    l1864 _ _ _ l1865 _ _ _ l1866 _ _ _ l1867 _ _ _ l1868 _ _ _ l1869 _ _ _ l1870 _ _ _ l1871 _ _ _
+    l1872 _ _ _ l1873 _ _ _ l1874 _ _ _ l1875 _ _ _ l1876 _ _ _ l1877 _ _ _ l1878 _ _ _ l1879 _ _ _
+    l1880 _ _ _ l1881 _ _ _ l1882 _ _ _ l1883 _ _ _ l1884 _ _ _ l1885 _ _ _ l1886 _ _ _ l1887 _ _ _
+    l1888 _ _ _ l1889 _ _ _ l1890 _ _ _ l1891 _ _ _ l1892 _ _ _ l1893 _ _ _ l1894 _ _ _ l1895 _ _ _
+    l1896 _ _ _ l1897 _ _ _ l1898 _ _ _ l1899 _ _ _ l1900 _ _ _ l1901 _ _ _ l1902 _ _ _ l1903 _ _ _
+    l1904 _ _ _ l1905 _ _ _ l1906 _ _ _ l1907 _ _ _ l1908 _ _ _ l1909 _ _ _ l1910 _ _ _ l1911 _ _ _
+    l1912 _ _ _ l1913 _ _ _ l1914 _ _ _ l1915 _ _ _ l1916 _ _ _ l1917 _ _ _ l1918 _ _ _ l1919 _ _ _
+    l1920 _ _ _ l1921 _ _ _ l1922 _ _ _ l1923 _ _ _ l1924 _ _ _ l1925 _ _ _ l1926 _ _ _ l1927 _ _ _
+    l1928 _ _ _ l1929 _ _ _ l1930 _ _ _ l1931 _ _ _ l1932 _ _ _ l1933 _ _ _ l1934 _ _ _ l1935 _ _ _
+    l1936 _ _ _ l1937 _ _ _ l1938 _ _ _ l1939 _ _ _ l1940 _ _ _ l1941 _ _ _ l1942 _ _ _ l1943 _ _ _
+    l1944 _ _ _ l1945 _ _ _ l1946 _ _ _ l1947 _ _ _ l1948 _ _ _ l1949 _ _ _ l1950 _ _ _ l1951 _ _ _
+    l1952 _ _ _ l1953 _ _ _ l1954 _ _ _ l1955 _ _ _ l1956 _ _ _ l1957 _ _ _ l1958 _ _ _ l1959 _ _ _
+    l1960 _ _ _ l1961 _ _ _ l1962 _ _ _ l1963 _ _ _ l1964 _ _ _ l1965 _ _ _ l1966 _ _ _ l1967 _ _ _
+    l1968 _ _ _ l1969 _ _ _ l1970 _ _ _ l1971 _ _ _ l1972 _ _ _ l1973 _ _ _ l1974 _ _ _ l1975 _ _ _
+    l1976 _ _ _ l1977 _ _ _ l1978 _ _ _ l1979 _ _ _ l1980 _ _ _ l1981 _ _ _ l1982 _ _ _ l1983 _ _ _
+    l1984 _ _ _ l1985 _ _ _ l1986 _ _ _ l1987 _ _ _ l1988 _ _ _ l1989 _ _ _ l1990 _ _ _ l1991 _ _ _
+    l1992 _ _ _ l1993 _ _ _ l1994 _ _ _ l1995 _ _ _ l1996 _ _ _ l1997 _ _ _ l1998 _ _ _ l1999 _ _ _
+    l2000 _ _ _ l2001 _ _ _ l2002 _ _ _ l2003 _ _ _ l2004 _ _ _ l2005 _ _ _ l2006 _ _ _ l2007 _ _ _
+    l2008 _ _ _ l2009 _ _ _ l2010 _ _ _ l2011 _ _ _ l2012 _ _ _ l2013 _ _ _ l2014 _ _ _ l2015 _ _ _
+    l2016 _ _ _ l2017 _ _ _ l2018 _ _ _ l2019 _ _ _ l2020 _ _ _ l2021 _ _ _ l2022 _ _ _ l2023 _ _ _
+    l2024 _ _ _ l2025 _ _ _ l2026 _ _ _ l2027 _ _ _ l2028 _ _ _ l2029 _ _ _ l2030 _ _ _ l2031 _ _ _
+    l2032 _ _ _ l2033 _ _ _ l2034 _ _ _ l2035 _ _ _ l2036 _ _ _ l2037 _ _ _ l2038 _ _ _ l2039 _ _ _
+    l2040 _ _ _ l2041 _ _ _ l2042 _ _ _ l2043 _ _ _ l2044 _ _ _ l2045 _ _ _ l2046 _ _ _ l2047 _ _ _
+    l2048 _ _ _ l2049 _ _ _ l2050 _ _ _ l2051 _ _ _ l2052 _ _ _ l2053 _ _ _ l2054 _ _ _ l2055 _ _ _
+    l2056 _ _ _ l2057 _ _ _ l2058 _ _ _ l2059 _ _ _ l2060 _ _ _ l2061 _ _ _ l2062 _ _ _ l2063 _ _ _
+    l2064 _ _ _ l2065 _ _ _ l2066 _ _ _ l2067 _ _ _ l2068 _ _ _ l2069 _ _ _ l2070 _ _ _ l2071 _ _ _
+    l2072 _ _ _ l2073 _ _ _ l2074 _ _ _ l2075 _ _ _ l2076 _ _ _ l2077 _ _ _ l2078 _ _ _ l2079 _ _ _
+    l2080 _ _ _ l2081 _ _ _ l2082 _ _ _ l2083 _ _ _ l2084 _ _ _ l2085 _ _ _ l2086 _ _ _ l2087 _ _ _
+    l2088 _ _ _ l2089 _ _ _ l2090 _ _ _ l2091 _ _ _ l2092 _ _ _ l2093 _ _ _ l2094 _ _ _ l2095 _ _ _
+    l2096 _ _ _ l2097 _ _ _ l2098 _ _ _ l2099 _ _ _ l2100 _ _ _ l2101 _ _ _ l2102 _ _ _ l2103 _ _ _
+    l2104 _ _ _ l2105 _ _ _ l2106 _ _ _ l2107 _ _ _ l2108 _ _ _ l2109 _ _ _ l2110 _ _ _ l2111 _ _ _
+    l2112 _ _ _ l2113 _ _ _ l2114 _ _ _ l2115 _ _ _ l2116 _ _ _ l2117 _ _ _ l2118 _ _ _ l2119 _ _ _
+    l2120 _ _ _ l2121 _ _ _ l2122 _ _ _ l2123 _ _ _ l2124 _ _ _ l2125 _ _ _ l2126 _ _ _ l2127 _ _ _
+    l2128 _ _ _ l2129 _ _ _ l2130 _ _ _ l2131 _ _ _ l2132 _ _ _ l2133 _ _ _ l2134 _ _ _ l2135 _ _ _
+    l2136 _ _ _ l2137 _ _ _ l2138 _ _ _ l2139 _ _ _ l2140 _ _ _ l2141 _ _ _ l2142 _ _ _ l2143 _ _ _
+    l2144 _ _ _ l2145 _ _ _ l2146 _ _ _ l2147 _ _ _ l2148 _ _ _ l2149 _ _ _ l2150 _ _ _ l2151 _ _ _
+    l2152 _ _ _ l2153 _ _ _ l2154 _ _ _ l2155 _ _ _ l2156 _ _ _ l2157 _ _ _ l2158 _ _ _ l2159 _ _ _
+    l2160 _ _ _ l2161 _ _ _ l2162 _ _ _ l2163 _ _ _ l2164 _ _ _ l2165 _ _ _ l2166 _ _ _ l2167 _ _ _
+    l2168 _ _ _ l2169 _ _ _ l2170 _ _ _ l2171 _ _ _ l2172 _ _ _ l2173 _ _ _ l2174 _ _ _ l2175 _ _ _
+    l2176 _ _ _ l2177 _ _ _ l2178 _ _ _ l2179 _ _ _ l2180 _ _ _ l2181 _ _ _ l2182 _ _ _ l2183 _ _ _
+    l2184 _ _ _ l2185 _ _ _ l2186 _ _ _ l2187 _ _ _ l2188 _ _ _ l2189 _ _ _ l2190 _ _ _ l2191 _ _ _
+    l2192 _ _ _ l2193 _ _ _ l2194 _ _ _ l2195 _ _ _ l2196 _ _ _ l2197 _ _ _ l2198 _ _ _ l2199 _ _ _
+    l2200 _ _ _ l2201 _ _ _ l2202 _ _ _ l2203 _ _ _ l2204 _ _ _ l2205 _ _ _ l2206 _ _ _ l2207 _ _ _
+    l2208 _ _ _ l2209 _ _ _ l2210 _ _ _ l2211 _ _ _ l2212 _ _ _ l2213 _ _ _ l2214 _ _ _ l2215 _ _ _
+    l2216 _ _ _ l2217 _ _ _ l2218 _ _ _ l2219 _ _ _ l2220 _ _ _ l2221 _ _ _ l2222 _ _ _ l2223 _ _ _
+    l2224 _ _ _ l2225 _ _ _ l2226 _ _ _ l2227 _ _ _ l2228 _ _ _ l2229 _ _ _ l2230 _ _ _ l2231 _ _ _
+    l2232 _ _ _ l2233 _ _ _ l2234 _ _ _ l2235 _ _ _ l2236 _ _ _ l2237 _ _ _ l2238 _ _ _ l2239 _ _ _
+    l2240 _ _ _ l2241 _ _ _ l2242 _ _ _ l2243 _ _ _ l2244 _ _ _ l2245 _ _ _ l2246 _ _ _ l2247 _ _ _
+    l2248 _ _ _ l2249 _ _ _ l2250 _ _ _ l2251 _ _ _ l2252 _ _ _ l2253 _ _ _ l2254 _ _ _ l2255 _ _ _
+    l2256 _ _ _ l2257 _ _ _ l2258 _ _ _ l2259 _ _ _ l2260 _ _ _ l2261 _ _ _ l2262 _ _ _ l2263 _ _ _
+    l2264 _ _ _ l2265 _ _ _ l2266 _ _ _ l2267 _ _ _ l2268 _ _ _ l2269 _ _ _ l2270 _ _ _ l2271 _ _ _
+    l2272 _ _ _ l2273 _ _ _ l2274 _ _ _ l2275 _ _ _ l2276 _ _ _ l2277 _ _ _ l2278 _ _ _ l2279 _ _ _
+    l2280 _ _ _ l2281 _ _ _ l2282 _ _ _ l2283 _ _ _ l2284 _ _ _ l2285 _ _ _ l2286 _ _ _ l2287 _ _ _
+    l2288 _ _ _ l2289 _ _ _ l2290 _ _ _ l2291 _ _ _ l2292 _ _ _ l2293 _ _ _ l2294 _ _ _ l2295 _ _ _
+    l2296 _ _ _ l2297 _ _ _ l2298 _ _ _ l2299 _ _ _ l2300 _ _ _ l2301 _ _ _ l2302 _ _ _ l2303 _ _ _
+    l2304 _ _ _ l2305 _ _ _ l2306 _ _ _ l2307 _ _ _ l2308 _ _ _ l2309 _ _ _ l2310 _ _ _ l2311 _ _ _
+    l2312 _ _ _ l2313 _ _ _ l2314 _ _ _ l2315 _ _ _ l2316 _ _ _ l2317 _ _ _ l2318 _ _ _ l2319 _ _ _
+    l2320 _ _ _ l2321 _ _ _ l2322 _ _ _ l2323 _ _ _ l2324 _ _ _ l2325 _ _ _ l2326 _ _ _ l2327 _ _ _
+    l2328 _ _ _ l2329 _ _ _ l2330 _ _ _ l2331 _ _ _ l2332 _ _ _ l2333 _ _ _ l2334 _ _ _ l2335 _ _ _
+    l2336 _ _ _ l2337 _ _ _ l2338 _ _ _ l2339 _ _ _ l2340 _ _ _ l2341 _ _ _ l2342 _ _ _ l2343 _ _ _
+    l2344 _ _ _ l2345 _ _ _ l2346 _ _ _ l2347 _ _ _ l2348 _ _ _ l2349 _ _ _ l2350 _ _ _ l2351 _ _ _
+    l2352 _ _ _ l2353 _ _ _ l2354 _ _ _ l2355 _ _ _ l2356 _ _ _ l2357 _ _ _ l2358 _ _ _ l2359 _ _ _
+    l2360 _ _ _ l2361 _ _ _ l2362 _ _ _ l2363 _ _ _ l2364 _ _ _ l2365 _ _ _ l2366 _ _ _ l2367 _ _ _
+    l2368 _ _ _ l2369 _ _ _ l2370 _ _ _ l2371 _ _ _ l2372 _ _ _ l2373 _ _ _ l2374 _ _ _ l2375 _ _ _
+    l2376 _ _ _ l2377 _ _ _ l2378 _ _ _ l2379 _ _ _ l2380 _ _ _ l2381 _ _ _ l2382 _ _ _ l2383 _ _ _
+    l2384 _ _ _ l2385 _ _ _ l2386 _ _ _ l2387 _ _ _ l2388 _ _ _ l2389 _ _ _ l2390 _ _ _ l2391 _ _ _
+    l2392 _ _ _ l2393 _ _ _ l2394 _ _ _ l2395 _ _ _ l2396 _ _ _ l2397 _ _ _ l2398 _ _ _ l2399 _ _ _
+    l2400 _ _ _ l2401 _ _ _ l2402 _ _ _ l2403 _ _ _ l2404 _ _ _ l2405 _ _ _ l2406 _ _ _ l2407 _ _ _
+    l2408 _ _ _ l2409 _ _ _ l2410 _ _ _ l2411 _ _ _ l2412 _ _ _ l2413 _ _ _ l2414 _ _ _ l2415 _ _ _
+    l2416 _ _ _ l2417 _ _ _ l2418 _ _ _ l2419 _ _ _ l2420 _ _ _ l2421 _ _ _ l2422 _ _ _ l2423 _ _ _
+    l2424 _ _ _ l2425 _ _ _ l2426 _ _ _ l2427 _ _ _ l2428 _ _ _ l2429 _ _ _ l2430 _ _ _ l2431 _ _ _
+    l2432 _ _ _ l2433 _ _ _ l2434 _ _ _ l2435 _ _ _ l2436 _ _ _ l2437 _ _ _ l2438 _ _ _ l2439 _ _ _
+    l2440 _ _ _ l2441 _ _ _ l2442 _ _ _ l2443 _ _ _ l2444 _ _ _ l2445 _ _ _ l2446 _ _ _ l2447 _ _ _
+    l2448 _ _ _ l2449 _ _ _ l2450 _ _ _ l2451 _ _ _ l2452 _ _ _ l2453 _ _ _ l2454 _ _ _ l2455 _ _ _
+    l2456 _ _ _ l2457 _ _ _ l2458 _ _ _ l2459 _ _ _ l2460 _ _ _ l2461 _ _ _ l2462 _ _ _ l2463 _ _ _
+    l2464 _ _ _ l2465 _ _ _ l2466 _ _ _ l2467 _ _ _ l2468 _ _ _ l2469 _ _ _ l2470 _ _ _ l2471 _ _ _
+    l2472 _ _ _ l2473 _ _ _ l2474 _ _ _ l2475 _ _ _ l2476 _ _ _ l2477 _ _ _ l2478 _ _ _ l2479 _ _ _
+    l2480 _ _ _ l2481 _ _ _ l2482 _ _ _ l2483 _ _ _ l2484 _ _ _ l2485 _ _ _ l2486 _ _ _ l2487 _ _ _
+    l2488 _ _ _ l2489 _ _ _ l2490 _ _ _ l2491 _ _ _ l2492 _ _ _ l2493 _ _ _ l2494 _ _ _ l2495 _ _ _
+    l2496 _ _ _ l2497 _ _ _ l2498 _ _ _ l2499 _ _ _ l2500 _ _ _ l2501 _ _ _ l2502 _ _ _ l2503 _ _ _
+    l2504 _ _ _ l2505 _ _ _ l2506 _ _ _ l2507 _ _ _ l2508 _ _ _ l2509 _ _ _ l2510 _ _ _ l2511 _ _ _
+    l2512 _ _ _ l2513 _ _ _ l2514 _ _ _ l2515 _ _ _ l2516 _ _ _ l2517 _ _ _ l2518 _ _ _ l2519 _ _ _
+    l2520 _ _ _ l2521 _ _ _ l2522 _ _ _ l2523 _ _ _ l2524 _ _ _ l2525 _ _ _ l2526 _ _ _ l2527 _ _ _
+    l2528 _ _ _ l2529 _ _ _ l2530 _ _ _ l2531 _ _ _ l2532 _ _ _ l2533 _ _ _ l2534 _ _ _ l2535 _ _ _
+    l2536 _ _ _ l2537 _ _ _ l2538 _ _ _ l2539 _ _ _ l2540 _ _ _ l2541 _ _ _ l2542 _ _ _ l2543 _ _ _
+    l2544 _ _ _ l2545 _ _ _ l2546 _ _ _ l2547 _ _ _ l2548 _ _ _ l2549 _ _ _ l2550 _ _ _ l2551 _ _ _
+    l2552 _ _ _ l2553 _ _ _ l2554 _ _ _ l2555 _ _ _ l2556 _ _ _ l2557 _ _ _ l2558 _ _ _ l2559 _ _ _
+    l2560 _ _ _ l2561 _ _ _ l2562 _ _ _ l2563 _ _ _ l2564 _ _ _ l2565 _ _ _ l2566 _ _ _ l2567 _ _ _
+    l2568 _ _ _ l2569 _ _ _ l2570 _ _ _ l2571 _ _ _ l2572 _ _ _ l2573 _ _ _ l2574 _ _ _ l2575 _ _ _
+    l2576 _ _ _ l2577 _ _ _ l2578 _ _ _ l2579 _ _ _ l2580 _ _ _ l2581 _ _ _ l2582 _ _ _ l2583 _ _ _
+    l2584 _ _ _ l2585 _ _ _ l2586 _ _ _ l2587 _ _ _ l2588 _ _ _ l2589 _ _ _ l2590 _ _ _ l2591 _ _ _
+    l2592 _ _ _ l2593 _ _ _ l2594 _ _ _ l2595 _ _ _ l2596 _ _ _ l2597 _ _ _ l2598 _ _ _ l2599 _ _ _
+    l2600 _ _ _ l2601 _ _ _ l2602 _ _ _ l2603 _ _ _ l2604 _ _ _ l2605 _ _ _ l2606 _ _ _ l2607 _ _ _
+    l2608 _ _ _ l2609 _ _ _ l2610 _ _ _ l2611 _ _ _ l2612 _ _ _ l2613 _ _ _ l2614 _ _ _ l2615 _ _ _
+    l2616 _ _ _ l2617 _ _ _ l2618 _ _ _ l2619 _ _ _ l2620 _ _ _ l2621 _ _ _ l2622 _ _ _ l2623 _ _ _
+    l2624 _ _ _ l2625 _ _ _ l2626 _ _ _ l2627 _ _ _ l2628 _ _ _ l2629 _ _ _ l2630 _ _ _ l2631 _ _ _
+    l2632 _ _ _ l2633 _ _ _ l2634 _ _ _ l2635 _ _ _ l2636 _ _ _ l2637 _ _ _ l2638 _ _ _ l2639 _ _ _
+    l2640 _ _ _ l2641 _ _ _ l2642 _ _ _ l2643 _ _ _ l2644 _ _ _ l2645 _ _ _ l2646 _ _ _ l2647 _ _ _
+    l2648 _ _ _ l2649 _ _ _ l2650 _ _ _ l2651 _ _ _ l2652 _ _ _ l2653 _ _ _ l2654 _ _ _ l2655 _ _ _
+    l2656 _ _ _ l2657 _ _ _ l2658 _ _ _ l2659 _ _ _ l2660 _ _ _ l2661 _ _ _ l2662 _ _ _ l2663 _ _ _
+    l2664 _ _ _ l2665 _ _ _ l2666 _ _ _ l2667 _ _ _ l2668 _ _ _ l2669 _ _ _ l2670 _ _ _ l2671 _ _ _
+    l2672 _ _ _ l2673 _ _ _ l2674 _ _ _ l2675 _ _ _ l2676 _ _ _ l2677 _ _ _ l2678 _ _ _ l2679 _ _ _
+    l2680 _ _ _ l2681 _ _ _ l2682 _ _ _ l2683 _ _ _ l2684 _ _ _ l2685 _ _ _ l2686 _ _ _ l2687 _ _ _
+    l2688 _ _ _ l2689 _ _ _ l2690 _ _ _ l2691 _ _ _ l2692 _ _ _ l2693 _ _ _ l2694 _ _ _ l2695 _ _ _
+    l2696 _ _ _ l2697 _ _ _ l2698 _ _ _ l2699 _ _ _ l2700 _ _ _ l2701 _ _ _ l2702 _ _ _ l2703 _ _ _
+    l2704 _ _ _ l2705 _ _ _ l2706 _ _ _ l2707 _ _ _ l2708 _ _ _ l2709 _ _ _ l2710 _ _ _ l2711 _ _ _
+    l2712 _ _ _ l2713 _ _ _ l2714 _ _ _ l2715 _ _ _ l2716 _ _ _ l2717 _ _ _ l2718 _ _ _ l2719 _ _ _
+    l2720 _ _ _ l2721 _ _ _ l2722 _ _ _ l2723 _ _ _ l2724 _ _ _ l2725 _ _ _ l2726 _ _ _ l2727 _ _ _
+    l2728 _ _ _ l2729 _ _ _ l2730 _ _ _ l2731 _ _ _ l2732 _ _ _ l2733 _ _ _ l2734 _ _ _ l2735 _ _ _
+    l2736 _ _ _ l2737 _ _ _ l2738 _ _ _ l2739 _ _ _ l2740 _ _ _ l2741 _ _ _ l2742 _ _ _ l2743 _ _ _
+    l2744 _ _ _ l2745 _ _ _ l2746 _ _ _ l2747 _ _ _ l2748 _ _ _ l2749 _ _ _ l2750 _ _ _ l2751 _ _ _
+    l2752 _ _ _ l2753 _ _ _ l2754 _ _ _ l2755 _ _ _ l2756 _ _ _ l2757 _ _ _ l2758 _ _ _ l2759 _ _ _
+    l2760 _ _ _ l2761 _ _ _ l2762 _ _ _ l2763 _ _ _ l2764 _ _ _ l2765 _ _ _ l2766 _ _ _ l2767 _ _ _
+    l2768 _ _ _ l2769 _ _ _ l2770 _ _ _ l2771 _ _ _ l2772 _ _ _ l2773 _ _ _ l2774 _ _ _ l2775 _ _ _
+    l2776 _ _ _ l2777 _ _ _ l2778 _ _ _ l2779 _ _ _ l2780 _ _ _ l2781 _ _ _ l2782 _ _ _ l2783 _ _ _
+    l2784 _ _ _ l2785 _ _ _ l2786 _ _ _ l2787 _ _ _ l2788 _ _ _ l2789 _ _ _ l2790 _ _ _ l2791 _ _ _
+    l2792 _ _ _ l2793 _ _ _ l2794 _ _ _ l2795 _ _ _ l2796 _ _ _ l2797 _ _ _ l2798 _ _ _ l2799 _ _ _
+    l2800 _ _ _ l2801 _ _ _ l2802 _ _ _ l2803 _ _ _ l2804 _ _ _ l2805 _ _ _ l2806 _ _ _ l2807 _ _ _
+    l2808 _ _ _ l2809 _ _ _ l2810 _ _ _ l2811 _ _ _ l2812 _ _ _ l2813 _ _ _ l2814 _ _ _ l2815 _ _ _
+    l2816 _ _ _ l2817 _ _ _ l2818 _ _ _ l2819 _ _ _ l2820 _ _ _ l2821 _ _ _ l2822 _ _ _ l2823 _ _ _
+    l2824 _ _ _ l2825 _ _ _ l2826 _ _ _ l2827 _ _ _ l2828 _ _ _ l2829 _ _ _ l2830 _ _ _ l2831 _ _ _
+    l2832 _ _ _ l2833 _ _ _ l2834 _ _ _ l2835 _ _ _ l2836 _ _ _ l2837 _ _ _ l2838 _ _ _ l2839 _ _ _
+    l2840 _ _ _ l2841 _ _ _ l2842 _ _ _ l2843 _ _ _ l2844 _ _ _ l2845 _ _ _ l2846 _ _ _ l2847 _ _ _
+    l2848 _ _ _ l2849 _ _ _ l2850 _ _ _ l2851 _ _ _ l2852 _ _ _ l2853 _ _ _ l2854 _ _ _ l2855 _ _ _
+    l2856 _ _ _ l2857 _ _ _ l2858 _ _ _ l2859 _ _ _ l2860 _ _ _ l2861 _ _ _ l2862 _ _ _ l2863 _ _ _
+    l2864 _ _ _ l2865 _ _ _ l2866 _ _ _ l2867 _ _ _ l2868 _ _ _ l2869 _ _ _ l2870 _ _ _ l2871 _ _ _
+    l2872 _ _ _ l2873 _ _ _ l2874 _ _ _ l2875 _ _ _ l2876 _ _ _ l2877 _ _ _ l2878 _ _ _ l2879 _ _ _
+    l2880 _ _ _ l2881 _ _ _ l2882 _ _ _ l2883 _ _ _ l2884 _ _ _ l2885 _ _ _ l2886 _ _ _ l2887 _ _ _
+    l2888 _ _ _ l2889 _ _ _ l2890 _ _ _ l2891 _ _ _ l2892 _ _ _ l2893 _ _ _ l2894 _ _ _ l2895 _ _ _
+    l2896 _ _ _ l2897 _ _ _ l2898 _ _ _ l2899 _ _ _ l2900 _ _ _ l2901 _ _ _ l2902 _ _ _ l2903 _ _ _
+    l2904 _ _ _ l2905 _ _ _ l2906 _ _ _ l2907 _ _ _ l2908 _ _ _ l2909 _ _ _ l2910 _ _ _ l2911 _ _ _
+    l2912 _ _ _ l2913 _ _ _ l2914 _ _ _ l2915 _ _ _ l2916 _ _ _ l2917 _ _ _ l2918 _ _ _ l2919 _ _ _
+    l2920 _ _ _ l2921 _ _ _ l2922 _ _ _ l2923 _ _ _ l2924 _ _ _ l2925 _ _ _ l2926 _ _ _ l2927 _ _ _
+    l2928 _ _ _ l2929 _ _ _ l2930 _ _ _ l2931 _ _ _ l2932 _ _ _ l2933 _ _ _ l2934 _ _ _ l2935 _ _ _
+    l2936 _ _ _ l2937 _ _ _ l2938 _ _ _ l2939 _ _ _ l2940 _ _ _ l2941 _ _ _ l2942 _ _ _ l2943 _ _ _
+    l2944 _ _ _ l2945 _ _ _ l2946 _ _ _ l2947 _ _ _ l2948 _ _ _ l2949 _ _ _ l2950 _ _ _ l2951 _ _ _
+    l2952 _ _ _ l2953 _ _ _ l2954 _ _ _ l2955 _ _ _ l2956 _ _ _ l2957 _ _ _ l2958 _ _ _ l2959 _ _ _
+    l2960 _ _ _ l2961 _ _ _ l2962 _ _ _ l2963 _ _ _ l2964 _ _ _ l2965 _ _ _ l2966 _ _ _ l2967 _ _ _
+    l2968 _ _ _ l2969 _ _ _ l2970 _ _ _ l2971 _ _ _ l2972 _ _ _ l2973 _ _ _ l2974 _ _ _ l2975 _ _ _
+    l2976 _ _ _ l2977 _ _ _ l2978 _ _ _ l2979 _ _ _ l2980 _ _ _ l2981 _ _ _ l2982 _ _ _ l2983 _ _ _
+    l2984 _ _ _ l2985 _ _ _ l2986 _ _ _ l2987 _ _ _ l2988 _ _ _ l2989 _ _ _ l2990 _ _ _ l2991 _ _ _
+    l2992 _ _ _ l2993 _ _ _ l2994 _ _ _ l2995 _ _ _ l2996 _ _ _ l2997 _ _ _ l2998 _ _ _ l2999 _ _ _
+    l3000 _ _ _ l3001 _ _ _ l3002 _ _ _ l3003 _ _ _ l3004 _ _ _ l3005 _ _ _ l3006 _ _ _ l3007 _ _ _
+    l3008 _ _ _ l3009 _ _ _ l3010 _ _ _ l3011 _ _ _ l3012 _ _ _ l3013 _ _ _ l3014 _ _ _ l3015 _ _ _
+    l3016 _ _ _ l3017 _ _ _ l3018 _ _ _ l3019 _ _ _ l3020 _ _ _ l3021 _ _ _ l3022 _ _ _ l3023 _ _ _
+    l3024 _ _ _ l3025 _ _ _ l3026 _ _ _ l3027 _ _ _ l3028 _ _ _ l3029 _ _ _ l3030 _ _ _ l3031 _ _ _
+    l3032 _ _ _ l3033 _ _ _ l3034 _ _ _ l3035 _ _ _ l3036 _ _ _ l3037 _ _ _ l3038 _ _ _ l3039 _ _ _
+    l3040 _ _ _ l3041 _ _ _ l3042 _ _ _ l3043 _ _ _ l3044 _ _ _ l3045 _ _ _ l3046 _ _ _ l3047 _ _ _
+    l3048 _ _ _ l3049 _ _ _ l3050 _ _ _ l3051 _ _ _ l3052 _ _ _ l3053 _ _ _ l3054 _ _ _ l3055 _ _ _
+    l3056 _ _ _ l3057 _ _ _ l3058 _ _ _ l3059 _ _ _ l3060 _ _ _ l3061 _ _ _ l3062 _ _ _ l3063 _ _ _
+    l3064 _ _ _ l3065 _ _ _ l3066 _ _ _ l3067 _ _ _ l3068 _ _ _ l3069 _ _ _ l3070 _ _ _ l3071 _ _ _
+    l3072 _ _ _ l3073 _ _ _ l3074 _ _ _ l3075 _ _ _ l3076 _ _ _ l3077 _ _ _ l3078 _ _ _ l3079 _ _ _
+    l3080 _ _ _ l3081 _ _ _ l3082 _ _ _ l3083 _ _ _ l3084 _ _ _ l3085 _ _ _ l3086 _ _ _ l3087 _ _ _
+    l3088 _ _ _ l3089 _ _ _ l3090 _ _ _ l3091 _ _ _ l3092 _ _ _ l3093 _ _ _ l3094 _ _ _ l3095 _ _ _
+    l3096 _ _ _ l3097 _ _ _ l3098 _ _ _ l3099 _ _ _ l3100 _ _ _ l3101 _ _ _ l3102 _ _ _ l3103 _ _ _
+    l3104 _ _ _ l3105 _ _ _ l3106 _ _ _ l3107 _ _ _ l3108 _ _ _ l3109 _ _ _ l3110 _ _ _ l3111 _ _ _
+    l3112 _ _ _ l3113 _ _ _ l3114 _ _ _ l3115 _ _ _ l3116 _ _ _ l3117 _ _ _ l3118 _ _ _ l3119 _ _ _
+    l3120 _ _ _ l3121 _ _ _ l3122 _ _ _ l3123 _ _ _ l3124 _ _ _ l3125 _ _ _ l3126 _ _ _ l3127 _ _ _
+    l3128 _ _ _ l3129 _ _ _ l3130 _ _ _ l3131 _ _ _ l3132 _ _ _ l3133 _ _ _ l3134 _ _ _ l3135 _ _ _
+    l3136 _ _ _ l3137 _ _ _ l3138 _ _ _ l3139 _ _ _ l3140 _ _ _ l3141 _ _ _ l3142 _ _ _ l3143 _ _ _
+    l3144 _ _ _ l3145 _ _ _ l3146 _ _ _ l3147 _ _ _ l3148 _ _ _ l3149 _ _ _ l3150 _ _ _ l3151 _ _ _
+    l3152 _ _ _ l3153 _ _ _ l3154 _ _ _ l3155 _ _ _ l3156 _ _ _ l3157 _ _ _ l3158 _ _ _ l3159 _ _ _
+    l3160 _ _ _ l3161 _ _ _ l3162 _ _ _ l3163 _ _ _ l3164 _ _ _ l3165 _ _ _ l3166 _ _ _ l3167 _ _ _
+    l3168 _ _ _ l3169 _ _ _ l3170 _ _ _ l3171 _ _ _ l3172 _ _ _ l3173 _ _ _ l3174 _ _ _ l3175 _ _ _
+    l3176 _ _ _ l3177 _ _ _ l3178 _ _ _ l3179 _ _ _ l3180 _ _ _ l3181 _ _ _ l3182 _ _ _ l3183 _ _ _
+    l3184 _ _ _ l3185 _ _ _ l3186 _ _ _ l3187 _ _ _ l3188 _ _ _ l3189 _ _ _ l3190 _ _ _ l3191 _ _ _
+    l3192 _ _ _ l3193 _ _ _ l3194 _ _ _ l3195 _ _ _ l3196 _ _ _ l3197 _ _ _ l3198 _ _ _ l3199 _ _ _
+    l3200 _ _ _ l3201 _ _ _ l3202 _ _ _ l3203 _ _ _ l3204 _ _ _ l3205 _ _ _ l3206 _ _ _ l3207 _ _ _
+    l3208 _ _ _ l3209 _ _ _ l3210 _ _ _ l3211 _ _ _ l3212 _ _ _ l3213 _ _ _ l3214 _ _ _ l3215 _ _ _
+    l3216 _ _ _ l3217 _ _ _ l3218 _ _ _ l3219 _ _ _ l3220 _ _ _ l3221 _ _ _ l3222 _ _ _ l3223 _ _ _
+    l3224 _ _ _ l3225 _ _ _ l3226 _ _ _ l3227 _ _ _ l3228 _ _ _ l3229 _ _ _ l3230 _ _ _ l3231 _ _ _
+    l3232 _ _ _ l3233 _ _ _ l3234 _ _ _ l3235 _ _ _ l3236 _ _ _ l3237 _ _ _ l3238 _ _ _ l3239 _ _ _
+    l3240 _ _ _ l3241 _ _ _ l3242 _ _ _ l3243 _ _ _ l3244 _ _ _ l3245 _ _ _ l3246 _ _ _ l3247 _ _ _
+    l3248 _ _ _ l3249 _ _ _ l3250 _ _ _ l3251 _ _ _ l3252 _ _ _ l3253 _ _ _ l3254 _ _ _ l3255 _ _ _
+    l3256 _ _ _ l3257 _ _ _ l3258 _ _ _ l3259 _ _ _ l3260 _ _ _ l3261 _ _ _ l3262 _ _ _ l3263 _ _ _
+    l3264 _ _ _ l3265 _ _ _ l3266 _ _ _ l3267 _ _ _ l3268 _ _ _ l3269 _ _ _ l3270 _ _ _ l3271 _ _ _
+    l3272 _ _ _ l3273 _ _ _ l3274 _ _ _ l3275 _ _ _ l3276 _ _ _ l3277 _ _ _ l3278 _ _ _ l3279 _ _ _
+    l3280 _ _ _ l3281 _ _ _ l3282 _ _ _ l3283 _ _ _ l3284 _ _ _ l3285 _ _ _ l3286 _ _ _ l3287 _ _ _
+    l3288 _ _ _ l3289 _ _ _ l3290 _ _ _ l3291 _ _ _ l3292 _ _ _ l3293 _ _ _ l3294 _ _ _ l3295 _ _ _
+    l3296 _ _ _ l3297 _ _ _ l3298 _ _ _ l3299 _ _ _ l3300 _ _ _ l3301 _ _ _ l3302 _ _ _ l3303 _ _ _
+    l3304 _ _ _ l3305 _ _ _ l3306 _ _ _ l3307 _ _ _ l3308 _ _ _ l3309 _ _ _ l3310 _ _ _ l3311 _ _ _
+    l3312 _ _ _ l3313 _ _ _ l3314 _ _ _ l3315 _ _ _ l3316 _ _ _ l3317 _ _ _ l3318 _ _ _ l3319 _ _ _
+    l3320 _ _ _ l3321 _ _ _ l3322 _ _ _ l3323 _ _ _ l3324 _ _ _ l3325 _ _ _ l3326 _ _ _ l3327 _ _ _
+    l3328 _ _ _ l3329 _ _ _ l3330 _ _ _ l3331 _ _ _ l3332 _ _ _ l3333 _ _ _ l3334 _ _ _ l3335 _ _ _
+    l3336 _ _ _ l3337 _ _ _ l3338 _ _ _ l3339 _ _ _ l3340 _ _ _ l3341 _ _ _ l3342 _ _ _ l3343 _ _ _
+    l3344 _ _ _ l3345 _ _ _ l3346 _ _ _ l3347 _ _ _ l3348 _ _ _ l3349 _ _ _ l3350 _ _ _ l3351 _ _ _
+    l3352 _ _ _ l3353 _ _ _ l3354 _ _ _ l3355 _ _ _ l3356 _ _ _ l3357 _ _ _ l3358 _ _ _ l3359 _ _ _
+    l3360 _ _ _ l3361 _ _ _ l3362 _ _ _ l3363 _ _ _ l3364 _ _ _ l3365 _ _ _ l3366 _ _ _ l3367 _ _ _
+    l3368 _ _ _ l3369 _ _ _ l3370 _ _ _ l3371 _ _ _ l3372 _ _ _ l3373 _ _ _ l3374 _ _ _ l3375 _ _ _
+    l3376 _ _ _ l3377 _ _ _ l3378 _ _ _ l3379 _ _ _ l3380 _ _ _ l3381 _ _ _ l3382 _ _ _ l3383 _ _ _
+    l3384 _ _ _ l3385 _ _ _ l3386 _ _ _ l3387 _ _ _ l3388 _ _ _ l3389 _ _ _ l3390 _ _ _ l3391 _ _ _
+    l3392 _ _ _ l3393 _ _ _ l3394 _ _ _ l3395 _ _ _ l3396 _ _ _ l3397 _ _ _ l3398 _ _ _ l3399 _ _ _
+    l3400 _ _ _ l3401 _ _ _ l3402 _ _ _ l3403 _ _ _ l3404 _ _ _ l3405 _ _ _ l3406 _ _ _ l3407 _ _ _
+    l3408 _ _ _ l3409 _ _ _ l3410 _ _ _ l3411 _ _ _ l3412 _ _ _ l3413 _ _ _ l3414 _ _ _ l3415 _ _ _
+    l3416 _ _ _ l3417 _ _ _ l3418 _ _ _ l3419 _ _ _ l3420 _ _ _ l3421 _ _ _ l3422 _ _ _ l3423 _ _ _
+    l3424 _ _ _ l3425 _ _ _ l3426 _ _ _ l3427 _ _ _ l3428 _ _ _ l3429 _ _ _ l3430 _ _ _ l3431 _ _ _
+    l3432 _ _ _ l3433 _ _ _ l3434 _ _ _ l3435 _ _ _ l3436 _ _ _ l3437 _ _ _ l3438 _ _ _ l3439 _ _ _
+    l3440 _ _ _ l3441 _ _ _ l3442 _ _ _ l3443 _ _ _ l3444 _ _ _ l3445 _ _ _ l3446 _ _ _ l3447 _ _ _
+    l3448 _ _ _ l3449 _ _ _ l3450 _ _ _ l3451 _ _ _ l3452 _ _ _ l3453 _ _ _ l3454 _ _ _ l3455 _ _ _
+    l3456 _ _ _ l3457 _ _ _ l3458 _ _ _ l3459 _ _ _ l3460 _ _ _ l3461 _ _ _ l3462 _ _ _ l3463 _ _ _
+    l3464 _ _ _ l3465 _ _ _ l3466 _ _ _ l3467 _ _ _ l3468 _ _ _ l3469 _ _ _ l3470 _ _ _ l3471 _ _ _
+    l3472 _ _ _ l3473 _ _ _ l3474 _ _ _ l3475 _ _ _ l3476 _ _ _ l3477 _ _ _ l3478 _ _ _ l3479 _ _ _
+    l3480 _ _ _ l3481 _ _ _ l3482 _ _ _ l3483 _ _ _ l3484 _ _ _ l3485 _ _ _ l3486 _ _ _ l3487 _ _ _
+    l3488 _ _ _ l3489 _ _ _ l3490 _ _ _ l3491 _ _ _ l3492 _ _ _ l3493 _ _ _ l3494 _ _ _ l3495 _ _ _
+    l3496 _ _ _ l3497 _ _ _ l3498 _ _ _ l3499 _ _ _ l3500 _ _ _ l3501 _ _ _ l3502 _ _ _ l3503 _ _ _
+    l3504 _ _ _ l3505 _ _ _ l3506 _ _ _ l3507 _ _ _ l3508 _ _ _ l3509 _ _ _ l3510 _ _ _ l3511 _ _ _
+    l3512 _ _ _ l3513 _ _ _ l3514 _ _ _ l3515 _ _ _ l3516 _ _ _ l3517 _ _ _ l3518 _ _ _ l3519 _ _ _
+    l3520 _ _ _ l3521 _ _ _ l3522 _ _ _ l3523 _ _ _ l3524 _ _ _ l3525 _ _ _ l3526 _ _ _ l3527 _ _ _
+    l3528 _ _ _ l3529 _ _ _ l3530 _ _ _ l3531 _ _ _ l3532 _ _ _ l3533 _ _ _ l3534 _ _ _ l3535 _ _ _
+    l3536 _ _ _ l3537 _ _ _ l3538 _ _ _ l3539 _ _ _ l3540 _ _ _ l3541 _ _ _ l3542 _ _ _ l3543 _ _ _
+    l3544 _ _ _ l3545 _ _ _ l3546 _ _ _ l3547 _ _ _ l3548 _ _ _ l3549 _ _ _ l3550 _ _ _ l3551 _ _ _
+    l3552 _ _ _ l3553 _ _ _ l3554 _ _ _ l3555 _ _ _ l3556 _ _ _ l3557 _ _ _ l3558 _ _ _ l3559 _ _ _
+    l3560 _ _ _ l3561 _ _ _ l3562 _ _ _ l3563 _ _ _ l3564 _ _ _ l3565 _ _ _ l3566 _ _ _ l3567 _ _ _
+    l3568 _ _ _ l3569 _ _ _ l3570 _ _ _ l3571 _ _ _ l3572 _ _ _ l3573 _ _ _ l3574 _ _ _ l3575 _ _ _
+    l3576 _ _ _ l3577 _ _ _ l3578 _ _ _ l3579 _ _ _ l3580 _ _ _ l3581 _ _ _ l3582 _ _ _ l3583 _ _ _
+    l3584 _ _ _ l3585 _ _ _ l3586 _ _ _ l3587 _ _ _ l3588 _ _ _ l3589 _ _ _ l3590 _ _ _ l3591 _ _ _
+    l3592 _ _ _ l3593 _ _ _ l3594 _ _ _ l3595 _ _ _ l3596 _ _ _ l3597 _ _ _ l3598 _ _ _ l3599 _ _ _
+    l3600 _ _ _ l3601 _ _ _ l3602 _ _ _ l3603 _ _ _ l3604 _ _ _ l3605 _ _ _ l3606 _ _ _ l3607 _ _ _
+    l3608 _ _ _ l3609 _ _ _ l3610 _ _ _ l3611 _ _ _ l3612 _ _ _ l3613 _ _ _ l3614 _ _ _ l3615 _ _ _
+    l3616 _ _ _ l3617 _ _ _ l3618 _ _ _ l3619 _ _ _ l3620 _ _ _ l3621 _ _ _ l3622 _ _ _ l3623 _ _ _
+    l3624 _ _ _ l3625 _ _ _ l3626 _ _ _ l3627 _ _ _ l3628 _ _ _ l3629 _ _ _ l3630 _ _ _ l3631 _ _ _
+    l3632 _ _ _ l3633 _ _ _ l3634 _ _ _ l3635 _ _ _ l3636 _ _ _ l3637 _ _ _ l3638 _ _ _ l3639 _ _ _
+    l3640 _ _ _ l3641 _ _ _ l3642 _ _ _ l3643 _ _ _ l3644 _ _ _ l3645 _ _ _ l3646 _ _ _ l3647 _ _ _
+    l3648 _ _ _ l3649 _ _ _ l3650 _ _ _ l3651 _ _ _ l3652 _ _ _ l3653 _ _ _ l3654 _ _ _ l3655 _ _ _
+    l3656 _ _ _ l3657 _ _ _ l3658 _ _ _ l3659 _ _ _ l3660 _ _ _ l3661 _ _ _ l3662 _ _ _ l3663 _ _ _
+    l3664 _ _ _ l3665 _ _ _ l3666 _ _ _ l3667 _ _ _ l3668 _ _ _ l3669 _ _ _ l3670 _ _ _ l3671 _ _ _
+    l3672 _ _ _ l3673 _ _ _ l3674 _ _ _ l3675 _ _ _ l3676 _ _ _ l3677 _ _ _ l3678 _ _ _ l3679 _ _ _
+    l3680 _ _ _ l3681 _ _ _ l3682 _ _ _ l3683 _ _ _ l3684 _ _ _ l3685 _ _ _ l3686 _ _ _ l3687 _ _ _
+    l3688 _ _ _ l3689 _ _ _ l3690 _ _ _ l3691 _ _ _ l3692 _ _ _ l3693 _ _ _ l3694 _ _ _ l3695 _ _ _
+    l3696 _ _ _ l3697 _ _ _ l3698 _ _ _ l3699 _ _ _ l3700 _ _ _ l3701 _ _ _ l3702 _ _ _ l3703 _ _ _
+    l3704 _ _ _ l3705 _ _ _ l3706 _ _ _ l3707 _ _ _ l3708 _ _ _ l3709 _ _ _ l3710 _ _ _ l3711 _ _ _
+    l3712 _ _ _ l3713 _ _ _ l3714 _ _ _ l3715 _ _ _ l3716 _ _ _ l3717 _ _ _ l3718 _ _ _ l3719 _ _ _
+    l3720 _ _ _ l3721 _ _ _ l3722 _ _ _ l3723 _ _ _ l3724 _ _ _ l3725 _ _ _ l3726 _ _ _ l3727 _ _ _
+    l3728 _ _ _ l3729 _ _ _ l3730 _ _ _ l3731 _ _ _ l3732 _ _ _ l3733 _ _ _ l3734 _ _ _ l3735 _ _ _
+    l3736 _ _ _ l3737 _ _ _ l3738 _ _ _ l3739 _ _ _ l3740 _ _ _ l3741 _ _ _ l3742 _ _ _ l3743 _ _ _
+    l3744 _ _ _ l3745 _ _ _ l3746 _ _ _ l3747 _ _ _ l3748 _ _ _ l3749 _ _ _ l3750 _ _ _ l3751 _ _ _
+    l3752 _ _ _ l3753 _ _ _ l3754 _ _ _ l3755 _ _ _ l3756 _ _ _ l3757 _ _ _ l3758 _ _ _ l3759 _ _ _
+    l3760 _ _ _ l3761 _ _ _ l3762 _ _ _ l3763 _ _ _ l3764 _ _ _ l3765 _ _ _ l3766 _ _ _ l3767 _ _ _
+    l3768 _ _ _ l3769 _ _ _ l3770 _ _ _ l3771 _ _ _ l3772 _ _ _ l3773 _ _ _ l3774 _ _ _ l3775 _ _ _
+    l3776 _ _ _ l3777 _ _ _ l3778 _ _ _ l3779 _ _ _ l3780 _ _ _ l3781 _ _ _ l3782 _ _ _ l3783 _ _ _
+    l3784 _ _ _ l3785 _ _ _ l3786 _ _ _ l3787 _ _ _ l3788 _ _ _ l3789 _ _ _ l3790 _ _ _ l3791 _ _ _
+    l3792 _ _ _ l3793 _ _ _ l3794 _ _ _ l3795 _ _ _ l3796 _ _ _ l3797 _ _ _ l3798 _ _ _ l3799 _ _ _
+    l3800 _ _ _ l3801 _ _ _ l3802 _ _ _ l3803 _ _ _ l3804 _ _ _ l3805 _ _ _ l3806 _ _ _ l3807 _ _ _
+    l3808 _ _ _ l3809 _ _ _ l3810 _ _ _ l3811 _ _ _ l3812 _ _ _ l3813 _ _ _ l3814 _ _ _ l3815 _ _ _
+    l3816 _ _ _ l3817 _ _ _ l3818 _ _ _ l3819 _ _ _ l3820 _ _ _ l3821 _ _ _ l3822 _ _ _ l3823 _ _ _
+    l3824 _ _ _ l3825 _ _ _ l3826 _ _ _ l3827 _ _ _ l3828 _ _ _ l3829 _ _ _ l3830 _ _ _ l3831 _ _ _
+    l3832 _ _ _ l3833 _ _ _ l3834 _ _ _ l3835 _ _ _ l3836 _ _ _ l3837 _ _ _ l3838 _ _ _ l3839 _ _ _
+    l3840 _ _ _ l3841 _ _ _ l3842 _ _ _ l3843 _ _ _ l3844 _ _ _ l3845 _ _ _ l3846 _ _ _ l3847 _ _ _
+    l3848 _ _ _ l3849 _ _ _ l3850 _ _ _ l3851 _ _ _ l3852 _ _ _ l3853 _ _ _ l3854 _ _ _ l3855 _ _ _
+    l3856 _ _ _ l3857 _ _ _ l3858 _ _ _ l3859 _ _ _ l3860 _ _ _ l3861 _ _ _ l3862 _ _ _ l3863 _ _ _
+    l3864 _ _ _ l3865 _ _ _ l3866 _ _ _ l3867 _ _ _ l3868 _ _ _ l3869 _ _ _ l3870 _ _ _ l3871 _ _ _
+    l3872 _ _ _ l3873 _ _ _ l3874 _ _ _ l3875 _ _ _ l3876 _ _ _ l3877 _ _ _ l3878 _ _ _ l3879 _ _ _
+    l3880 _ _ _ l3881 _ _ _ l3882 _ _ _ l3883 _ _ _ l3884 _ _ _ l3885 _ _ _ l3886 _ _ _ l3887 _ _ _
+    l3888 _ _ _ l3889 _ _ _ l3890 _ _ _ l3891 _ _ _ l3892 _ _ _ l3893 _ _ _ l3894 _ _ _ l3895 _ _ _
+    l3896 _ _ _ l3897 _ _ _ l3898 _ _ _ l3899 _ _ _ l3900 _ _ _ l3901 _ _ _ l3902 _ _ _ l3903 _ _ _
+    l3904 _ _ _ l3905 _ _ _ l3906 _ _ _ l3907 _ _ _ l3908 _ _ _ l3909 _ _ _ l3910 _ _ _ l3911 _ _ _
+    l3912 _ _ _ l3913 _ _ _ l3914 _ _ _ l3915 _ _ _ l3916 _ _ _ l3917 _ _ _ l3918 _ _ _ l3919 _ _ _
+    l3920 _ _ _ l3921 _ _ _ l3922 _ _ _ l3923 _ _ _ l3924 _ _ _ l3925 _ _ _ l3926 _ _ _ l3927 _ _ _
+    l3928 _ _ _ l3929 _ _ _ l3930 _ _ _ l3931 _ _ _ l3932 _ _ _ l3933 _ _ _ l3934 _ _ _ l3935 _ _ _
+    l3936 _ _ _ l3937 _ _ _ l3938 _ _ _ l3939 _ _ _ l3940 _ _ _ l3941 _ _ _ l3942 _ _ _ l3943 _ _ _
+    l3944 _ _ _ l3945 _ _ _ l3946 _ _ _ l3947 _ _ _ l3948 _ _ _ l3949 _ _ _ l3950 _ _ _ l3951 _ _ _
+    l3952 _ _ _ l3953 _ _ _ l3954 _ _ _ l3955 _ _ _ l3956 _ _ _ l3957 _ _ _ l3958 _ _ _ l3959 _ _ _
+    l3960 _ _ _ l3961 _ _ _ l3962 _ _ _ l3963 _ _ _ l3964 _ _ _ l3965 _ _ _ l3966 _ _ _ l3967 _ _ _
+    l3968 _ _ _ l3969 _ _ _ l3970 _ _ _ l3971 _ _ _ l3972 _ _ _ l3973 _ _ _ l3974 _ _ _ l3975 _ _ _
+    l3976 _ _ _ l3977 _ _ _ l3978 _ _ _ l3979 _ _ _ l3980 _ _ _ l3981 _ _ _ l3982 _ _ _ l3983 _ _ _
+    l3984 _ _ _ l3985 _ _ _ l3986 _ _ _ l3987 _ _ _ l3988 _ _ _ l3989 _ _ _ l3990 _ _ _ l3991 _ _ _
+    l3992 _ _ _ l3993 _ _ _ l3994 _ _ _ l3995 _ _ _ l3996 _ _ _ l3997 _ _ _ l3998 _ _ _ l3999 _ _ _
+    l4000 _ _ _ l4001 _ _ _ l4002 _ _ _ l4003 _ _ _ l4004 _ _ _ l4005 _ _ _ l4006 _ _ _ l4007 _ _ _
+    l4008 _ _ _ l4009 _ _ _ l4010 _ _ _ l4011 _ _ _ l4012 _ _ _ l4013 _ _ _ l4014 _ _ _ l4015 _ _ _
+    l4016 _ _ _ l4017 _ _ _ l4018 _ _ _ l4019 _ _ _ l4020 _ _ _ l4021 _ _ _ l4022 _ _ _ l4023 _ _ _
+    l4024 _ _ _ l4025 _ _ _ l4026 _ _ _ l4027 _ _ _ l4028 _ _ _ l4029 _ _ _ l4030 _ _ _ l4031 _ _ _
+    l4032 _ _ _ l4033 _ _ _ l4034 _ _ _ l4035 _ _ _ l4036 _ _ _ l4037 _ _ _ l4038 _ _ _ l4039 _ _ _
+    l4040 _ _ _ l4041 _ _ _ l4042 _ _ _ l4043 _ _ _ l4044 _ _ _ l4045 _ _ _ l4046 _ _ _ l4047 _ _ _
+    l4048 _ _ _ l4049 _ _ _ l4050 _ _ _ l4051 _ _ _ l4052 _ _ _ l4053 _ _ _ l4054 _ _ _ l4055 _ _ _
+    l4056 _ _ _ l4057 _ _ _ l4058 _ _ _ l4059 _ _ _ l4060 _ _ _ l4061 _ _ _ l4062 _ _ _ l4063 _ _ _
+    l4064 _ _ _ l4065 _ _ _ l4066 _ _ _ l4067 _ _ _ l4068 _ _ _ l4069 _ _ _ l4070 _ _ _ l4071 _ _ _
+    l4072 _ _ _ l4073 _ _ _ l4074 _ _ _ l4075 _ _ _ l4076 _ _ _ l4077 _ _ _ l4078 _ _ _ l4079 _ _ _
+    l4080 _ _ _ l4081 _ _ _ l4082 _ _ _ l4083 _ _ _ l4084 _ _ _ l4085 _ _ _ l4086 _ _ _ l4087 _ _ _
+    l4088 _ _ _ l4089 _ _ _ l4090 _ _ _ l4091 _ _ _ l4092 _ _ _ l4093 _ _ _ l4094 _ _ _ l4095 _ _ _
 ];
 
 # Artificial registers used to hold function inputs
+define register offset=0x20000000 size=16 [
+      i0o   i1o   i2o   i3o   i4o   i5o   i6o   i7o
+      i8o   i9o  i10o  i11o  i12o  i13o  i14o  i15o
+     i16o  i17o  i18o  i19o  i20o  i21o  i22o  i23o
+     i24o  i25o  i26o  i27o  i28o  i29o  i30o  i31o
+     i32o  i33o  i34o  i35o  i36o  i37o  i38o  i39o
+     i40o  i41o  i42o  i43o  i44o  i45o  i46o  i47o
+     i48o  i49o  i50o  i51o  i52o  i53o  i54o  i55o
+     i56o  i57o  i58o  i59o  i60o  i61o  i62o  i63o
+     i64o  i65o  i66o  i67o  i68o  i69o  i70o  i71o
+     i72o  i73o  i74o  i75o  i76o  i77o  i78o  i79o
+     i80o  i81o  i82o  i83o  i84o  i85o  i86o  i87o
+     i88o  i89o  i90o  i91o  i92o  i93o  i94o  i95o
+     i96o  i97o  i98o  i99o i100o i101o i102o i103o
+    i104o i105o i106o i107o i108o i109o i110o i111o
+    i112o i113o i114o i115o i116o i117o i118o i119o
+    i120o i121o i122o i123o i124o i125o i126o i127o
+    i128o i129o i130o i131o i132o i133o i134o i135o
+    i136o i137o i138o i139o i140o i141o i142o i143o
+    i144o i145o i146o i147o i148o i149o i150o i151o
+    i152o i153o i154o i155o i156o i157o i158o i159o
+    i160o i161o i162o i163o i164o i165o i166o i167o
+    i168o i169o i170o i171o i172o i173o i174o i175o
+    i176o i177o i178o i179o i180o i181o i182o i183o
+    i184o i185o i186o i187o i188o i189o i190o i191o
+    i192o i193o i194o i195o i196o i197o i198o i199o
+    i200o i201o i202o i203o i204o i205o i206o i207o
+    i208o i209o i210o i211o i212o i213o i214o i215o
+    i216o i217o i218o i219o i220o i221o i222o i223o
+    i224o i225o i226o i227o i228o i229o i230o i231o
+    i232o i233o i234o i235o i236o i237o i238o i239o
+    i240o i241o i242o i243o i244o i245o i246o i247o
+    i248o i249o i250o i251o i252o i253o i254o i255o
+];
 define register offset=0x20000000 size=8 [
-      i0q   i1q   i2q   i3q   i4q   i5q   i6q   i7q
-      i8q   i9q  i10q  i11q  i12q  i13q  i14q  i15q
-     i16q  i17q  i18q  i19q  i20q  i21q  i22q  i23q
-     i24q  i25q  i26q  i27q  i28q  i29q  i30q  i31q
-     i32q  i33q  i34q  i35q  i36q  i37q  i38q  i39q
-     i40q  i41q  i42q  i43q  i44q  i45q  i46q  i47q
-     i48q  i49q  i50q  i51q  i52q  i53q  i54q  i55q
-     i56q  i57q  i58q  i59q  i60q  i61q  i62q  i63q
-     i64q  i65q  i66q  i67q  i68q  i69q  i70q  i71q
-     i72q  i73q  i74q  i75q  i76q  i77q  i78q  i79q
-     i80q  i81q  i82q  i83q  i84q  i85q  i86q  i87q
-     i88q  i89q  i90q  i91q  i92q  i93q  i94q  i95q
-     i96q  i97q  i98q  i99q i100q i101q i102q i103q
-    i104q i105q i106q i107q i108q i109q i110q i111q
-    i112q i113q i114q i115q i116q i117q i118q i119q
-    i120q i121q i122q i123q i124q i125q i126q i127q
-    i128q i129q i130q i131q i132q i133q i134q i135q
-    i136q i137q i138q i139q i140q i141q i142q i143q
-    i144q i145q i146q i147q i148q i149q i150q i151q
-    i152q i153q i154q i155q i156q i157q i158q i159q
-    i160q i161q i162q i163q i164q i165q i166q i167q
-    i168q i169q i170q i171q i172q i173q i174q i175q
-    i176q i177q i178q i179q i180q i181q i182q i183q
-    i184q i185q i186q i187q i188q i189q i190q i191q
-    i192q i193q i194q i195q i196q i197q i198q i199q
-    i200q i201q i202q i203q i204q i205q i206q i207q
-    i208q i209q i210q i211q i212q i213q i214q i215q
-    i216q i217q i218q i219q i220q i221q i222q i223q
-    i224q i225q i226q i227q i228q i229q i230q i231q
-    i232q i233q i234q i235q i236q i237q i238q i239q
-    i240q i241q i242q i243q i244q i245q i246q i247q
-    i248q i249q i250q i251q i252q i253q i254q i255q
+      i0q _   i1q _   i2q _   i3q _   i4q _   i5q _   i6q _   i7q _
+      i8q _   i9q _  i10q _  i11q _  i12q _  i13q _  i14q _  i15q _
+     i16q _  i17q _  i18q _  i19q _  i20q _  i21q _  i22q _  i23q _
+     i24q _  i25q _  i26q _  i27q _  i28q _  i29q _  i30q _  i31q _
+     i32q _  i33q _  i34q _  i35q _  i36q _  i37q _  i38q _  i39q _
+     i40q _  i41q _  i42q _  i43q _  i44q _  i45q _  i46q _  i47q _
+     i48q _  i49q _  i50q _  i51q _  i52q _  i53q _  i54q _  i55q _
+     i56q _  i57q _  i58q _  i59q _  i60q _  i61q _  i62q _  i63q _
+     i64q _  i65q _  i66q _  i67q _  i68q _  i69q _  i70q _  i71q _
+     i72q _  i73q _  i74q _  i75q _  i76q _  i77q _  i78q _  i79q _
+     i80q _  i81q _  i82q _  i83q _  i84q _  i85q _  i86q _  i87q _
+     i88q _  i89q _  i90q _  i91q _  i92q _  i93q _  i94q _  i95q _
+     i96q _  i97q _  i98q _  i99q _ i100q _ i101q _ i102q _ i103q _
+    i104q _ i105q _ i106q _ i107q _ i108q _ i109q _ i110q _ i111q _
+    i112q _ i113q _ i114q _ i115q _ i116q _ i117q _ i118q _ i119q _
+    i120q _ i121q _ i122q _ i123q _ i124q _ i125q _ i126q _ i127q _
+    i128q _ i129q _ i130q _ i131q _ i132q _ i133q _ i134q _ i135q _
+    i136q _ i137q _ i138q _ i139q _ i140q _ i141q _ i142q _ i143q _
+    i144q _ i145q _ i146q _ i147q _ i148q _ i149q _ i150q _ i151q _
+    i152q _ i153q _ i154q _ i155q _ i156q _ i157q _ i158q _ i159q _
+    i160q _ i161q _ i162q _ i163q _ i164q _ i165q _ i166q _ i167q _
+    i168q _ i169q _ i170q _ i171q _ i172q _ i173q _ i174q _ i175q _
+    i176q _ i177q _ i178q _ i179q _ i180q _ i181q _ i182q _ i183q _
+    i184q _ i185q _ i186q _ i187q _ i188q _ i189q _ i190q _ i191q _
+    i192q _ i193q _ i194q _ i195q _ i196q _ i197q _ i198q _ i199q _
+    i200q _ i201q _ i202q _ i203q _ i204q _ i205q _ i206q _ i207q _
+    i208q _ i209q _ i210q _ i211q _ i212q _ i213q _ i214q _ i215q _
+    i216q _ i217q _ i218q _ i219q _ i220q _ i221q _ i222q _ i223q _
+    i224q _ i225q _ i226q _ i227q _ i228q _ i229q _ i230q _ i231q _
+    i232q _ i233q _ i234q _ i235q _ i236q _ i237q _ i238q _ i239q _
+    i240q _ i241q _ i242q _ i243q _ i244q _ i245q _ i246q _ i247q _
+    i248q _ i249q _ i250q _ i251q _ i252q _ i253q _ i254q _ i255q _
 ];
 define register offset=0x20000000 size=4 [
-      i0 _   i1 _   i2 _   i3 _   i4 _   i5 _   i6 _   i7 _
-      i8 _   i9 _  i10 _  i11 _  i12 _  i13 _  i14 _  i15 _
-     i16 _  i17 _  i18 _  i19 _  i20 _  i21 _  i22 _  i23 _
-     i24 _  i25 _  i26 _  i27 _  i28 _  i29 _  i30 _  i31 _
-     i32 _  i33 _  i34 _  i35 _  i36 _  i37 _  i38 _  i39 _
-     i40 _  i41 _  i42 _  i43 _  i44 _  i45 _  i46 _  i47 _
-     i48 _  i49 _  i50 _  i51 _  i52 _  i53 _  i54 _  i55 _
-     i56 _  i57 _  i58 _  i59 _  i60 _  i61 _  i62 _  i63 _
-     i64 _  i65 _  i66 _  i67 _  i68 _  i69 _  i70 _  i71 _
-     i72 _  i73 _  i74 _  i75 _  i76 _  i77 _  i78 _  i79 _
-     i80 _  i81 _  i82 _  i83 _  i84 _  i85 _  i86 _  i87 _
-     i88 _  i89 _  i90 _  i91 _  i92 _  i93 _  i94 _  i95 _
-     i96 _  i97 _  i98 _  i99 _ i100 _ i101 _ i102 _ i103 _
-    i104 _ i105 _ i106 _ i107 _ i108 _ i109 _ i110 _ i111 _
-    i112 _ i113 _ i114 _ i115 _ i116 _ i117 _ i118 _ i119 _
-    i120 _ i121 _ i122 _ i123 _ i124 _ i125 _ i126 _ i127 _
-    i128 _ i129 _ i130 _ i131 _ i132 _ i133 _ i134 _ i135 _
-    i136 _ i137 _ i138 _ i139 _ i140 _ i141 _ i142 _ i143 _
-    i144 _ i145 _ i146 _ i147 _ i148 _ i149 _ i150 _ i151 _
-    i152 _ i153 _ i154 _ i155 _ i156 _ i157 _ i158 _ i159 _
-    i160 _ i161 _ i162 _ i163 _ i164 _ i165 _ i166 _ i167 _
-    i168 _ i169 _ i170 _ i171 _ i172 _ i173 _ i174 _ i175 _
-    i176 _ i177 _ i178 _ i179 _ i180 _ i181 _ i182 _ i183 _
-    i184 _ i185 _ i186 _ i187 _ i188 _ i189 _ i190 _ i191 _
-    i192 _ i193 _ i194 _ i195 _ i196 _ i197 _ i198 _ i199 _
-    i200 _ i201 _ i202 _ i203 _ i204 _ i205 _ i206 _ i207 _
-    i208 _ i209 _ i210 _ i211 _ i212 _ i213 _ i214 _ i215 _
-    i216 _ i217 _ i218 _ i219 _ i220 _ i221 _ i222 _ i223 _
-    i224 _ i225 _ i226 _ i227 _ i228 _ i229 _ i230 _ i231 _
-    i232 _ i233 _ i234 _ i235 _ i236 _ i237 _ i238 _ i239 _
-    i240 _ i241 _ i242 _ i243 _ i244 _ i245 _ i246 _ i247 _
-    i248 _ i249 _ i250 _ i251 _ i252 _ i253 _ i254 _ i255 _
+      i0 _ _ _   i1 _ _ _   i2 _ _ _   i3 _ _ _   i4 _ _ _   i5 _ _ _   i6 _ _ _   i7 _ _ _
+      i8 _ _ _   i9 _ _ _  i10 _ _ _  i11 _ _ _  i12 _ _ _  i13 _ _ _  i14 _ _ _  i15 _ _ _
+     i16 _ _ _  i17 _ _ _  i18 _ _ _  i19 _ _ _  i20 _ _ _  i21 _ _ _  i22 _ _ _  i23 _ _ _
+     i24 _ _ _  i25 _ _ _  i26 _ _ _  i27 _ _ _  i28 _ _ _  i29 _ _ _  i30 _ _ _  i31 _ _ _
+     i32 _ _ _  i33 _ _ _  i34 _ _ _  i35 _ _ _  i36 _ _ _  i37 _ _ _  i38 _ _ _  i39 _ _ _
+     i40 _ _ _  i41 _ _ _  i42 _ _ _  i43 _ _ _  i44 _ _ _  i45 _ _ _  i46 _ _ _  i47 _ _ _
+     i48 _ _ _  i49 _ _ _  i50 _ _ _  i51 _ _ _  i52 _ _ _  i53 _ _ _  i54 _ _ _  i55 _ _ _
+     i56 _ _ _  i57 _ _ _  i58 _ _ _  i59 _ _ _  i60 _ _ _  i61 _ _ _  i62 _ _ _  i63 _ _ _
+     i64 _ _ _  i65 _ _ _  i66 _ _ _  i67 _ _ _  i68 _ _ _  i69 _ _ _  i70 _ _ _  i71 _ _ _
+     i72 _ _ _  i73 _ _ _  i74 _ _ _  i75 _ _ _  i76 _ _ _  i77 _ _ _  i78 _ _ _  i79 _ _ _
+     i80 _ _ _  i81 _ _ _  i82 _ _ _  i83 _ _ _  i84 _ _ _  i85 _ _ _  i86 _ _ _  i87 _ _ _
+     i88 _ _ _  i89 _ _ _  i90 _ _ _  i91 _ _ _  i92 _ _ _  i93 _ _ _  i94 _ _ _  i95 _ _ _
+     i96 _ _ _  i97 _ _ _  i98 _ _ _  i99 _ _ _ i100 _ _ _ i101 _ _ _ i102 _ _ _ i103 _ _ _
+    i104 _ _ _ i105 _ _ _ i106 _ _ _ i107 _ _ _ i108 _ _ _ i109 _ _ _ i110 _ _ _ i111 _ _ _
+    i112 _ _ _ i113 _ _ _ i114 _ _ _ i115 _ _ _ i116 _ _ _ i117 _ _ _ i118 _ _ _ i119 _ _ _
+    i120 _ _ _ i121 _ _ _ i122 _ _ _ i123 _ _ _ i124 _ _ _ i125 _ _ _ i126 _ _ _ i127 _ _ _
+    i128 _ _ _ i129 _ _ _ i130 _ _ _ i131 _ _ _ i132 _ _ _ i133 _ _ _ i134 _ _ _ i135 _ _ _
+    i136 _ _ _ i137 _ _ _ i138 _ _ _ i139 _ _ _ i140 _ _ _ i141 _ _ _ i142 _ _ _ i143 _ _ _
+    i144 _ _ _ i145 _ _ _ i146 _ _ _ i147 _ _ _ i148 _ _ _ i149 _ _ _ i150 _ _ _ i151 _ _ _
+    i152 _ _ _ i153 _ _ _ i154 _ _ _ i155 _ _ _ i156 _ _ _ i157 _ _ _ i158 _ _ _ i159 _ _ _
+    i160 _ _ _ i161 _ _ _ i162 _ _ _ i163 _ _ _ i164 _ _ _ i165 _ _ _ i166 _ _ _ i167 _ _ _
+    i168 _ _ _ i169 _ _ _ i170 _ _ _ i171 _ _ _ i172 _ _ _ i173 _ _ _ i174 _ _ _ i175 _ _ _
+    i176 _ _ _ i177 _ _ _ i178 _ _ _ i179 _ _ _ i180 _ _ _ i181 _ _ _ i182 _ _ _ i183 _ _ _
+    i184 _ _ _ i185 _ _ _ i186 _ _ _ i187 _ _ _ i188 _ _ _ i189 _ _ _ i190 _ _ _ i191 _ _ _
+    i192 _ _ _ i193 _ _ _ i194 _ _ _ i195 _ _ _ i196 _ _ _ i197 _ _ _ i198 _ _ _ i199 _ _ _
+    i200 _ _ _ i201 _ _ _ i202 _ _ _ i203 _ _ _ i204 _ _ _ i205 _ _ _ i206 _ _ _ i207 _ _ _
+    i208 _ _ _ i209 _ _ _ i210 _ _ _ i211 _ _ _ i212 _ _ _ i213 _ _ _ i214 _ _ _ i215 _ _ _
+    i216 _ _ _ i217 _ _ _ i218 _ _ _ i219 _ _ _ i220 _ _ _ i221 _ _ _ i222 _ _ _ i223 _ _ _
+    i224 _ _ _ i225 _ _ _ i226 _ _ _ i227 _ _ _ i228 _ _ _ i229 _ _ _ i230 _ _ _ i231 _ _ _
+    i232 _ _ _ i233 _ _ _ i234 _ _ _ i235 _ _ _ i236 _ _ _ i237 _ _ _ i238 _ _ _ i239 _ _ _
+    i240 _ _ _ i241 _ _ _ i242 _ _ _ i243 _ _ _ i244 _ _ _ i245 _ _ _ i246 _ _ _ i247 _ _ _
+    i248 _ _ _ i249 _ _ _ i250 _ _ _ i251 _ _ _ i252 _ _ _ i253 _ _ _ i254 _ _ _ i255 _ _ _
 ];
 
 # Artificial registers used to hold function outputs
+define register offset=0x30000000 size=16 [
+      o0o   o1o   o2o   o3o   o4o   o5o   o6o   o7o
+      o8o   o9o  o10o  o11o  o12o  o13o  o14o  o15o
+     o16o  o17o  o18o  o19o  o20o  o21o  o22o  o23o
+     o24o  o25o  o26o  o27o  o28o  o29o  o30o  o31o
+     o32o  o33o  o34o  o35o  o36o  o37o  o38o  o39o
+     o40o  o41o  o42o  o43o  o44o  o45o  o46o  o47o
+     o48o  o49o  o50o  o51o  o52o  o53o  o54o  o55o
+     o56o  o57o  o58o  o59o  o60o  o61o  o62o  o63o
+     o64o  o65o  o66o  o67o  o68o  o69o  o70o  o71o
+     o72o  o73o  o74o  o75o  o76o  o77o  o78o  o79o
+     o80o  o81o  o82o  o83o  o84o  o85o  o86o  o87o
+     o88o  o89o  o90o  o91o  o92o  o93o  o94o  o95o
+     o96o  o97o  o98o  o99o o100o o101o o102o o103o
+    o104o o105o o106o o107o o108o o109o o110o o111o
+    o112o o113o o114o o115o o116o o117o o118o o119o
+    o120o o121o o122o o123o o124o o125o o126o o127o
+    o128o o129o o130o o131o o132o o133o o134o o135o
+    o136o o137o o138o o139o o140o o141o o142o o143o
+    o144o o145o o146o o147o o148o o149o o150o o151o
+    o152o o153o o154o o155o o156o o157o o158o o159o
+    o160o o161o o162o o163o o164o o165o o166o o167o
+    o168o o169o o170o o171o o172o o173o o174o o175o
+    o176o o177o o178o o179o o180o o181o o182o o183o
+    o184o o185o o186o o187o o188o o189o o190o o191o
+    o192o o193o o194o o195o o196o o197o o198o o199o
+    o200o o201o o202o o203o o204o o205o o206o o207o
+    o208o o209o o210o o211o o212o o213o o214o o215o
+    o216o o217o o218o o219o o220o o221o o222o o223o
+    o224o o225o o226o o227o o228o o229o o230o o231o
+    o232o o233o o234o o235o o236o o237o o238o o239o
+    o240o o241o o242o o243o o244o o245o o246o o247o
+    o248o o249o o250o o251o o252o o253o o254o o255o
+];
 define register offset=0x30000000 size=8 [
-      o0q   o1q   o2q   o3q   o4q   o5q   o6q   o7q
-      o8q   o9q  o10q  o11q  o12q  o13q  o14q  o15q
-     o16q  o17q  o18q  o19q  o20q  o21q  o22q  o23q
-     o24q  o25q  o26q  o27q  o28q  o29q  o30q  o31q
-     o32q  o33q  o34q  o35q  o36q  o37q  o38q  o39q
-     o40q  o41q  o42q  o43q  o44q  o45q  o46q  o47q
-     o48q  o49q  o50q  o51q  o52q  o53q  o54q  o55q
-     o56q  o57q  o58q  o59q  o60q  o61q  o62q  o63q
-     o64q  o65q  o66q  o67q  o68q  o69q  o70q  o71q
-     o72q  o73q  o74q  o75q  o76q  o77q  o78q  o79q
-     o80q  o81q  o82q  o83q  o84q  o85q  o86q  o87q
-     o88q  o89q  o90q  o91q  o92q  o93q  o94q  o95q
-     o96q  o97q  o98q  o99q o100q o101q o102q o103q
-    o104q o105q o106q o107q o108q o109q o110q o111q
-    o112q o113q o114q o115q o116q o117q o118q o119q
-    o120q o121q o122q o123q o124q o125q o126q o127q
-    o128q o129q o130q o131q o132q o133q o134q o135q
-    o136q o137q o138q o139q o140q o141q o142q o143q
-    o144q o145q o146q o147q o148q o149q o150q o151q
-    o152q o153q o154q o155q o156q o157q o158q o159q
-    o160q o161q o162q o163q o164q o165q o166q o167q
-    o168q o169q o170q o171q o172q o173q o174q o175q
-    o176q o177q o178q o179q o180q o181q o182q o183q
-    o184q o185q o186q o187q o188q o189q o190q o191q
-    o192q o193q o194q o195q o196q o197q o198q o199q
-    o200q o201q o202q o203q o204q o205q o206q o207q
-    o208q o209q o210q o211q o212q o213q o214q o215q
-    o216q o217q o218q o219q o220q o221q o222q o223q
-    o224q o225q o226q o227q o228q o229q o230q o231q
-    o232q o233q o234q o235q o236q o237q o238q o239q
-    o240q o241q o242q o243q o244q o245q o246q o247q
-    o248q o249q o250q o251q o252q o253q o254q o255q
+      o0q _   o1q _   o2q _   o3q _   o4q _   o5q _   o6q _   o7q _
+      o8q _   o9q _  o10q _  o11q _  o12q _  o13q _  o14q _  o15q _
+     o16q _  o17q _  o18q _  o19q _  o20q _  o21q _  o22q _  o23q _
+     o24q _  o25q _  o26q _  o27q _  o28q _  o29q _  o30q _  o31q _
+     o32q _  o33q _  o34q _  o35q _  o36q _  o37q _  o38q _  o39q _
+     o40q _  o41q _  o42q _  o43q _  o44q _  o45q _  o46q _  o47q _
+     o48q _  o49q _  o50q _  o51q _  o52q _  o53q _  o54q _  o55q _
+     o56q _  o57q _  o58q _  o59q _  o60q _  o61q _  o62q _  o63q _
+     o64q _  o65q _  o66q _  o67q _  o68q _  o69q _  o70q _  o71q _
+     o72q _  o73q _  o74q _  o75q _  o76q _  o77q _  o78q _  o79q _
+     o80q _  o81q _  o82q _  o83q _  o84q _  o85q _  o86q _  o87q _
+     o88q _  o89q _  o90q _  o91q _  o92q _  o93q _  o94q _  o95q _
+     o96q _  o97q _  o98q _  o99q _ o100q _ o101q _ o102q _ o103q _
+    o104q _ o105q _ o106q _ o107q _ o108q _ o109q _ o110q _ o111q _
+    o112q _ o113q _ o114q _ o115q _ o116q _ o117q _ o118q _ o119q _
+    o120q _ o121q _ o122q _ o123q _ o124q _ o125q _ o126q _ o127q _
+    o128q _ o129q _ o130q _ o131q _ o132q _ o133q _ o134q _ o135q _
+    o136q _ o137q _ o138q _ o139q _ o140q _ o141q _ o142q _ o143q _
+    o144q _ o145q _ o146q _ o147q _ o148q _ o149q _ o150q _ o151q _
+    o152q _ o153q _ o154q _ o155q _ o156q _ o157q _ o158q _ o159q _
+    o160q _ o161q _ o162q _ o163q _ o164q _ o165q _ o166q _ o167q _
+    o168q _ o169q _ o170q _ o171q _ o172q _ o173q _ o174q _ o175q _
+    o176q _ o177q _ o178q _ o179q _ o180q _ o181q _ o182q _ o183q _
+    o184q _ o185q _ o186q _ o187q _ o188q _ o189q _ o190q _ o191q _
+    o192q _ o193q _ o194q _ o195q _ o196q _ o197q _ o198q _ o199q _
+    o200q _ o201q _ o202q _ o203q _ o204q _ o205q _ o206q _ o207q _
+    o208q _ o209q _ o210q _ o211q _ o212q _ o213q _ o214q _ o215q _
+    o216q _ o217q _ o218q _ o219q _ o220q _ o221q _ o222q _ o223q _
+    o224q _ o225q _ o226q _ o227q _ o228q _ o229q _ o230q _ o231q _
+    o232q _ o233q _ o234q _ o235q _ o236q _ o237q _ o238q _ o239q _
+    o240q _ o241q _ o242q _ o243q _ o244q _ o245q _ o246q _ o247q _
+    o248q _ o249q _ o250q _ o251q _ o252q _ o253q _ o254q _ o255q _
 ];
 define register offset=0x30000000 size=4 [
-      o0 _   o1 _   o2 _   o3 _   o4 _   o5 _   o6 _   o7 _
-      o8 _   o9 _  o10 _  o11 _  o12 _  o13 _  o14 _  o15 _
-     o16 _  o17 _  o18 _  o19 _  o20 _  o21 _  o22 _  o23 _
-     o24 _  o25 _  o26 _  o27 _  o28 _  o29 _  o30 _  o31 _
-     o32 _  o33 _  o34 _  o35 _  o36 _  o37 _  o38 _  o39 _
-     o40 _  o41 _  o42 _  o43 _  o44 _  o45 _  o46 _  o47 _
-     o48 _  o49 _  o50 _  o51 _  o52 _  o53 _  o54 _  o55 _
-     o56 _  o57 _  o58 _  o59 _  o60 _  o61 _  o62 _  o63 _
-     o64 _  o65 _  o66 _  o67 _  o68 _  o69 _  o70 _  o71 _
-     o72 _  o73 _  o74 _  o75 _  o76 _  o77 _  o78 _  o79 _
-     o80 _  o81 _  o82 _  o83 _  o84 _  o85 _  o86 _  o87 _
-     o88 _  o89 _  o90 _  o91 _  o92 _  o93 _  o94 _  o95 _
-     o96 _  o97 _  o98 _  o99 _ o100 _ o101 _ o102 _ o103 _
-    o104 _ o105 _ o106 _ o107 _ o108 _ o109 _ o110 _ o111 _
-    o112 _ o113 _ o114 _ o115 _ o116 _ o117 _ o118 _ o119 _
-    o120 _ o121 _ o122 _ o123 _ o124 _ o125 _ o126 _ o127 _
-    o128 _ o129 _ o130 _ o131 _ o132 _ o133 _ o134 _ o135 _
-    o136 _ o137 _ o138 _ o139 _ o140 _ o141 _ o142 _ o143 _
-    o144 _ o145 _ o146 _ o147 _ o148 _ o149 _ o150 _ o151 _
-    o152 _ o153 _ o154 _ o155 _ o156 _ o157 _ o158 _ o159 _
-    o160 _ o161 _ o162 _ o163 _ o164 _ o165 _ o166 _ o167 _
-    o168 _ o169 _ o170 _ o171 _ o172 _ o173 _ o174 _ o175 _
-    o176 _ o177 _ o178 _ o179 _ o180 _ o181 _ o182 _ o183 _
-    o184 _ o185 _ o186 _ o187 _ o188 _ o189 _ o190 _ o191 _
-    o192 _ o193 _ o194 _ o195 _ o196 _ o197 _ o198 _ o199 _
-    o200 _ o201 _ o202 _ o203 _ o204 _ o205 _ o206 _ o207 _
-    o208 _ o209 _ o210 _ o211 _ o212 _ o213 _ o214 _ o215 _
-    o216 _ o217 _ o218 _ o219 _ o220 _ o221 _ o222 _ o223 _
-    o224 _ o225 _ o226 _ o227 _ o228 _ o229 _ o230 _ o231 _
-    o232 _ o233 _ o234 _ o235 _ o236 _ o237 _ o238 _ o239 _
-    o240 _ o241 _ o242 _ o243 _ o244 _ o245 _ o246 _ o247 _
-    o248 _ o249 _ o250 _ o251 _ o252 _ o253 _ o254 _ o255 _
+      o0 _ _ _   o1 _ _ _   o2 _ _ _   o3 _ _ _   o4 _ _ _   o5 _ _ _   o6 _ _ _   o7 _ _ _
+      o8 _ _ _   o9 _ _ _  o10 _ _ _  o11 _ _ _  o12 _ _ _  o13 _ _ _  o14 _ _ _  o15 _ _ _
+     o16 _ _ _  o17 _ _ _  o18 _ _ _  o19 _ _ _  o20 _ _ _  o21 _ _ _  o22 _ _ _  o23 _ _ _
+     o24 _ _ _  o25 _ _ _  o26 _ _ _  o27 _ _ _  o28 _ _ _  o29 _ _ _  o30 _ _ _  o31 _ _ _
+     o32 _ _ _  o33 _ _ _  o34 _ _ _  o35 _ _ _  o36 _ _ _  o37 _ _ _  o38 _ _ _  o39 _ _ _
+     o40 _ _ _  o41 _ _ _  o42 _ _ _  o43 _ _ _  o44 _ _ _  o45 _ _ _  o46 _ _ _  o47 _ _ _
+     o48 _ _ _  o49 _ _ _  o50 _ _ _  o51 _ _ _  o52 _ _ _  o53 _ _ _  o54 _ _ _  o55 _ _ _
+     o56 _ _ _  o57 _ _ _  o58 _ _ _  o59 _ _ _  o60 _ _ _  o61 _ _ _  o62 _ _ _  o63 _ _ _
+     o64 _ _ _  o65 _ _ _  o66 _ _ _  o67 _ _ _  o68 _ _ _  o69 _ _ _  o70 _ _ _  o71 _ _ _
+     o72 _ _ _  o73 _ _ _  o74 _ _ _  o75 _ _ _  o76 _ _ _  o77 _ _ _  o78 _ _ _  o79 _ _ _
+     o80 _ _ _  o81 _ _ _  o82 _ _ _  o83 _ _ _  o84 _ _ _  o85 _ _ _  o86 _ _ _  o87 _ _ _
+     o88 _ _ _  o89 _ _ _  o90 _ _ _  o91 _ _ _  o92 _ _ _  o93 _ _ _  o94 _ _ _  o95 _ _ _
+     o96 _ _ _  o97 _ _ _  o98 _ _ _  o99 _ _ _ o100 _ _ _ o101 _ _ _ o102 _ _ _ o103 _ _ _
+    o104 _ _ _ o105 _ _ _ o106 _ _ _ o107 _ _ _ o108 _ _ _ o109 _ _ _ o110 _ _ _ o111 _ _ _
+    o112 _ _ _ o113 _ _ _ o114 _ _ _ o115 _ _ _ o116 _ _ _ o117 _ _ _ o118 _ _ _ o119 _ _ _
+    o120 _ _ _ o121 _ _ _ o122 _ _ _ o123 _ _ _ o124 _ _ _ o125 _ _ _ o126 _ _ _ o127 _ _ _
+    o128 _ _ _ o129 _ _ _ o130 _ _ _ o131 _ _ _ o132 _ _ _ o133 _ _ _ o134 _ _ _ o135 _ _ _
+    o136 _ _ _ o137 _ _ _ o138 _ _ _ o139 _ _ _ o140 _ _ _ o141 _ _ _ o142 _ _ _ o143 _ _ _
+    o144 _ _ _ o145 _ _ _ o146 _ _ _ o147 _ _ _ o148 _ _ _ o149 _ _ _ o150 _ _ _ o151 _ _ _
+    o152 _ _ _ o153 _ _ _ o154 _ _ _ o155 _ _ _ o156 _ _ _ o157 _ _ _ o158 _ _ _ o159 _ _ _
+    o160 _ _ _ o161 _ _ _ o162 _ _ _ o163 _ _ _ o164 _ _ _ o165 _ _ _ o166 _ _ _ o167 _ _ _
+    o168 _ _ _ o169 _ _ _ o170 _ _ _ o171 _ _ _ o172 _ _ _ o173 _ _ _ o174 _ _ _ o175 _ _ _
+    o176 _ _ _ o177 _ _ _ o178 _ _ _ o179 _ _ _ o180 _ _ _ o181 _ _ _ o182 _ _ _ o183 _ _ _
+    o184 _ _ _ o185 _ _ _ o186 _ _ _ o187 _ _ _ o188 _ _ _ o189 _ _ _ o190 _ _ _ o191 _ _ _
+    o192 _ _ _ o193 _ _ _ o194 _ _ _ o195 _ _ _ o196 _ _ _ o197 _ _ _ o198 _ _ _ o199 _ _ _
+    o200 _ _ _ o201 _ _ _ o202 _ _ _ o203 _ _ _ o204 _ _ _ o205 _ _ _ o206 _ _ _ o207 _ _ _
+    o208 _ _ _ o209 _ _ _ o210 _ _ _ o211 _ _ _ o212 _ _ _ o213 _ _ _ o214 _ _ _ o215 _ _ _
+    o216 _ _ _ o217 _ _ _ o218 _ _ _ o219 _ _ _ o220 _ _ _ o221 _ _ _ o222 _ _ _ o223 _ _ _
+    o224 _ _ _ o225 _ _ _ o226 _ _ _ o227 _ _ _ o228 _ _ _ o229 _ _ _ o230 _ _ _ o231 _ _ _
+    o232 _ _ _ o233 _ _ _ o234 _ _ _ o235 _ _ _ o236 _ _ _ o237 _ _ _ o238 _ _ _ o239 _ _ _
+    o240 _ _ _ o241 _ _ _ o242 _ _ _ o243 _ _ _ o244 _ _ _ o245 _ _ _ o246 _ _ _ o247 _ _ _
+    o248 _ _ _ o249 _ _ _ o250 _ _ _ o251 _ _ _ o252 _ _ _ o253 _ _ _ o254 _ _ _ o255 _ _ _
 ];
 
 # Artificial temporary registers used to hold block arguments during branches
-define register offset=0x40000000 size=8 [ t0 ];
+define register offset=0x40000000 size=4 [ t0 ];
 
 # All context registers are set by the pre-analyzer
 define context contextreg
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
index e77a81ad86c7..cd9c084d11f9 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
@@ -78,6 +78,8 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 
 	public final static long IMPORT_BASE = 0x7f000000L;
 	public final static long CODE_BASE = 0x80000000L;
+	/* Size of each register */
+	public final static int REG_SIZE = 16;
 
 	@Override
 	public String getName() {
@@ -137,7 +139,7 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 	}
 
 	public static Address getGlobalAddress(AddressFactory addressFactory, int globalidx) {
-		return addressFactory.getAddressSpace("global").getAddress(((long) globalidx) * 8);
+		return addressFactory.getAddressSpace("global").getAddress(((long) globalidx) * REG_SIZE);
 	}
 
 	public static Address getModuleAddress(AddressFactory addressFactory) {
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
index 8e5070d4ce46..e8f986c5a498 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
@@ -479,7 +479,7 @@ public class WasmFunctionAnalysis {
 	// #endregion
 
 	private void analyzeOpcode(WasmAnalysis analysis, Address instAddress, BinaryReader reader) throws IOException {
-		contextreg.setStackPointer(instAddress, 8 * valueStack.size());
+		contextreg.setStackPointer(instAddress, valueStack.size());
 		int opcode = reader.readNextUnsignedByte();
 		switch (opcode) {
 		case 0x00: /* unreachable */
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmEntry.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmEntry.java
index ab2f007eb042..158cb486ce30 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmEntry.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmEntry.java
@@ -20,6 +20,7 @@ import ghidra.program.model.lang.InjectContext;
 import ghidra.program.model.lang.InjectPayloadSleigh;
 import ghidra.program.model.listing.Program;
 import ghidra.program.model.pcode.PcodeOp;
+import wasm.WasmLoader;
 import wasm.analysis.WasmAnalysis;
 import wasm.analysis.WasmFuncSignature;
 import wasm.format.WasmEnums.ValType;
@@ -50,11 +51,11 @@ public class InjectPayloadWasmEntry extends InjectPayloadSleigh {
 		ValType[] params = sig.getParams();
 		ValType[] locals = sig.getLocals();
 		for (int i = 0; i < params.length; i++) {
-			ops.emitCopy(inputBase.add(i * 8L), localsBase.add(i * 8L), params[i].getSize());
+			ops.emitCopy(inputBase.add(i * WasmLoader.REG_SIZE), localsBase.add(i * WasmLoader.REG_SIZE), params[i].getSize());
 		}
 		Address zero = program.getAddressFactory().getConstantAddress(0L);
 		for (int i = params.length; i < locals.length; i++) {
-			ops.emitCopy(zero, localsBase.add(i * 8L), locals[i].getSize());
+			ops.emitCopy(zero, localsBase.add(i * WasmLoader.REG_SIZE), locals[i].getSize());
 		}
 		return ops.getPcodeOps();
 	}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPop.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPop.java
index 6c03cfedd8fc..fef1fd1c299d 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPop.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPop.java
@@ -20,6 +20,7 @@ import ghidra.program.model.lang.InjectContext;
 import ghidra.program.model.lang.InjectPayloadCallother;
 import ghidra.program.model.listing.Program;
 import ghidra.program.model.pcode.PcodeOp;
+import wasm.WasmLoader;
 import wasm.analysis.WasmAnalysis;
 import wasm.analysis.WasmFunctionAnalysis;
 import wasm.analysis.WasmFunctionAnalysis.StackEffect;
@@ -63,9 +64,9 @@ public class InjectPayloadWasmPop extends InjectPayloadCallother {
 
 		long stackHeight = stackEffect.getPopHeight();
 		ValType[] todo = stackEffect.getToPop();
-		Address stackAddress = program.getRegister("s0").getAddress().add(stackHeight * 8);
+		Address stackAddress = program.getRegister("s0").getAddress().add(stackHeight * WasmLoader.REG_SIZE);
 		for (int i = 0; i < todo.length; i++) {
-			ops.emitCopy(stackAddress.add(i * 8L), baseAddress.add(i * 8L), todo[i].getSize());
+			ops.emitCopy(stackAddress.add(i * WasmLoader.REG_SIZE), baseAddress.add(i * WasmLoader.REG_SIZE), todo[i].getSize());
 		}
 
 		return ops.getPcodeOps();
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPush.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPush.java
index 9a806783483c..463e670d4f10 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPush.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/InjectPayloadWasmPush.java
@@ -20,6 +20,7 @@ import ghidra.program.model.lang.InjectContext;
 import ghidra.program.model.lang.InjectPayloadCallother;
 import ghidra.program.model.listing.Program;
 import ghidra.program.model.pcode.PcodeOp;
+import wasm.WasmLoader;
 import wasm.analysis.WasmAnalysis;
 import wasm.analysis.WasmFunctionAnalysis;
 import wasm.analysis.WasmFunctionAnalysis.StackEffect;
@@ -62,9 +63,9 @@ public class InjectPayloadWasmPush extends InjectPayloadCallother {
 
 		long stackHeight = stackEffect.getPushHeight();
 		ValType[] todo = stackEffect.getToPush();
-		Address stackAddress = program.getRegister("s0").getAddress().add(stackHeight * 8);
+		Address stackAddress = program.getRegister("s0").getAddress().add(stackHeight * WasmLoader.REG_SIZE);
 		for (int i = 0; i < todo.length; i++) {
-			ops.emitCopy(baseAddress.add(i * 8L), stackAddress.add(i * 8L), todo[i].getSize());
+			ops.emitCopy(baseAddress.add(i * WasmLoader.REG_SIZE), stackAddress.add(i * WasmLoader.REG_SIZE), todo[i].getSize());
 		}
 
 		return ops.getPcodeOps();
-- 
2.41.0


From 5ec369aa3b052a18eab589e70cef9f37f7f80ffc Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Tue, 29 Mar 2022 19:29:39 -0700
Subject: [PATCH 07/25] WebAssembly: Emulation support

This patch implements a EmulateInstructionStateModifier for Wasm which provides
support for emulating Wasm instructions.

The memory contents must contain a full module for this to work, because
instruction semantics still depend on module details (e.g. the type of certain
operations depends on metadata like the types of imports or globals).
---
 .../languages/WebAssembly-pos-stack.cspec     |  10 +
 .../data/languages/WebAssembly.cspec          |  10 +
 .../data/languages/WebAssembly.pspec          |   1 +
 .../data/languages/WebAssembly.sinc           |  17 +-
 .../data/languages/WebAssembly.slaspec        |  12 +-
 .../ghidra_scripts/emulate_writev.py          |  57 ++++
 .../help/help/topics/WebAssembly/help.html    |   8 +
 .../main/help/help/topics/WebAssembly/help.md |  12 +
 .../WasmEmulateInstructionStateModifier.java  | 296 ++++++++++++++++++
 .../emulation/WasmEmulationHelper.java        | 135 ++++++++
 .../wasm/analysis/WasmFunctionAnalysis.java   |   8 +
 .../wasm/pcode/PcodeInjectLibraryWasm.java    |   2 +
 .../main/java/wasm/pcode/PcodeOpEmitter.java  |   2 +-
 13 files changed, 561 insertions(+), 9 deletions(-)
 create mode 100644 Ghidra/Processors/WebAssembly/ghidra_scripts/emulate_writev.py
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/ghidra/program/emulation/WasmEmulateInstructionStateModifier.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/ghidra/program/emulation/WasmEmulationHelper.java

diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec
index 11415fb0e217..4b44d43f59e3 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec
@@ -1583,4 +1583,14 @@
       <input name="regoffset" />
     </pcode>
   </callotherfixup>
+  <callotherfixup targetop="callPrologueCallOther">
+    <pcode dynamic="true">
+      <input name="regoffset" />
+    </pcode>
+  </callotherfixup>
+  <callotherfixup targetop="callEpilogueCallOther">
+    <pcode dynamic="true">
+      <input name="regoffset" />
+    </pcode>
+  </callotherfixup>
 </compiler_spec>
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.cspec b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.cspec
index 86b6abff353e..1d5b021b5bc7 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.cspec
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.cspec
@@ -49,4 +49,14 @@
       <input name="regoffset" />
     </pcode>
   </callotherfixup>
+  <callotherfixup targetop="callPrologueCallOther">
+    <pcode dynamic="true">
+      <input name="regoffset" />
+    </pcode>
+  </callotherfixup>
+  <callotherfixup targetop="callEpilogueCallOther">
+    <pcode dynamic="true">
+      <input name="regoffset" />
+    </pcode>
+  </callotherfixup>
 </compiler_spec>
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.pspec b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.pspec
index 936c88245571..f4898dd965cc 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.pspec
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.pspec
@@ -5,6 +5,7 @@
 <processor_spec>
   <properties>
     <property key="pcodeInjectLibraryClass" value="wasm.pcode.PcodeInjectLibraryWasm"/>
+    <property key="emulateInstructionStateModifierClass" value="ghidra.program.emulation.WasmEmulateInstructionStateModifier"/>
   </properties>
   <inferptrbounds>
     <range space="ram" first="0x400" last="0xffffffff"/>
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc
index 762bbbf111bc..42eaa52ffb60 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc
@@ -31,7 +31,8 @@ define token I64 (64)
 
 define pcodeop popCallOther;
 define pcodeop pushCallOther;
-
+define pcodeop callPrologueCallOther;
+define pcodeop callEpilogueCallOther;
 define pcodeop halt_trap;
 define pcodeop popcnt;
 define pcodeop clz;
@@ -207,7 +208,7 @@ macro doBranch(br_target) {
 
 :end is opc=0x0b; ctx_is_return=1; ctx_is_directive=0 {
 	nop();
-	popCallOther(&o0);
+	callEpilogueCallOther(&o0);
 	return [LR];
 }
 :end is opc=0x0b; ctx_is_return=0; ctx_is_directive=0 {
@@ -236,20 +237,22 @@ macro doBranch(br_target) {
 
 :return is opc=0x0f; ctx_is_directive=0 {
 	nop();
-	popCallOther(&o0);
+	callEpilogueCallOther(&o0);
 	return [LR];
 }
+# note: anything following the call doesn't happen in emulation mode
+# the movement of outputs is handled by callEpilogueCallOther in emulation mode
 :call br_target is opc=0x10; ULeb128; br_target; ctx_is_directive=0 {
-	nop();
-	popCallOther(&i0);
+	LR = inst_next;
+	callPrologueCallOther(&i0);
 	call br_target;
 	pushCallOther(&o0);
 }
 :call_indirect "type="^typeidx tableref is opc=0x11; typeidx; tableref; sp1_32; ctx_is_directive=0 {
-	nop();
 	addr:8 = &tableref + zext(sp1_32) * 4;
 	val:4 = *[table] addr;
-	popCallOther(&i0);
+	LR = inst_next;
+	callPrologueCallOther(&i0);
 	call [val];
 	pushCallOther(&o0);
 }
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.slaspec b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.slaspec
index ed7b09890a2e..288fe162fdee 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.slaspec
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.slaspec
@@ -11,7 +11,12 @@ define space table   type=ram_space		 size=8;
 define space global  type=ram_space		 size=4;
 define space register type=register_space size=4;
 
-define register offset=0 size=4 [ _  PC SP LR BRTableInput];
+# PC is the program counter
+# SP is the C stack pointer if present
+# SSP is the shadow stack pointer for the ss* register block, only for emulation
+# LR is the return address register, only really used during emulation
+# BRTableInput is a temporary register used to hold the value for br_table
+define register offset=0 size=4 [ _  PC SP SSP LR BRTableInput];
 
 # Define context bits (if defined, size must be multiple of 4-bytes)
 define register offset=0x1000 size=16   contextreg;
@@ -1665,6 +1670,7 @@ define register offset=0x10000000 size=4 [
 ];
 
 # Artificial registers used to hold function inputs
+# Only used for the decompiler - emulation places inputs in locals directly
 define register offset=0x20000000 size=16 [
       i0o   i1o   i2o   i3o   i4o   i5o   i6o   i7o
       i8o   i9o  i10o  i11o  i12o  i13o  i14o  i15o
@@ -1875,6 +1881,10 @@ define register offset=0x30000000 size=4 [
 # Artificial temporary registers used to hold block arguments during branches
 define register offset=0x40000000 size=4 [ t0 ];
 
+# Shadow stack registers used to store the locals, stacks and return addresses for other frames during emulation
+# The current function's locals and stack are always stored in l*/s* registers.
+define register offset=0x80000000 size=4 [ ss0 ];
+
 # All context registers are set by the pre-analyzer
 define context contextreg
 	ctx_is_op64 = (0, 0) noflow
diff --git a/Ghidra/Processors/WebAssembly/ghidra_scripts/emulate_writev.py b/Ghidra/Processors/WebAssembly/ghidra_scripts/emulate_writev.py
new file mode 100644
index 000000000000..c40789c2ba20
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/ghidra_scripts/emulate_writev.py
@@ -0,0 +1,57 @@
+## ###
+#  IP: GHIDRA
+# 
+#  Licensed under the Apache License, Version 2.0 (the "License");
+#  you may not use this file except in compliance with the License.
+#  You may obtain a copy of the License at
+#  
+#       http://www.apache.org/licenses/LICENSE-2.0
+#  
+#  Unless required by applicable law or agreed to in writing, software
+#  distributed under the License is distributed on an "AS IS" BASIS,
+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+#  See the License for the specific language governing permissions and
+#  limitations under the License.
+##
+
+# A sample script to demonstrate emulation and function hooking with Wasm programs.
+# @author nneonneo
+# @category Analysis.Wasm
+# @keybinding
+# @menupath
+# @toolbar
+
+from __future__ import print_function
+from ghidra.app.emulator import EmulatorHelper
+from ghidra.program.emulation import WasmEmulationHelper
+import struct
+
+main = currentProgram.listing.getFunctions("export", "main")[0]
+emuHelper = EmulatorHelper(currentProgram)
+emuHelper.writeRegister(emuHelper.getPCRegister(), main.entryPoint.offset)
+wasmHelper = WasmEmulationHelper(emuHelper.language)
+ramSpace = currentProgram.addressFactory.defaultAddressSpace
+
+syscall3Addr = currentProgram.listing.getFunctions("import::env", "__syscall3")[0].entryPoint
+emuHelper.setBreakpoint(syscall3Addr)
+while 1:
+    if not emuHelper.run(monitor):
+        raise Exception("Emulation stopped: " + emuHelper.lastError)
+    if emuHelper.executionAddress == syscall3Addr:
+        l0 = emuHelper.readRegister("l0")
+        l1 = emuHelper.readRegister("l1")
+        l2 = emuHelper.readRegister("l2")
+        l3 = emuHelper.readRegister("l3")
+        if l0 == 146: # writev
+            # Read iovec array
+            data = emuHelper.readMemory(ramSpace.getAddress(l2), l3 * 8)
+            iovecs = [struct.unpack_from("<II", data.tostring(), 8 * i) for i in range(l3)]
+            msg = []
+            for io_base, io_len in iovecs:
+                if io_len:
+                    msg.append(emuHelper.readMemory(ramSpace.getAddress(io_base), io_len).tostring())
+            msg = "".join(msg)
+            print("writev:", repr(msg))
+            wasmHelper.simulateReturn(emuHelper.emulator, len(msg))
+        else:
+            wasmHelper.simulateReturn(emuHelper.emulator, -1)
diff --git a/Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.html b/Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.html
index 83ecc4e3ffc5..ec997c4e5ec8 100644
--- a/Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.html
+++ b/Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.html
@@ -63,6 +63,14 @@ from ghidra.util.task import ConsoleTaskMonitor
 monitor = ConsoleTaskMonitor()
 WasmLoader.loadDataToMemory(currentProgram, WasmAnalysis.getState(currentProgram).module, 5, 0, 0x1000, monitor)
 </code></pre>
+<h2>Emulation</h2>
+<p>This module supports emulation of Wasm code using the standard Ghidra emulation
+framework, i.e. via <code>EmulatorHelper</code>, <code>Emulator</code> and <code>Emulate</code>.</p>
+<p>Stack frames for inactive function frames (locals, Wasm stack variables, and the
+return address) are stored on a shadow stack, which begins at the <code>ss0</code> register
+and grows towards higher addresses in the register space.</p>
+<p>The <code>emulate_writev.py</code> script demonstrates emulation with hooking of the
+Emscripten <code>__syscall3</code> function in order to process <code>writev</code> calls.</p>
 <h2>Limitations and Known Bugs</h2>
 <ul>
 <li>Currently, inlining functions (via marking them "In Line") is not supported
diff --git a/Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.md b/Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.md
index 84e447a33079..49935bfb0eec 100644
--- a/Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.md
+++ b/Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.md
@@ -53,6 +53,18 @@ monitor = ConsoleTaskMonitor()
 WasmLoader.loadDataToMemory(currentProgram, WasmAnalysis.getState(currentProgram).module, 5, 0, 0x1000, monitor)
 ```
 
+## Emulation
+
+This module supports emulation of Wasm code using the standard Ghidra emulation
+framework, i.e. via `EmulatorHelper`, `Emulator` and `Emulate`.
+
+Stack frames for inactive function frames (locals, Wasm stack variables, and the
+return address) are stored on a shadow stack, which begins at the `ss0` register
+and grows towards higher addresses in the register space.
+
+The `emulate_writev.py` script demonstrates emulation with hooking of the
+Emscripten `__syscall3` function in order to process `writev` calls.
+
 ## Limitations and Known Bugs
 
 - Currently, inlining functions (via marking them "In Line") is not supported
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/ghidra/program/emulation/WasmEmulateInstructionStateModifier.java b/Ghidra/Processors/WebAssembly/src/main/java/ghidra/program/emulation/WasmEmulateInstructionStateModifier.java
new file mode 100644
index 000000000000..7084b122a5ad
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/ghidra/program/emulation/WasmEmulateInstructionStateModifier.java
@@ -0,0 +1,296 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.program.emulation;
+
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.List;
+
+import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.ByteProvider;
+import ghidra.app.util.bin.ByteProviderWrapper;
+import ghidra.app.util.bin.MemBufferByteProvider;
+import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.pcode.emulate.Emulate;
+import ghidra.pcode.emulate.EmulateInstructionStateModifier;
+import ghidra.pcode.emulate.EmulateMemoryStateBuffer;
+import ghidra.pcode.emulate.callother.OpBehaviorOther;
+import ghidra.pcode.error.LowlevelError;
+import ghidra.pcode.memstate.MemoryState;
+import ghidra.program.model.address.Address;
+import ghidra.program.model.address.AddressFactory;
+import ghidra.program.model.address.AddressSpace;
+import ghidra.program.model.lang.Register;
+import ghidra.program.model.lang.RegisterValue;
+import ghidra.program.model.pcode.PcodeOp;
+import ghidra.program.model.pcode.Varnode;
+import wasm.WasmLoader;
+import wasm.analysis.WasmAnalysis;
+import wasm.analysis.WasmFuncSignature;
+import wasm.analysis.WasmFunctionAnalysis;
+import wasm.analysis.WasmFunctionAnalysis.StackEffect;
+import wasm.format.WasmHeader;
+import wasm.format.WasmModule;
+
+public class WasmEmulateInstructionStateModifier extends EmulateInstructionStateModifier {
+
+	private static class WasmFunctionAnalysisProvider {
+		private AddressSpace codeSpace;
+		private WasmModule module;
+		private WasmAnalysis analysis;
+		private long[] functionAddresses;
+
+		public WasmFunctionAnalysisProvider(AddressFactory addressFactory, MemoryState memoryState) {
+			Address moduleAddress = WasmLoader.getModuleAddress(addressFactory);
+			codeSpace = moduleAddress.getAddressSpace();
+			ByteProvider byteProvider = new MemBufferByteProvider(new EmulateMemoryStateBuffer(memoryState, moduleAddress));
+
+			// Since we don't have a Program context, we have to re-analyze the Wasm module
+			// from the memory contents.
+			try {
+				// XXX Nasty hack to retrieve the length of the Wasm module. Assumes that the
+				// memory following the module will be uninitialized, or set to zero.
+				BinaryReader reader = new BinaryReader(byteProvider, true);
+				new WasmHeader(reader);
+				long moduleSize;
+				while (true) {
+					moduleSize = reader.getPointerIndex();
+					int id = reader.readNextUnsignedByte();
+					LEB128 contentLength = LEB128.readUnsignedValue(reader);
+					reader.setPointerIndex(reader.getPointerIndex() + contentLength.asLong());
+					// A custom section (id 0) must have a name, so a zero-length custom section
+					// is invalid. This happens if we have two consecutive null bytes, which
+					// suggests that we're at the end of the module.
+					if (id == 0 && contentLength.asLong() == 0) {
+						break;
+					}
+				}
+
+				reader = new BinaryReader(new ByteProviderWrapper(byteProvider, 0, moduleSize), true);
+				module = new WasmModule(reader);
+			} catch (IOException e) {
+				throw new LowlevelError("Unable to parse Wasm module", e);
+			}
+
+			analysis = new WasmAnalysis(addressFactory, module);
+			List<WasmFuncSignature> functions = analysis.getFunctions();
+			functionAddresses = new long[functions.size()];
+			for (int i = 0; i < functions.size(); i++) {
+				functionAddresses[i] = functions.get(i).getStartAddr().getOffset();
+			}
+			Arrays.sort(functionAddresses);
+		}
+
+		public WasmFunctionAnalysis getAnalysisForAddress(Address address) {
+			if (address.getAddressSpace() != codeSpace) {
+				return null;
+			}
+
+			int index = Arrays.binarySearch(functionAddresses, address.getOffset());
+			if (index < 0) {
+				/* No exact match, so the index is the negative of the insertion point */
+				index = -index - 2;
+			}
+			if (index < 0 || index >= functionAddresses.length) {
+				return null;
+			}
+			try {
+				return analysis.getFunctionAnalysis(codeSpace.getAddress(functionAddresses[index]));
+			} catch (IOException e) {
+				throw new LowlevelError("Unable to analyze Wasm function", e);
+			}
+		}
+	}
+
+	private WasmFunctionAnalysisProvider analysisProvider;
+	private WasmFunctionAnalysis prevAnalysis;
+	private Register contextRegister;
+	private long localsBase;
+	private WasmEmulationHelper helper;
+
+	public WasmEmulateInstructionStateModifier(Emulate emu) {
+		super(emu);
+
+		contextRegister = emu.getLanguage().getContextBaseRegister();
+		helper = new WasmEmulationHelper(emu.getLanguage());
+		localsBase = emu.getLanguage().getRegister("l0").getOffset();
+
+		registerPcodeOpBehavior("popCallOther", new PopOpBehaviour());
+		registerPcodeOpBehavior("pushCallOther", new PushOpBehaviour());
+		registerPcodeOpBehavior("callPrologueCallOther", new CallPrologueOpBehaviour());
+		registerPcodeOpBehavior("callEpilogueCallOther", new CallEpilogueOpBehaviour());
+	}
+
+	private WasmFunctionAnalysis getAnalysis(Address address) {
+		// Optimization: cache the analysis for the current function, so we only need to
+		// search if the function changes
+		if (prevAnalysis != null) {
+			WasmFuncSignature func = prevAnalysis.getSignature();
+			if (address.compareTo(func.getStartAddr()) >= 0 && address.compareTo(func.getEndAddr()) <= 0) {
+				return prevAnalysis;
+			}
+		}
+		WasmFunctionAnalysis analysis = analysisProvider.getAnalysisForAddress(address);
+		if (analysis == null) {
+			return null;
+		}
+		prevAnalysis = analysis;
+		return analysis;
+	}
+
+	private class PopOpBehaviour implements OpBehaviorOther {
+		@Override
+		public void evaluate(Emulate emu, Varnode out, Varnode[] inputs) {
+			// Pop operands from stack to a register block
+			if (inputs.length != 2) {
+				throw new LowlevelError("popCallOther requires one input");
+			}
+
+			long baseOffset = inputs[1].getOffset();
+
+			WasmFunctionAnalysis funcAnalysis = getAnalysis(emu.getExecuteAddress());
+			if (funcAnalysis == null) {
+				throw new LowlevelError("Unable to find Wasm function analysis for address " +
+						emu.getExecuteAddress());
+			}
+			StackEffect stackEffect = funcAnalysis.getStackEffect(emu.getExecuteAddress());
+			if (stackEffect == null) {
+				return;
+			}
+
+			long stackOffset = helper.getStackOffset(stackEffect.getPopHeight());
+			int count = stackEffect.getToPop().length;
+			helper.copyRegisters(emu.getMemoryState(), stackOffset, baseOffset, count);
+		}
+	}
+
+	private class PushOpBehaviour implements OpBehaviorOther {
+		@Override
+		public void evaluate(Emulate emu, Varnode out, Varnode[] inputs) {
+			// Push operands from one register block to stack
+			if (inputs.length != 2) {
+				throw new LowlevelError("pushCallOther requires one input");
+			}
+
+			long baseOffset = inputs[1].getOffset();
+
+			WasmFunctionAnalysis funcAnalysis = getAnalysis(emu.getExecuteAddress());
+			if (funcAnalysis == null) {
+				throw new LowlevelError("Unable to find Wasm function analysis for address " +
+						emu.getExecuteAddress());
+			}
+			StackEffect stackEffect = funcAnalysis.getStackEffect(emu.getExecuteAddress());
+			if (stackEffect == null) {
+				return;
+			}
+
+			long stackOffset = helper.getStackOffset(stackEffect.getPushHeight());
+			int count = stackEffect.getToPush().length;
+			helper.copyRegisters(emu.getMemoryState(), baseOffset, stackOffset, count);
+		}
+	}
+
+	private class CallPrologueOpBehaviour implements OpBehaviorOther {
+		@Override
+		public void evaluate(Emulate emu, Varnode out, Varnode[] inputs) {
+			MemoryState memState = emu.getMemoryState();
+
+			// Push locals onto shadow stack
+			WasmFunctionAnalysis funcAnalysis = getAnalysis(emu.getExecuteAddress());
+			if (funcAnalysis == null) {
+				throw new LowlevelError("Unable to find Wasm function analysis for address " +
+						emu.getExecuteAddress());
+			}
+			helper.pushShadowStackRegs(memState, localsBase, funcAnalysis.getSignature().getLocals().length);
+
+			// Pop params into locals
+			StackEffect stackEffect = funcAnalysis.getStackEffect(emu.getExecuteAddress());
+			if (stackEffect == null) {
+				throw new LowlevelError("Unable to find stack effect for function at " + emu.getExecuteAddress());
+			}
+
+			long stackOffset = helper.getStackOffset(stackEffect.getPopHeight());
+			int count = stackEffect.getToPop().length;
+			helper.copyRegisters(memState, stackOffset, localsBase, count);
+
+			// Push stack onto shadow stack
+			helper.pushShadowStackRegs(memState, helper.getStackOffset(0), stackEffect.getPopHeight());
+
+			// Push LR to shadow stack
+			helper.pushShadowStackLR(memState);
+		}
+	}
+
+	private class CallEpilogueOpBehaviour implements OpBehaviorOther {
+		@Override
+		public void evaluate(Emulate emu, Varnode out, Varnode[] inputs) {
+			MemoryState memState = emu.getMemoryState();
+			if (inputs.length != 2) {
+				throw new LowlevelError("callEpilogueCallOther requires one input");
+			}
+
+			long baseOffset = inputs[1].getOffset();
+
+			// Pop LR from shadow stack
+			helper.popShadowStackLR(memState);
+
+			// Pop outputs into o* registers
+			WasmFunctionAnalysis funcAnalysis = getAnalysis(emu.getExecuteAddress());
+			StackEffect stackEffect = funcAnalysis.getStackEffect(emu.getExecuteAddress());
+			if (stackEffect == null) {
+				throw new LowlevelError("Unable to find stack effect for function at " + emu.getExecuteAddress());
+			}
+
+			long stackOffset = helper.getStackOffset(stackEffect.getPopHeight());
+			int count = stackEffect.getToPop().length;
+			helper.copyRegisters(memState, stackOffset, baseOffset, count);
+
+			// Pop stack from shadow stack
+			int stackHeight = helper.popShadowStackRegs(memState, helper.getStackOffset(0));
+
+			// Push outputs onto stack
+			helper.copyRegisters(memState, baseOffset, helper.getStackOffset(stackHeight), count);
+
+			// Pop locals from shadow stack
+			helper.popShadowStackRegs(memState, localsBase);
+		}
+	}
+
+	@Override
+	public void initialExecuteCallback(Emulate emulate, Address current_address, RegisterValue contextRegisterValue) throws LowlevelError {
+		if (analysisProvider == null) {
+			analysisProvider = new WasmFunctionAnalysisProvider(emulate.getLanguage().getAddressFactory(), emulate.getMemoryState());
+		}
+
+		// Set initial context value
+		WasmFunctionAnalysis funcAnalysis = getAnalysis(current_address);
+		if (funcAnalysis != null) {
+			emulate.setContextRegisterValue(new RegisterValue(contextRegister, funcAnalysis.getContext(current_address)));
+		}
+
+		// Set SSP register if not set
+		helper.setInitialSSP(emulate.getMemoryState());
+	}
+
+	@Override
+	public void postExecuteCallback(Emulate emulate, Address lastExecuteAddress, PcodeOp[] lastExecutePcode, int lastPcodeIndex, Address currentAddress) throws LowlevelError {
+		// Set updated context value
+		WasmFunctionAnalysis funcAnalysis = getAnalysis(currentAddress);
+		if (funcAnalysis != null) {
+			emulate.setContextRegisterValue(new RegisterValue(contextRegister, funcAnalysis.getContext(currentAddress)));
+		}
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/ghidra/program/emulation/WasmEmulationHelper.java b/Ghidra/Processors/WebAssembly/src/main/java/ghidra/program/emulation/WasmEmulationHelper.java
new file mode 100644
index 000000000000..fdb959878c06
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/ghidra/program/emulation/WasmEmulationHelper.java
@@ -0,0 +1,135 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.program.emulation;
+
+import ghidra.app.emulator.Emulator;
+import ghidra.pcode.memstate.MemoryState;
+import ghidra.program.model.address.AddressSpace;
+import ghidra.program.model.lang.Language;
+import ghidra.program.model.lang.Register;
+import wasm.WasmLoader;
+
+/** Class to manage Wasm stack and shadow stack semantics for emulation. */
+public class WasmEmulationHelper {
+    /*
+     * The shadow stack grows towards higher addresses. Each saved frame is
+     * structured as follows:
+     * 
+     * [l0, l1, ..., lL-2, lL-1] [L] [s0, s1, ..., sS-2, sS-1] [S] [LR]
+     */
+    private AddressSpace regSpace;
+    private long stackBase;
+    private long localsBase;
+    private Register sspRegister;
+    private Register lrRegister;
+    private Language language;
+
+    public WasmEmulationHelper(Language language) {
+        this.language = language;
+        sspRegister = language.getRegister("SSP");
+        lrRegister = language.getRegister("LR");
+        regSpace = language.getAddressFactory().getAddressSpace("register");
+        stackBase = language.getRegister("s0").getOffset();
+        localsBase = language.getRegister("l0").getOffset();
+    }
+
+    /**
+     * Simulate a return from a function. This can be useful for e.g. simulating
+     * imported functions.
+     * 
+     * @param emulate
+     *            the emulation context
+     * @param outputs
+     *            the function outputs to push onto the caller's stack. The number
+     *            of outputs must match the function signature.
+     */
+    public void simulateReturn(Emulator emulator, long... outputs) {
+        MemoryState memState = emulator.getMemState();
+
+        // Pop LR from shadow stack
+        popShadowStackLR(memState);
+
+        // Pop shadow stack into stack
+        int stackHeight = popShadowStackRegs(memState, getStackOffset(0));
+
+        // Push outputs onto stack
+        for (int i = 0; i < outputs.length; i++) {
+            memState.setValue(regSpace, getStackOffset(stackHeight + i), 8, outputs[i]);
+        }
+
+        // Pop shadow locals into locals
+        popShadowStackRegs(memState, localsBase);
+
+        // Return to caller
+        long lr = memState.getValue(lrRegister);
+        memState.setValue(emulator.getPCRegisterName(), lr);
+        emulator.setExecuteAddress(lr);
+    }
+
+    /** Get offset of stack register by index */
+    public long getStackOffset(int count) {
+        return stackBase + count * WasmLoader.REG_SIZE;
+    }
+
+    public void copyRegisters(MemoryState memState, long sourceOffset, long destOffset, int count) {
+        byte[] data = new byte[count * WasmLoader.REG_SIZE];
+        memState.getChunk(data, regSpace, sourceOffset, data.length, false);
+        memState.setChunk(data, regSpace, destOffset, data.length);
+    }
+
+    public void pushShadowStackRegs(MemoryState memState, long sourceOffset, int count) {
+        long sspVal = memState.getValue(sspRegister);
+        memState.setValue(sspRegister, sspVal + WasmLoader.REG_SIZE * (count + 1));
+
+        byte[] data = new byte[count * WasmLoader.REG_SIZE];
+        memState.getChunk(data, regSpace, sourceOffset, data.length, false);
+        memState.setChunk(data, regSpace, sspVal, data.length);
+        memState.setValue(regSpace, sspVal + data.length, 4, count);
+    }
+
+    public int popShadowStackRegs(MemoryState memState, long destOffset) {
+        long sspVal = memState.getValue(sspRegister);
+        int count = (int) memState.getValue(regSpace, sspVal - WasmLoader.REG_SIZE, 4);
+        sspVal -= WasmLoader.REG_SIZE * (count + 1);
+        memState.setValue(sspRegister, sspVal);
+
+        byte[] data = new byte[count * WasmLoader.REG_SIZE];
+        memState.getChunk(data, regSpace, sspVal, data.length, false);
+        memState.setChunk(data, regSpace, destOffset, data.length);
+        return count;
+    }
+
+    public void pushShadowStackLR(MemoryState memState) {
+        long sspVal = memState.getValue(sspRegister);
+        memState.setValue(sspRegister, sspVal + WasmLoader.REG_SIZE);
+        long lrVal = memState.getValue(lrRegister);
+        memState.setValue(regSpace, sspVal, lrRegister.getNumBytes(), lrVal);
+    }
+
+    public void popShadowStackLR(MemoryState memState) {
+        long sspVal = memState.getValue(sspRegister) - WasmLoader.REG_SIZE;
+        memState.setValue(sspRegister, sspVal);
+        long lrVal = memState.getValue(regSpace, sspVal, lrRegister.getNumBytes());
+        memState.setValue(lrRegister, lrVal);
+    }
+
+    public void setInitialSSP(MemoryState memState) {
+        long value = memState.getValue(sspRegister);
+        if (value == 0) {
+            memState.setValue(sspRegister, language.getRegister("ss0").getOffset());
+        }
+    }
+}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
index e8f986c5a498..b830f7da9596 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
@@ -105,6 +105,10 @@ public class WasmFunctionAnalysis {
 			contextValues.put(address, contextValues.get(address).or(BigInteger.valueOf(value).shiftLeft(reg.getShift())));
 		}
 
+		public BigInteger getContext(Address address) {
+			return contextValues.get(address);
+		}
+
 		public void commitContext(Program program) {
 			ProgramContext context = program.getProgramContext();
 			Register contextRegister = context.getBaseContextRegister();
@@ -1081,6 +1085,10 @@ public class WasmFunctionAnalysis {
 		}
 	}
 
+	public BigInteger getContext(Address address) {
+		return contextreg.getContext(address);
+	}
+
 	public void applyContext(Program program, int cStackGlobal) {
 		for (Map.Entry<Address, Long> entry : globalGetSets.entrySet()) {
 			if (entry.getValue() == cStackGlobal) {
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeInjectLibraryWasm.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeInjectLibraryWasm.java
index 3be207808c24..bad93c6ad9b4 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeInjectLibraryWasm.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeInjectLibraryWasm.java
@@ -41,6 +41,8 @@ public class PcodeInjectLibraryWasm extends PcodeInjectLibrary {
 		} else if (tp == InjectPayload.CALLOTHERFIXUP_TYPE) {
 			switch (name) {
 			case "popCallOther":
+			case "callEpilogueCallOther":
+			case "callPrologueCallOther":
 				return new InjectPayloadWasmPop(sourceName);
 			case "pushCallOther":
 				return new InjectPayloadWasmPush(sourceName);
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeOpEmitter.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeOpEmitter.java
index 12afd7bd95f9..4de4cbf0625d 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeOpEmitter.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/pcode/PcodeOpEmitter.java
@@ -51,7 +51,7 @@ public class PcodeOpEmitter {
 
 	private Varnode getRegister(String name) {
 		Register register = language.getRegister(name);
-		return new Varnode(register.getAddress(), register.getBitLength() / 8);
+		return new Varnode(register.getAddress(), register.getNumBytes());
 	}
 
 	public void emitNop() {
-- 
2.41.0


From 1b3833d26201998463d69d3b0029c03ae99c064d Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Tue, 29 Mar 2022 22:00:03 -0700
Subject: [PATCH 08/25] WebAssembly: correctly handle u32 opcodes.

0xFC (and 0xFD) have a u32 as the second operand, so we need to handle this
correctly.
---
 .../WebAssembly/certification.manifest        |    3 +
 .../WebAssembly/data/languages/BasicOps.sinc  |   16 +-
 .../data/languages/Leb128_opc2.sinc           | 1152 +++++++++++++++++
 .../data/languages/Leb128_opc2_1b.sinc        |    5 +
 .../data/languages/Leb128_opc2_2b.sinc        |    4 +
 .../data/languages/WebAssembly.sinc           |   45 +-
 .../wasm/analysis/WasmFunctionAnalysis.java   |    2 +-
 7 files changed, 1200 insertions(+), 27 deletions(-)
 create mode 100644 Ghidra/Processors/WebAssembly/data/languages/Leb128_opc2.sinc
 create mode 100644 Ghidra/Processors/WebAssembly/data/languages/Leb128_opc2_1b.sinc
 create mode 100644 Ghidra/Processors/WebAssembly/data/languages/Leb128_opc2_2b.sinc

diff --git a/Ghidra/Processors/WebAssembly/certification.manifest b/Ghidra/Processors/WebAssembly/certification.manifest
index d3ba62ffd652..e2f26d2e2f66 100644
--- a/Ghidra/Processors/WebAssembly/certification.manifest
+++ b/Ghidra/Processors/WebAssembly/certification.manifest
@@ -6,6 +6,9 @@ src/main/help/help/topics/WebAssembly/help.html||GHIDRA||||END|
 src/main/help/help/topics/WebAssembly/help.md||GHIDRA||||END|
 data/languages/BasicOps.sinc||GHIDRA||||END|
 data/languages/Leb128.sinc||GHIDRA||||END|
+data/languages/Leb128_opc2.sinc||GHIDRA||||END|
+data/languages/Leb128_opc2_1b.sinc||GHIDRA||||END|
+data/languages/Leb128_opc2_2b.sinc||GHIDRA||||END|
 data/languages/Leb128_u32.sinc||GHIDRA||||END|
 data/languages/WebAssembly-pos-stack.cspec||GHIDRA||||END|
 data/languages/WebAssembly.cspec||GHIDRA||||END|
diff --git a/Ghidra/Processors/WebAssembly/data/languages/BasicOps.sinc b/Ghidra/Processors/WebAssembly/data/languages/BasicOps.sinc
index ff1a7a55f124..d045218e8d3f 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/BasicOps.sinc
+++ b/Ghidra/Processors/WebAssembly/data/languages/BasicOps.sinc
@@ -487,28 +487,28 @@ storeaddr: memalign memoffset is memalign; memoffset; sp2_32 {
 }
 
 # TODO: actually handle saturation, or express semantics via pcodeop?
-:i32.trunc_sat_f32_s  is opc=0xFC; opc2=0x00; sp1_32; ctx_is_directive=0 {
+:i32.trunc_sat_f32_s  is opc=0xFC; opc2_0; sp1_32; ctx_is_directive=0 {
 	sp1_32 = trunc(sp1_32);
 }
 # TODO: Can we do an unsigned trunc?
-:i32.trunc_sat_f32_u  is opc=0xFC; opc2=0x01; sp1_32; ctx_is_directive=0 {
+:i32.trunc_sat_f32_u  is opc=0xFC; opc2_1; sp1_32; ctx_is_directive=0 {
 	sp1_32 = trunc(sp1_32);
 }
-:i32.trunc_sat_f64_s  is opc=0xFC; opc2=0x02; sp1_32; sp1_64; ctx_is_directive=0 {
+:i32.trunc_sat_f64_s  is opc=0xFC; opc2_2; sp1_32; sp1_64; ctx_is_directive=0 {
 	sp1_32 = trunc(sp1_64);
 }
-:i32.trunc_sat_f64_u  is opc=0xFC; opc2=0x03; sp1_32; sp1_64; ctx_is_directive=0 {
+:i32.trunc_sat_f64_u  is opc=0xFC; opc2_3; sp1_32; sp1_64; ctx_is_directive=0 {
 	sp1_32 = trunc(sp1_64);
 }
-:i64.trunc_sat_f32_s  is opc=0xFC; opc2=0x04; sp1_32; sp1_64; ctx_is_directive=0 {
+:i64.trunc_sat_f32_s  is opc=0xFC; opc2_4; sp1_32; sp1_64; ctx_is_directive=0 {
 	sp1_64 = trunc(sp1_32);
 }
-:i64.trunc_sat_f32_u  is opc=0xFC; opc2=0x05; sp1_32; sp1_64; ctx_is_directive=0 {
+:i64.trunc_sat_f32_u  is opc=0xFC; opc2_5; sp1_32; sp1_64; ctx_is_directive=0 {
 	sp1_64 = trunc(sp1_32);
 }
-:i64.trunc_sat_f64_s  is opc=0xFC; opc2=0x06; sp1_64; ctx_is_directive=0 {
+:i64.trunc_sat_f64_s  is opc=0xFC; opc2_6; sp1_64; ctx_is_directive=0 {
 	sp1_64 = trunc(sp1_64);
 }
-:i64.trunc_sat_f64_u  is opc=0xFC; opc2=0x07; sp1_64; ctx_is_directive=0 {
+:i64.trunc_sat_f64_u  is opc=0xFC; opc2_7; sp1_64; ctx_is_directive=0 {
 	sp1_64 = trunc(sp1_64);
 }
diff --git a/Ghidra/Processors/WebAssembly/data/languages/Leb128_opc2.sinc b/Ghidra/Processors/WebAssembly/data/languages/Leb128_opc2.sinc
new file mode 100644
index 000000000000..1b175ac00318
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/data/languages/Leb128_opc2.sinc
@@ -0,0 +1,1152 @@
+@define NAME "opc2_0"
+@define N 0
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_1"
+@define N 1
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_2"
+@define N 2
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_3"
+@define N 3
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_4"
+@define N 4
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_5"
+@define N 5
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_6"
+@define N 6
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_7"
+@define N 7
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_8"
+@define N 8
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_9"
+@define N 9
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_10"
+@define N 10
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_11"
+@define N 11
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_12"
+@define N 12
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_13"
+@define N 13
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_14"
+@define N 14
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_15"
+@define N 15
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_16"
+@define N 16
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_17"
+@define N 17
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_18"
+@define N 18
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_19"
+@define N 19
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_20"
+@define N 20
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_21"
+@define N 21
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_22"
+@define N 22
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_23"
+@define N 23
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_24"
+@define N 24
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_25"
+@define N 25
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_26"
+@define N 26
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_27"
+@define N 27
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_28"
+@define N 28
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_29"
+@define N 29
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_30"
+@define N 30
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_31"
+@define N 31
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_32"
+@define N 32
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_33"
+@define N 33
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_34"
+@define N 34
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_35"
+@define N 35
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_36"
+@define N 36
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_37"
+@define N 37
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_38"
+@define N 38
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_39"
+@define N 39
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_40"
+@define N 40
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_41"
+@define N 41
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_42"
+@define N 42
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_43"
+@define N 43
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_44"
+@define N 44
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_45"
+@define N 45
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_46"
+@define N 46
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_47"
+@define N 47
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_48"
+@define N 48
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_49"
+@define N 49
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_50"
+@define N 50
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_51"
+@define N 51
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_52"
+@define N 52
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_53"
+@define N 53
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_54"
+@define N 54
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_55"
+@define N 55
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_56"
+@define N 56
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_57"
+@define N 57
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_58"
+@define N 58
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_59"
+@define N 59
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_60"
+@define N 60
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_61"
+@define N 61
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_62"
+@define N 62
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_63"
+@define N 63
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_64"
+@define N 64
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_65"
+@define N 65
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_66"
+@define N 66
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_67"
+@define N 67
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_68"
+@define N 68
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_69"
+@define N 69
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_70"
+@define N 70
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_71"
+@define N 71
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_72"
+@define N 72
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_73"
+@define N 73
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_74"
+@define N 74
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_75"
+@define N 75
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_76"
+@define N 76
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_77"
+@define N 77
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_78"
+@define N 78
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_79"
+@define N 79
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_80"
+@define N 80
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_81"
+@define N 81
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_82"
+@define N 82
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_83"
+@define N 83
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_84"
+@define N 84
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_85"
+@define N 85
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_86"
+@define N 86
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_87"
+@define N 87
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_88"
+@define N 88
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_89"
+@define N 89
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_90"
+@define N 90
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_91"
+@define N 91
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_92"
+@define N 92
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_93"
+@define N 93
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_94"
+@define N 94
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_95"
+@define N 95
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_96"
+@define N 96
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_97"
+@define N 97
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_98"
+@define N 98
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_99"
+@define N 99
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_100"
+@define N 100
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_101"
+@define N 101
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_102"
+@define N 102
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_103"
+@define N 103
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_104"
+@define N 104
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_105"
+@define N 105
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_106"
+@define N 106
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_107"
+@define N 107
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_108"
+@define N 108
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_109"
+@define N 109
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_110"
+@define N 110
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_111"
+@define N 111
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_112"
+@define N 112
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_113"
+@define N 113
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_114"
+@define N 114
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_115"
+@define N 115
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_116"
+@define N 116
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_117"
+@define N 117
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_118"
+@define N 118
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_119"
+@define N 119
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_120"
+@define N 120
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_121"
+@define N 121
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_122"
+@define N 122
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_123"
+@define N 123
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_124"
+@define N 124
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_125"
+@define N 125
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_126"
+@define N 126
+@include "Leb128_opc2_1b.sinc"
+
+@define NAME "opc2_127"
+@define N 127
+@include "Leb128_opc2_1b.sinc"
+
+
+@define NAME "opc2_128"
+@define N0 0
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_129"
+@define N0 1
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_130"
+@define N0 2
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_131"
+@define N0 3
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_132"
+@define N0 4
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_133"
+@define N0 5
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_134"
+@define N0 6
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_135"
+@define N0 7
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_136"
+@define N0 8
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_137"
+@define N0 9
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_138"
+@define N0 10
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_139"
+@define N0 11
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_140"
+@define N0 12
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_141"
+@define N0 13
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_142"
+@define N0 14
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_143"
+@define N0 15
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_144"
+@define N0 16
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_145"
+@define N0 17
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_146"
+@define N0 18
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_147"
+@define N0 19
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_148"
+@define N0 20
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_149"
+@define N0 21
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_150"
+@define N0 22
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_151"
+@define N0 23
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_152"
+@define N0 24
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_153"
+@define N0 25
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_154"
+@define N0 26
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_155"
+@define N0 27
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_156"
+@define N0 28
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_157"
+@define N0 29
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_158"
+@define N0 30
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_159"
+@define N0 31
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_160"
+@define N0 32
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_161"
+@define N0 33
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_162"
+@define N0 34
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_163"
+@define N0 35
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_164"
+@define N0 36
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_165"
+@define N0 37
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_166"
+@define N0 38
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_167"
+@define N0 39
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_168"
+@define N0 40
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_169"
+@define N0 41
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_170"
+@define N0 42
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_171"
+@define N0 43
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_172"
+@define N0 44
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_173"
+@define N0 45
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_174"
+@define N0 46
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_175"
+@define N0 47
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_176"
+@define N0 48
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_177"
+@define N0 49
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_178"
+@define N0 50
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_179"
+@define N0 51
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_180"
+@define N0 52
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_181"
+@define N0 53
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_182"
+@define N0 54
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_183"
+@define N0 55
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_184"
+@define N0 56
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_185"
+@define N0 57
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_186"
+@define N0 58
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_187"
+@define N0 59
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_188"
+@define N0 60
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_189"
+@define N0 61
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_190"
+@define N0 62
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_191"
+@define N0 63
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_192"
+@define N0 64
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_193"
+@define N0 65
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_194"
+@define N0 66
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_195"
+@define N0 67
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_196"
+@define N0 68
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_197"
+@define N0 69
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_198"
+@define N0 70
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_199"
+@define N0 71
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_200"
+@define N0 72
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_201"
+@define N0 73
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_202"
+@define N0 74
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_203"
+@define N0 75
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_204"
+@define N0 76
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_205"
+@define N0 77
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_206"
+@define N0 78
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_207"
+@define N0 79
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_208"
+@define N0 80
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_209"
+@define N0 81
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_210"
+@define N0 82
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_211"
+@define N0 83
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_212"
+@define N0 84
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_213"
+@define N0 85
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_214"
+@define N0 86
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_215"
+@define N0 87
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_216"
+@define N0 88
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_217"
+@define N0 89
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_218"
+@define N0 90
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_219"
+@define N0 91
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_220"
+@define N0 92
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_221"
+@define N0 93
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_222"
+@define N0 94
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_223"
+@define N0 95
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_224"
+@define N0 96
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_225"
+@define N0 97
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_226"
+@define N0 98
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_227"
+@define N0 99
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_228"
+@define N0 100
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_229"
+@define N0 101
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_230"
+@define N0 102
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_231"
+@define N0 103
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_232"
+@define N0 104
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_233"
+@define N0 105
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_234"
+@define N0 106
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_235"
+@define N0 107
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_236"
+@define N0 108
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_237"
+@define N0 109
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_238"
+@define N0 110
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_239"
+@define N0 111
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_240"
+@define N0 112
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_241"
+@define N0 113
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_242"
+@define N0 114
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_243"
+@define N0 115
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_244"
+@define N0 116
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_245"
+@define N0 117
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_246"
+@define N0 118
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_247"
+@define N0 119
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_248"
+@define N0 120
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_249"
+@define N0 121
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_250"
+@define N0 122
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_251"
+@define N0 123
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_252"
+@define N0 124
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_253"
+@define N0 125
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_254"
+@define N0 126
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
+
+@define NAME "opc2_255"
+@define N0 127
+@define N1 1
+@include "Leb128_opc2_2b.sinc"
diff --git a/Ghidra/Processors/WebAssembly/data/languages/Leb128_opc2_1b.sinc b/Ghidra/Processors/WebAssembly/data/languages/Leb128_opc2_1b.sinc
new file mode 100644
index 000000000000..fc3f82c849b2
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/data/languages/Leb128_opc2_1b.sinc
@@ -0,0 +1,5 @@
+$(NAME): is topbit = 0 & v0 = $(N) {}
+$(NAME): is topbit = 1 & v0 = $(N); topbit = 0 & v1 = 0 {}
+$(NAME): is topbit = 1 & v0 = $(N); topbit = 1 & v1 = 0; topbit = 0 & v2 = 0 {}
+$(NAME): is topbit = 1 & v0 = $(N); topbit = 1 & v1 = 0; topbit = 1 & v2 = 0; topbit = 0 & v3 = 0 {}
+$(NAME): is topbit = 1 & v0 = $(N); topbit = 1 & v1 = 0; topbit = 1 & v2 = 0; topbit = 1 & v3 = 0; topbit = 0 & v4 = 0 {}
diff --git a/Ghidra/Processors/WebAssembly/data/languages/Leb128_opc2_2b.sinc b/Ghidra/Processors/WebAssembly/data/languages/Leb128_opc2_2b.sinc
new file mode 100644
index 000000000000..6f878f2023ad
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/data/languages/Leb128_opc2_2b.sinc
@@ -0,0 +1,4 @@
+$(NAME): is topbit = 1 & v0 = $(N0); topbit = 0 & v1 = $(N1) {}
+$(NAME): is topbit = 1 & v0 = $(N0); topbit = 1 & v1 = $(N1); topbit = 0 & v2 = 0 {}
+$(NAME): is topbit = 1 & v0 = $(N0); topbit = 1 & v1 = $(N1); topbit = 1 & v2 = 0; topbit = 0 & v3 = 0 {}
+$(NAME): is topbit = 1 & v0 = $(N0); topbit = 1 & v1 = $(N1); topbit = 1 & v2 = 0; topbit = 1 & v3 = 0; topbit = 0 & v4 = 0 {}
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc
index 42eaa52ffb60..42308d807ac2 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc
@@ -2,11 +2,11 @@
 
 define token opbyte (8)
 	opc = (0, 7)
-	opc2 = (0, 7)
 	valtype = (0, 7)
 	bytev = (0, 7)
 
 	topbit = (7, 7)
+	v = (0, 6)
 	v0 = (0, 6)
 	v1 = (0, 6)
 	v2 = (0, 6)
@@ -80,6 +80,8 @@ define pcodeop memory_fill;
 @define EXPORT_EXPR "export *[table]:4 dest;"
 @include "Leb128_u32.sinc"
 
+@include "Leb128_opc2.sinc"
+
 sp0_32: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 0) * $(REG_SIZE);] {
 	export *[register]:4 tmp_sp;
 }
@@ -293,16 +295,23 @@ macro select64(sp1_32, sp2_64, sp3_64) {
 
 # In the current version of Wasm, only one type index is permitted in select t*.
 # This is functionally identical to regular select.
-:select valtype is opc=0x1c; opc2=0x01; valtype; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
+valtype_32: valtype is topbit=0 & v=1; valtype {}
+valtype_32: valtype is topbit=1 & v=1; topbit=0 & v=0; valtype {}
+valtype_32: valtype is topbit=1 & v=1; topbit=1 & v=0; topbit=0 & v=0; valtype {}
+valtype_32: valtype is topbit=1 & v=1; topbit=1 & v=0; topbit=1 & v=0; topbit=0 & v=0; valtype {}
+valtype_32: valtype is topbit=1 & v=1; topbit=1 & v=0; topbit=1 & v=0; topbit=1 & v=0; topbit=0 & v=0; valtype {}
+valtype_64: valtype is topbit=0 & v=1; valtype & (bytev=0x7e | bytev=0x7c) {}
+valtype_64: valtype is topbit=1 & v=1; topbit=0 & v=0; valtype & (bytev=0x7e | bytev=0x7c) {}
+valtype_64: valtype is topbit=1 & v=1; topbit=1 & v=0; topbit=0 & v=0; valtype & (bytev=0x7e | bytev=0x7c) {}
+valtype_64: valtype is topbit=1 & v=1; topbit=1 & v=0; topbit=1 & v=0; topbit=0 & v=0; valtype & (bytev=0x7e | bytev=0x7c) {}
+valtype_64: valtype is topbit=1 & v=1; topbit=1 & v=0; topbit=1 & v=0; topbit=1 & v=0; topbit=0 & v=0; valtype & (bytev=0x7e | bytev=0x7c) {}
+
+:select valtype_32 is opc=0x1c; valtype_32; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
 	# i32, f32, funcref, externref
 	select32(sp1_32, sp2_32, sp3_32);
 }
-:select 0x7e is opc=0x1c; opc2=0x01; valtype=0x7e; sp1_32; sp2_64; sp3_64; ctx_is_directive=0 {
-	# i64
-	select64(sp1_32, sp2_64, sp3_64);
-}
-:select 0x7c is opc=0x1c; opc2=0x01; valtype=0x7c; sp1_32; sp2_64; sp3_64; ctx_is_directive=0 {
-	# f64
+:select valtype_64 is opc=0x1c; valtype_64; sp1_32; sp2_64; sp3_64; ctx_is_directive=0 {
+	# i64, f64
 	select64(sp1_32, sp2_64, sp3_64);
 }
 
@@ -359,27 +368,27 @@ macro select64(sp1_32, sp2_64, sp3_64) {
 	*[table] addr = sp1_32;
 }
 
-:table.init elemidx tableidx is opc=0xfc; opc2=0x0c; elemidx; tableidx; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
+:table.init elemidx tableidx is opc=0xfc; opc2_12; elemidx; tableidx; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
 	table_init(elemidx:4, tableidx:4, sp1_32, sp2_32, sp3_32);
 }
 
-:elem.drop elemidx is opc=0xfc; opc2=0x0d; elemidx; ctx_is_directive=0 {
+:elem.drop elemidx is opc=0xfc; opc2_13; elemidx; ctx_is_directive=0 {
 	elem_drop(elemidx:4);
 }
 
-:table.copy tableidx tableidx2 is opc=0xfc; opc2=0x0e; tableidx; tableidx2; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
+:table.copy tableidx tableidx2 is opc=0xfc; opc2_14; tableidx; tableidx2; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
 	table_copy(tableidx:4, tableidx2:4, sp1_32, sp2_32, sp3_32);
 }
 
-:table.grow tableidx is opc=0xfc; opc2=0x0f; tableidx; sp1_32; ctx_is_directive=0 {
+:table.grow tableidx is opc=0xfc; opc2_15; tableidx; sp1_32; ctx_is_directive=0 {
 	sp1_32 = table_grow(tableidx:4, sp1_32);
 }
 
-:table.size tableidx is opc=0xfc; opc2=0x10; tableidx; sp0_32; ctx_is_directive=0 {
+:table.size tableidx is opc=0xfc; opc2_16; tableidx; sp0_32; ctx_is_directive=0 {
 	sp0_32 = table_size(tableidx:4);
 }
 
-:table.fill tableidx is opc=0xfc; opc2=0x11; tableidx; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
+:table.fill tableidx is opc=0xfc; opc2_17; tableidx; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
 	table_fill(tableidx:4, sp1_32, sp2_32, sp3_32);
 }
 
@@ -393,19 +402,19 @@ macro select64(sp1_32, sp2_64, sp3_64) {
 	sp1_32 = memory_grow(memidx:4, sp1_32);
 }
 
-:memory.init dataidx memidx is opc=0xfc; opc2=0x08; dataidx; memidx; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
+:memory.init dataidx memidx is opc=0xfc; opc2_8; dataidx; memidx; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
 	memory_init(dataidx, memidx:4, sp1_32, sp2_32, sp3_32);
 }
 
-:data.drop dataidx is opc=0xfc; opc2=0x09; dataidx; ctx_is_directive=0 {
+:data.drop dataidx is opc=0xfc; opc2_9; dataidx; ctx_is_directive=0 {
 	data_drop(dataidx);
 }
 
-:memory.copy memidx memidx2 is opc=0xfc; opc2=0x0a; memidx; memidx2; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
+:memory.copy memidx memidx2 is opc=0xfc; opc2_10; memidx; memidx2; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
 	memory_copy(memidx:4, memidx2:4, sp1_32, sp2_32, sp3_32);
 }
 
-:memory.fill memidx is opc=0xfc; opc2=0x0b; memidx; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
+:memory.fill memidx is opc=0xfc; opc2_11; memidx; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
 	memory_fill(memidx:4, sp1_32, sp2_32, sp3_32);
 }
 
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
index b830f7da9596..0388a9010de3 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
@@ -965,7 +965,7 @@ public class WasmFunctionAnalysis {
 			break;
 		}
 		case 0xFC: {
-			int opcode2 = reader.readNextUnsignedByte();
+			int opcode2 = LEB128.readAsUInt32(reader);
 			switch (opcode2) {
 			case 0x00: /* i32.trunc_sat_f32_s */
 			case 0x01: /* i32.trunc_sat_f32_u */
-- 
2.41.0


From cd20d26825bc4cc04508bf3ad423409ffb90ea39 Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Wed, 30 Mar 2022 01:33:40 -0700
Subject: [PATCH 09/25] WebAssembly: SIMD support.

Disassembly and verification are implemented, but almost all of the SIMD opcodes
are just stubbed out with pcodeops for now, so semantics aren't implemented. This
is probably good enough for now.
---
 .../WebAssembly/certification.manifest        |    1 +
 .../WebAssembly/data/languages/VectorOps.sinc | 1493 +++++++++++++++++
 .../data/languages/WebAssembly.sinc           |   87 +-
 .../data/languages/WebAssembly.slaspec        |   10 +-
 .../wasm/analysis/WasmFunctionAnalysis.java   |  460 ++++-
 .../src/main/java/wasm/format/WasmEnums.java  |    7 +
 .../structures/ConstantExpression.java        |   17 +
 7 files changed, 2033 insertions(+), 42 deletions(-)
 create mode 100644 Ghidra/Processors/WebAssembly/data/languages/VectorOps.sinc

diff --git a/Ghidra/Processors/WebAssembly/certification.manifest b/Ghidra/Processors/WebAssembly/certification.manifest
index e2f26d2e2f66..3ddae21c5ee2 100644
--- a/Ghidra/Processors/WebAssembly/certification.manifest
+++ b/Ghidra/Processors/WebAssembly/certification.manifest
@@ -10,6 +10,7 @@ data/languages/Leb128_opc2.sinc||GHIDRA||||END|
 data/languages/Leb128_opc2_1b.sinc||GHIDRA||||END|
 data/languages/Leb128_opc2_2b.sinc||GHIDRA||||END|
 data/languages/Leb128_u32.sinc||GHIDRA||||END|
+data/languages/VectorOps.sinc||GHIDRA||||END|
 data/languages/WebAssembly-pos-stack.cspec||GHIDRA||||END|
 data/languages/WebAssembly.cspec||GHIDRA||||END|
 data/languages/WebAssembly.dwarf||GHIDRA||||END|
diff --git a/Ghidra/Processors/WebAssembly/data/languages/VectorOps.sinc b/Ghidra/Processors/WebAssembly/data/languages/VectorOps.sinc
new file mode 100644
index 000000000000..eb5b90848142
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/data/languages/VectorOps.sinc
@@ -0,0 +1,1493 @@
+# Ghidra only supports scalars up to 64 bits
+define token I128 (64)
+	f128_0 = (0, 63)
+	f128_1 = (0, 63)
+;
+
+loadaddr2: memalign memoffset is memalign; memoffset; sp2_32 {
+	addr:4 = memoffset:4 + sp2_32;
+	export addr;
+}
+
+laneidx: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+laneidx0: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+laneidx1: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+laneidx2: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+laneidx3: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+laneidx4: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+laneidx5: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+laneidx6: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+laneidx7: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+laneidx8: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+laneidx9: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+laneidx10: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+laneidx11: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+laneidx12: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+laneidx13: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+laneidx14: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+laneidx15: ULeb128 is ULeb128 {
+	export ULeb128;
+}
+
+## Vector instructions
+# [i32] -> [v128]
+:v128.load loadaddr is opc=0xFD; opc2_0; loadaddr; sp1_128; ctx_is_directive=0 {
+    sp1_128 = *:16 loadaddr;
+}
+
+define pcodeop v128_load8x8_s;
+# [i32] -> [v128]
+:v128.load8x8_s loadaddr is opc=0xFD; opc2_1; loadaddr; sp1_128; ctx_is_directive=0 {
+    sp1_128 = v128_load8x8_s(loadaddr);
+}
+
+define pcodeop v128_load8x8_u;
+# [i32] -> [v128]
+:v128.load8x8_u loadaddr is opc=0xFD; opc2_2; loadaddr; sp1_128; ctx_is_directive=0 {
+    sp1_128 = v128_load8x8_u(loadaddr);
+}
+
+define pcodeop v128_load16x4_s;
+# [i32] -> [v128]
+:v128.load16x4_s loadaddr is opc=0xFD; opc2_3; loadaddr; sp1_128; ctx_is_directive=0 {
+    sp1_128 = v128_load16x4_s(loadaddr);
+}
+
+define pcodeop v128_load16x4_u;
+# [i32] -> [v128]
+:v128.load16x4_u loadaddr is opc=0xFD; opc2_4; loadaddr; sp1_128; ctx_is_directive=0 {
+    sp1_128 = v128_load16x4_u(loadaddr);
+}
+
+define pcodeop v128_load32x2_s;
+# [i32] -> [v128]
+:v128.load32x2_s loadaddr is opc=0xFD; opc2_5; loadaddr; sp1_128; ctx_is_directive=0 {
+    sp1_128 = v128_load32x2_s(loadaddr);
+}
+
+define pcodeop v128_load32x2_u;
+# [i32] -> [v128]
+:v128.load32x2_u loadaddr is opc=0xFD; opc2_6; loadaddr; sp1_128; ctx_is_directive=0 {
+    sp1_128 = v128_load32x2_u(loadaddr);
+}
+
+define pcodeop v128_load8_splat;
+# [i32] -> [v128]
+:v128.load8_splat loadaddr is opc=0xFD; opc2_7; loadaddr; sp1_128; ctx_is_directive=0 {
+    sp1_128 = v128_load8_splat(loadaddr);
+}
+
+define pcodeop v128_load16_splat;
+# [i32] -> [v128]
+:v128.load16_splat loadaddr is opc=0xFD; opc2_8; loadaddr; sp1_128; ctx_is_directive=0 {
+    sp1_128 = v128_load16_splat(loadaddr);
+}
+
+define pcodeop v128_load32_splat;
+# [i32] -> [v128]
+:v128.load32_splat loadaddr is opc=0xFD; opc2_9; loadaddr; sp1_128; ctx_is_directive=0 {
+    sp1_128 = v128_load32_splat(loadaddr);
+}
+
+define pcodeop v128_load64_splat;
+# [i32] -> [v128]
+:v128.load64_splat loadaddr is opc=0xFD; opc2_10; loadaddr; sp1_128; ctx_is_directive=0 {
+    sp1_128 = v128_load64_splat(loadaddr);
+}
+
+# [i32 v128] -> []
+:v128.store storeaddr is opc=0xFD; opc2_11; storeaddr; sp1_128; ctx_is_directive=0 {
+    *:16 storeaddr = sp1_128;
+}
+
+# [] -> [v128]
+:v128.const "i64x2" f128_0 f128_1 is opc=0xFD; opc2_12; f128_0; f128_1; sp0_128; ctx_is_directive=0 {
+    sp0_128[0,64] = f128_0;
+    sp0_128[64,64] = f128_1;
+}
+
+define pcodeop i8x16_shuffle;
+# [v128 v128] -> [v128]
+:i8x16.shuffle laneidx0 laneidx1 laneidx2 laneidx3 laneidx4 laneidx5 laneidx6 laneidx7 laneidx8 laneidx9 laneidx10 laneidx11 laneidx12 laneidx13 laneidx14 laneidx15 is opc=0xFD; opc2_13; laneidx0; laneidx1; laneidx2; laneidx3; laneidx4; laneidx5; laneidx6; laneidx7; laneidx8; laneidx9; laneidx10; laneidx11; laneidx12; laneidx13; laneidx14; laneidx15; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_shuffle(laneidx0, laneidx1, laneidx2, laneidx3, laneidx4, laneidx5, laneidx6, laneidx7, laneidx8, laneidx9, laneidx10, laneidx11, laneidx12, laneidx13, laneidx14, laneidx15, sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_swizzle;
+# [v128 v128] -> [v128]
+:i8x16.swizzle is opc=0xFD; opc2_14; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_swizzle(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_splat;
+# [i32] -> [v128]
+:i8x16.splat is opc=0xFD; opc2_15; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_128 = i8x16_splat(sp1_32);
+}
+
+define pcodeop i16x8_splat;
+# [i32] -> [v128]
+:i16x8.splat is opc=0xFD; opc2_16; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_128 = i16x8_splat(sp1_32);
+}
+
+define pcodeop i32x4_splat;
+# [i32] -> [v128]
+:i32x4.splat is opc=0xFD; opc2_17; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_128 = i32x4_splat(sp1_32);
+}
+
+define pcodeop i64x2_splat;
+# [i64] -> [v128]
+:i64x2.splat is opc=0xFD; opc2_18; sp1_128; sp1_64; ctx_is_directive=0 {
+    sp1_128 = i64x2_splat(sp1_64);
+}
+
+define pcodeop f32x4_splat;
+# [f32] -> [v128]
+:f32x4.splat is opc=0xFD; opc2_19; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_128 = f32x4_splat(sp1_32);
+}
+
+define pcodeop f64x2_splat;
+# [f64] -> [v128]
+:f64x2.splat is opc=0xFD; opc2_20; sp1_128; sp1_64; ctx_is_directive=0 {
+    sp1_128 = f64x2_splat(sp1_64);
+}
+
+define pcodeop i8x16_extract_lane_s;
+# [v128] -> [i32]
+:i8x16.extract_lane_s laneidx is opc=0xFD; opc2_21; laneidx; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_32 = i8x16_extract_lane_s(laneidx, sp1_128);
+}
+
+define pcodeop i8x16_extract_lane_u;
+# [v128] -> [i32]
+:i8x16.extract_lane_u laneidx is opc=0xFD; opc2_22; laneidx; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_32 = i8x16_extract_lane_u(laneidx, sp1_128);
+}
+
+define pcodeop i8x16_replace_lane;
+# [v128 i32] -> [v128]
+:i8x16.replace_lane laneidx is opc=0xFD; opc2_23; laneidx; sp1_32; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_replace_lane(laneidx, sp1_32, sp2_128);
+}
+
+define pcodeop i16x8_extract_lane_s;
+# [v128] -> [i32]
+:i16x8.extract_lane_s laneidx is opc=0xFD; opc2_24; laneidx; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_32 = i16x8_extract_lane_s(laneidx, sp1_128);
+}
+
+define pcodeop i16x8_extract_lane_u;
+# [v128] -> [i32]
+:i16x8.extract_lane_u laneidx is opc=0xFD; opc2_25; laneidx; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_32 = i16x8_extract_lane_u(laneidx, sp1_128);
+}
+
+define pcodeop i16x8_replace_lane;
+# [v128 i32] -> [v128]
+:i16x8.replace_lane laneidx is opc=0xFD; opc2_26; laneidx; sp1_32; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_replace_lane(laneidx, sp1_32, sp2_128);
+}
+
+define pcodeop i32x4_extract_lane;
+# [v128] -> [i32]
+:i32x4.extract_lane laneidx is opc=0xFD; opc2_27; laneidx; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_32 = i32x4_extract_lane(laneidx, sp1_128);
+}
+
+define pcodeop i32x4_replace_lane;
+# [v128 i32] -> [v128]
+:i32x4.replace_lane laneidx is opc=0xFD; opc2_28; laneidx; sp1_32; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_replace_lane(laneidx, sp1_32, sp2_128);
+}
+
+define pcodeop i64x2_extract_lane;
+# [v128] -> [i64]
+:i64x2.extract_lane laneidx is opc=0xFD; opc2_29; laneidx; sp1_128; sp1_64; ctx_is_directive=0 {
+    sp1_64 = i64x2_extract_lane(laneidx, sp1_128);
+}
+
+define pcodeop i64x2_replace_lane;
+# [v128 i64] -> [v128]
+:i64x2.replace_lane laneidx is opc=0xFD; opc2_30; laneidx; sp1_64; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i64x2_replace_lane(laneidx, sp1_64, sp2_128);
+}
+
+define pcodeop f32x4_extract_lane;
+# [v128] -> [f32]
+:f32x4.extract_lane laneidx is opc=0xFD; opc2_31; laneidx; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_32 = f32x4_extract_lane(laneidx, sp1_128);
+}
+
+define pcodeop f32x4_replace_lane;
+# [v128 f32] -> [v128]
+:f32x4.replace_lane laneidx is opc=0xFD; opc2_32; laneidx; sp1_32; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f32x4_replace_lane(laneidx, sp1_32, sp2_128);
+}
+
+define pcodeop f64x2_extract_lane;
+# [v128] -> [f64]
+:f64x2.extract_lane laneidx is opc=0xFD; opc2_33; laneidx; sp1_128; sp1_64; ctx_is_directive=0 {
+    sp1_64 = f64x2_extract_lane(laneidx, sp1_128);
+}
+
+define pcodeop f64x2_replace_lane;
+# [v128 f64] -> [v128]
+:f64x2.replace_lane laneidx is opc=0xFD; opc2_34; laneidx; sp1_64; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f64x2_replace_lane(laneidx, sp1_64, sp2_128);
+}
+
+define pcodeop i8x16_eq;
+# [v128 v128] -> [v128]
+:i8x16.eq is opc=0xFD; opc2_35; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_eq(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_ne;
+# [v128 v128] -> [v128]
+:i8x16.ne is opc=0xFD; opc2_36; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_ne(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_lt_s;
+# [v128 v128] -> [v128]
+:i8x16.lt_s is opc=0xFD; opc2_37; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_lt_s(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_lt_u;
+# [v128 v128] -> [v128]
+:i8x16.lt_u is opc=0xFD; opc2_38; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_lt_u(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_gt_s;
+# [v128 v128] -> [v128]
+:i8x16.gt_s is opc=0xFD; opc2_39; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_gt_s(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_gt_u;
+# [v128 v128] -> [v128]
+:i8x16.gt_u is opc=0xFD; opc2_40; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_gt_u(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_le_s;
+# [v128 v128] -> [v128]
+:i8x16.le_s is opc=0xFD; opc2_41; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_le_s(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_le_u;
+# [v128 v128] -> [v128]
+:i8x16.le_u is opc=0xFD; opc2_42; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_le_u(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_ge_s;
+# [v128 v128] -> [v128]
+:i8x16.ge_s is opc=0xFD; opc2_43; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_ge_s(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_ge_u;
+# [v128 v128] -> [v128]
+:i8x16.ge_u is opc=0xFD; opc2_44; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_ge_u(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_eq;
+# [v128 v128] -> [v128]
+:i16x8.eq is opc=0xFD; opc2_45; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_eq(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_ne;
+# [v128 v128] -> [v128]
+:i16x8.ne is opc=0xFD; opc2_46; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_ne(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_lt_s;
+# [v128 v128] -> [v128]
+:i16x8.lt_s is opc=0xFD; opc2_47; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_lt_s(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_lt_u;
+# [v128 v128] -> [v128]
+:i16x8.lt_u is opc=0xFD; opc2_48; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_lt_u(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_gt_s;
+# [v128 v128] -> [v128]
+:i16x8.gt_s is opc=0xFD; opc2_49; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_gt_s(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_gt_u;
+# [v128 v128] -> [v128]
+:i16x8.gt_u is opc=0xFD; opc2_50; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_gt_u(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_le_s;
+# [v128 v128] -> [v128]
+:i16x8.le_s is opc=0xFD; opc2_51; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_le_s(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_le_u;
+# [v128 v128] -> [v128]
+:i16x8.le_u is opc=0xFD; opc2_52; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_le_u(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_ge_s;
+# [v128 v128] -> [v128]
+:i16x8.ge_s is opc=0xFD; opc2_53; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_ge_s(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_ge_u;
+# [v128 v128] -> [v128]
+:i16x8.ge_u is opc=0xFD; opc2_54; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_ge_u(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_eq;
+# [v128 v128] -> [v128]
+:i32x4.eq is opc=0xFD; opc2_55; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_eq(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_ne;
+# [v128 v128] -> [v128]
+:i32x4.ne is opc=0xFD; opc2_56; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_ne(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_lt_s;
+# [v128 v128] -> [v128]
+:i32x4.lt_s is opc=0xFD; opc2_57; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_lt_s(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_lt_u;
+# [v128 v128] -> [v128]
+:i32x4.lt_u is opc=0xFD; opc2_58; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_lt_u(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_gt_s;
+# [v128 v128] -> [v128]
+:i32x4.gt_s is opc=0xFD; opc2_59; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_gt_s(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_gt_u;
+# [v128 v128] -> [v128]
+:i32x4.gt_u is opc=0xFD; opc2_60; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_gt_u(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_le_s;
+# [v128 v128] -> [v128]
+:i32x4.le_s is opc=0xFD; opc2_61; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_le_s(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_le_u;
+# [v128 v128] -> [v128]
+:i32x4.le_u is opc=0xFD; opc2_62; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_le_u(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_ge_s;
+# [v128 v128] -> [v128]
+:i32x4.ge_s is opc=0xFD; opc2_63; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_ge_s(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_ge_u;
+# [v128 v128] -> [v128]
+:i32x4.ge_u is opc=0xFD; opc2_64; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_ge_u(sp1_128, sp2_128);
+}
+
+define pcodeop f32x4_eq;
+# [v128 v128] -> [v128]
+:f32x4.eq is opc=0xFD; opc2_65; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f32x4_eq(sp1_128, sp2_128);
+}
+
+define pcodeop f32x4_ne;
+# [v128 v128] -> [v128]
+:f32x4.ne is opc=0xFD; opc2_66; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f32x4_ne(sp1_128, sp2_128);
+}
+
+define pcodeop f32x4_lt;
+# [v128 v128] -> [v128]
+:f32x4.lt is opc=0xFD; opc2_67; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f32x4_lt(sp1_128, sp2_128);
+}
+
+define pcodeop f32x4_gt;
+# [v128 v128] -> [v128]
+:f32x4.gt is opc=0xFD; opc2_68; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f32x4_gt(sp1_128, sp2_128);
+}
+
+define pcodeop f32x4_le;
+# [v128 v128] -> [v128]
+:f32x4.le is opc=0xFD; opc2_69; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f32x4_le(sp1_128, sp2_128);
+}
+
+define pcodeop f32x4_ge;
+# [v128 v128] -> [v128]
+:f32x4.ge is opc=0xFD; opc2_70; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f32x4_ge(sp1_128, sp2_128);
+}
+
+define pcodeop f64x2_eq;
+# [v128 v128] -> [v128]
+:f64x2.eq is opc=0xFD; opc2_71; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f64x2_eq(sp1_128, sp2_128);
+}
+
+define pcodeop f64x2_ne;
+# [v128 v128] -> [v128]
+:f64x2.ne is opc=0xFD; opc2_72; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f64x2_ne(sp1_128, sp2_128);
+}
+
+define pcodeop f64x2_lt;
+# [v128 v128] -> [v128]
+:f64x2.lt is opc=0xFD; opc2_73; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f64x2_lt(sp1_128, sp2_128);
+}
+
+define pcodeop f64x2_gt;
+# [v128 v128] -> [v128]
+:f64x2.gt is opc=0xFD; opc2_74; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f64x2_gt(sp1_128, sp2_128);
+}
+
+define pcodeop f64x2_le;
+# [v128 v128] -> [v128]
+:f64x2.le is opc=0xFD; opc2_75; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f64x2_le(sp1_128, sp2_128);
+}
+
+define pcodeop f64x2_ge;
+# [v128 v128] -> [v128]
+:f64x2.ge is opc=0xFD; opc2_76; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f64x2_ge(sp1_128, sp2_128);
+}
+
+define pcodeop v128_not;
+# [v128] -> [v128]
+:v128.not is opc=0xFD; opc2_77; sp1_128; ctx_is_directive=0 {
+    sp1_128 = v128_not(sp1_128);
+}
+
+define pcodeop v128_and;
+# [v128 v128] -> [v128]
+:v128.and is opc=0xFD; opc2_78; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = v128_and(sp1_128, sp2_128);
+}
+
+define pcodeop v128_andnot;
+# [v128 v128] -> [v128]
+:v128.andnot is opc=0xFD; opc2_79; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = v128_andnot(sp1_128, sp2_128);
+}
+
+define pcodeop v128_or;
+# [v128 v128] -> [v128]
+:v128.or is opc=0xFD; opc2_80; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = v128_or(sp1_128, sp2_128);
+}
+
+define pcodeop v128_xor;
+# [v128 v128] -> [v128]
+:v128.xor is opc=0xFD; opc2_81; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = v128_xor(sp1_128, sp2_128);
+}
+
+define pcodeop v128_bitselect;
+# [v128 v128 v128] -> [v128]
+:v128.bitselect is opc=0xFD; opc2_82; sp1_128; sp2_128; sp3_128; ctx_is_directive=0 {
+    sp3_128 = v128_bitselect(sp1_128, sp2_128, sp3_128);
+}
+
+define pcodeop v128_any_true;
+# [v128] -> [i32]
+:v128.any_true is opc=0xFD; opc2_83; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_32 = v128_any_true(sp1_128);
+}
+
+define pcodeop v128_load8_lane;
+# [i32 v128] -> [v128]
+:v128.load8_lane loadaddr2 laneidx is opc=0xFD; opc2_84; loadaddr2; laneidx; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = v128_load8_lane(loadaddr2, laneidx, sp1_128);
+}
+
+define pcodeop v128_load16_lane;
+# [i32 v128] -> [v128]
+:v128.load16_lane loadaddr2 laneidx is opc=0xFD; opc2_85; loadaddr2; laneidx; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = v128_load16_lane(loadaddr2, laneidx, sp1_128);
+}
+
+define pcodeop v128_load32_lane;
+# [i32 v128] -> [v128]
+:v128.load32_lane loadaddr2 laneidx is opc=0xFD; opc2_86; loadaddr2; laneidx; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = v128_load32_lane(loadaddr2, laneidx, sp1_128);
+}
+
+define pcodeop v128_load64_lane;
+# [i32 v128] -> [v128]
+:v128.load64_lane loadaddr2 laneidx is opc=0xFD; opc2_87; loadaddr2; laneidx; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = v128_load64_lane(loadaddr2, laneidx, sp1_128);
+}
+
+define pcodeop v128_store8_lane;
+# [i32 v128] -> []
+:v128.store8_lane storeaddr laneidx is opc=0xFD; opc2_88; storeaddr; laneidx; sp1_128; ctx_is_directive=0 {
+    v128_store8_lane(storeaddr, laneidx, sp1_128);
+}
+
+define pcodeop v128_store16_lane;
+# [i32 v128] -> []
+:v128.store16_lane storeaddr laneidx is opc=0xFD; opc2_89; storeaddr; laneidx; sp1_128; ctx_is_directive=0 {
+    v128_store16_lane(storeaddr, laneidx, sp1_128);
+}
+
+define pcodeop v128_store32_lane;
+# [i32 v128] -> []
+:v128.store32_lane storeaddr laneidx is opc=0xFD; opc2_90; storeaddr; laneidx; sp1_128; ctx_is_directive=0 {
+    v128_store32_lane(storeaddr, laneidx, sp1_128);
+}
+
+define pcodeop v128_store64_lane;
+# [i32 v128] -> []
+:v128.store64_lane storeaddr laneidx is opc=0xFD; opc2_91; storeaddr; laneidx; sp1_128; ctx_is_directive=0 {
+    v128_store64_lane(storeaddr, laneidx, sp1_128);
+}
+
+define pcodeop v128_load32_zero;
+# [i32] -> [v128]
+:v128.load32_zero loadaddr laneidx is opc=0xFD; opc2_92; loadaddr; laneidx; sp1_128; ctx_is_directive=0 {
+    sp1_128 = v128_load32_zero(loadaddr, laneidx);
+}
+
+define pcodeop v128_load64_zero;
+# [i32] -> [v128]
+:v128.load64_zero loadaddr laneidx is opc=0xFD; opc2_93; loadaddr; laneidx; sp1_128; ctx_is_directive=0 {
+    sp1_128 = v128_load64_zero(loadaddr, laneidx);
+}
+
+define pcodeop f32x4_demote_f64x2_zero;
+# [v128] -> [v128]
+:f32x4.demote_f64x2_zero is opc=0xFD; opc2_94; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f32x4_demote_f64x2_zero(sp1_128);
+}
+
+define pcodeop f64x2_promote_low_f32x4;
+# [v128] -> [v128]
+:f64x2.promote_low_f32x4 is opc=0xFD; opc2_95; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f64x2_promote_low_f32x4(sp1_128);
+}
+
+define pcodeop i8x16_abs;
+# [v128] -> [v128]
+:i8x16.abs is opc=0xFD; opc2_96; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i8x16_abs(sp1_128);
+}
+
+define pcodeop i8x16_neg;
+# [v128] -> [v128]
+:i8x16.neg is opc=0xFD; opc2_97; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i8x16_neg(sp1_128);
+}
+
+define pcodeop i8x16_popcnt;
+# [v128] -> [v128]
+:i8x16.popcnt is opc=0xFD; opc2_98; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i8x16_popcnt(sp1_128);
+}
+
+define pcodeop i8x16_all_true;
+# [v128] -> [i32]
+:i8x16.all_true is opc=0xFD; opc2_99; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_32 = i8x16_all_true(sp1_128);
+}
+
+define pcodeop i8x16_bitmask;
+# [v128] -> [i32]
+:i8x16.bitmask is opc=0xFD; opc2_100; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_32 = i8x16_bitmask(sp1_128);
+}
+
+define pcodeop i8x16_narrow_i16x8_s;
+# [v128 v128] -> [v128]
+:i8x16.narrow_i16x8_s is opc=0xFD; opc2_101; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_narrow_i16x8_s(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_narrow_i16x8_u;
+# [v128 v128] -> [v128]
+:i8x16.narrow_i16x8_u is opc=0xFD; opc2_102; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_narrow_i16x8_u(sp1_128, sp2_128);
+}
+
+define pcodeop f32x4_ceil;
+# [v128] -> [v128]
+:f32x4.ceil is opc=0xFD; opc2_103; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f32x4_ceil(sp1_128);
+}
+
+define pcodeop f32x4_floor;
+# [v128] -> [v128]
+:f32x4.floor is opc=0xFD; opc2_104; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f32x4_floor(sp1_128);
+}
+
+define pcodeop f32x4_trunc;
+# [v128] -> [v128]
+:f32x4.trunc is opc=0xFD; opc2_105; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f32x4_trunc(sp1_128);
+}
+
+define pcodeop f32x4_nearest;
+# [v128] -> [v128]
+:f32x4.nearest is opc=0xFD; opc2_106; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f32x4_nearest(sp1_128);
+}
+
+define pcodeop i8x16_shl;
+# [v128 i32] -> [v128]
+:i8x16.shl is opc=0xFD; opc2_107; sp1_32; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_shl(sp1_32, sp2_128);
+}
+
+define pcodeop i8x16_shr_s;
+# [v128 i32] -> [v128]
+:i8x16.shr_s is opc=0xFD; opc2_108; sp1_32; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_shr_s(sp1_32, sp2_128);
+}
+
+define pcodeop i8x16_shr_u;
+# [v128 i32] -> [v128]
+:i8x16.shr_u is opc=0xFD; opc2_109; sp1_32; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_shr_u(sp1_32, sp2_128);
+}
+
+define pcodeop i8x16_add;
+# [v128 v128] -> [v128]
+:i8x16.add is opc=0xFD; opc2_110; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_add(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_add_sat_s;
+# [v128 v128] -> [v128]
+:i8x16.add_sat_s is opc=0xFD; opc2_111; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_add_sat_s(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_add_sat_u;
+# [v128 v128] -> [v128]
+:i8x16.add_sat_u is opc=0xFD; opc2_112; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_add_sat_u(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_sub;
+# [v128 v128] -> [v128]
+:i8x16.sub is opc=0xFD; opc2_113; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_sub(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_sub_sat_s;
+# [v128 v128] -> [v128]
+:i8x16.sub_sat_s is opc=0xFD; opc2_114; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_sub_sat_s(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_sub_sat_u;
+# [v128 v128] -> [v128]
+:i8x16.sub_sat_u is opc=0xFD; opc2_115; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_sub_sat_u(sp1_128, sp2_128);
+}
+
+define pcodeop f64x2_ceil;
+# [v128] -> [v128]
+:f64x2.ceil is opc=0xFD; opc2_116; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f64x2_ceil(sp1_128);
+}
+
+define pcodeop f64x2_floor;
+# [v128] -> [v128]
+:f64x2.floor is opc=0xFD; opc2_117; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f64x2_floor(sp1_128);
+}
+
+define pcodeop i8x16_min_s;
+# [v128 v128] -> [v128]
+:i8x16.min_s is opc=0xFD; opc2_118; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_min_s(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_min_u;
+# [v128 v128] -> [v128]
+:i8x16.min_u is opc=0xFD; opc2_119; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_min_u(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_max_s;
+# [v128 v128] -> [v128]
+:i8x16.max_s is opc=0xFD; opc2_120; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_max_s(sp1_128, sp2_128);
+}
+
+define pcodeop i8x16_max_u;
+# [v128 v128] -> [v128]
+:i8x16.max_u is opc=0xFD; opc2_121; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_max_u(sp1_128, sp2_128);
+}
+
+define pcodeop f64x2_trunc;
+# [v128] -> [v128]
+:f64x2.trunc is opc=0xFD; opc2_122; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f64x2_trunc(sp1_128);
+}
+
+define pcodeop i8x16_avgr_u;
+# [v128 v128] -> [v128]
+:i8x16.avgr_u is opc=0xFD; opc2_123; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_avgr_u(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_extadd_pairwise_i8x16_s;
+# [v128] -> [v128]
+:i16x8.extadd_pairwise_i8x16_s is opc=0xFD; opc2_124; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i16x8_extadd_pairwise_i8x16_s(sp1_128);
+}
+
+define pcodeop i16x8_extadd_pairwise_i8x16_u;
+# [v128] -> [v128]
+:i16x8.extadd_pairwise_i8x16_u is opc=0xFD; opc2_125; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i16x8_extadd_pairwise_i8x16_u(sp1_128);
+}
+
+define pcodeop i32x4_extadd_pairwise_i16x8_s;
+# [v128] -> [v128]
+:i32x4.extadd_pairwise_i16x8_s is opc=0xFD; opc2_126; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i32x4_extadd_pairwise_i16x8_s(sp1_128);
+}
+
+define pcodeop i32x4_extadd_pairwise_i16x8_u;
+# [v128] -> [v128]
+:i32x4.extadd_pairwise_i16x8_u is opc=0xFD; opc2_127; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i32x4_extadd_pairwise_i16x8_u(sp1_128);
+}
+
+define pcodeop i16x8_abs;
+# [v128] -> [v128]
+:i16x8.abs is opc=0xFD; opc2_128; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i16x8_abs(sp1_128);
+}
+
+define pcodeop i16x8_neg;
+# [v128] -> [v128]
+:i16x8.neg is opc=0xFD; opc2_129; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i16x8_neg(sp1_128);
+}
+
+define pcodeop i16x8_q15mulr_sat_s;
+# [v128 v128] -> [v128]
+:i16x8.q15mulr_sat_s is opc=0xFD; opc2_130; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_q15mulr_sat_s(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_all_true;
+# [v128] -> [i32]
+:i16x8.all_true is opc=0xFD; opc2_131; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_32 = i16x8_all_true(sp1_128);
+}
+
+define pcodeop i16x8_bitmask;
+# [v128] -> [i32]
+:i16x8.bitmask is opc=0xFD; opc2_132; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_32 = i16x8_bitmask(sp1_128);
+}
+
+define pcodeop i16x8_narrow_i32x4_s;
+# [v128 v128] -> [v128]
+:i16x8.narrow_i32x4_s is opc=0xFD; opc2_133; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_narrow_i32x4_s(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_narrow_i32x4_u;
+# [v128 v128] -> [v128]
+:i16x8.narrow_i32x4_u is opc=0xFD; opc2_134; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_narrow_i32x4_u(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_extend_low_i8x16_s;
+# [v128] -> [v128]
+:i16x8.extend_low_i8x16_s is opc=0xFD; opc2_135; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i16x8_extend_low_i8x16_s(sp1_128);
+}
+
+define pcodeop i16x8_extend_high_i8x16_s;
+# [v128] -> [v128]
+:i16x8.extend_high_i8x16_s is opc=0xFD; opc2_136; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i16x8_extend_high_i8x16_s(sp1_128);
+}
+
+define pcodeop i16x8_extend_low_i8x16_u;
+# [v128] -> [v128]
+:i16x8.extend_low_i8x16_u is opc=0xFD; opc2_137; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i16x8_extend_low_i8x16_u(sp1_128);
+}
+
+define pcodeop i16x8_extend_high_i8x16_u;
+# [v128] -> [v128]
+:i16x8.extend_high_i8x16_u is opc=0xFD; opc2_138; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i16x8_extend_high_i8x16_u(sp1_128);
+}
+
+define pcodeop i16x8_shl;
+# [v128 i32] -> [v128]
+:i16x8.shl is opc=0xFD; opc2_139; sp1_32; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_shl(sp1_32, sp2_128);
+}
+
+define pcodeop i16x8_shr_s;
+# [v128 i32] -> [v128]
+:i16x8.shr_s is opc=0xFD; opc2_140; sp1_32; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_shr_s(sp1_32, sp2_128);
+}
+
+define pcodeop i16x8_shr_u;
+# [v128 i32] -> [v128]
+:i16x8.shr_u is opc=0xFD; opc2_141; sp1_32; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_shr_u(sp1_32, sp2_128);
+}
+
+define pcodeop i16x8_add;
+# [v128 v128] -> [v128]
+:i16x8.add is opc=0xFD; opc2_142; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_add(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_add_sat_s;
+# [v128 v128] -> [v128]
+:i16x8.add_sat_s is opc=0xFD; opc2_143; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_add_sat_s(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_add_sat_u;
+# [v128 v128] -> [v128]
+:i16x8.add_sat_u is opc=0xFD; opc2_144; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_add_sat_u(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_sub;
+# [v128 v128] -> [v128]
+:i16x8.sub is opc=0xFD; opc2_145; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_sub(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_sub_sat_s;
+# [v128 v128] -> [v128]
+:i16x8.sub_sat_s is opc=0xFD; opc2_146; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_sub_sat_s(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_sub_sat_u;
+# [v128 v128] -> [v128]
+:i16x8.sub_sat_u is opc=0xFD; opc2_147; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_sub_sat_u(sp1_128, sp2_128);
+}
+
+define pcodeop f64x2_nearest;
+# [v128] -> [v128]
+:f64x2.nearest is opc=0xFD; opc2_148; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f64x2_nearest(sp1_128);
+}
+
+define pcodeop i16x8_mul;
+# [v128 v128] -> [v128]
+:i16x8.mul is opc=0xFD; opc2_149; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_mul(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_min_s;
+# [v128 v128] -> [v128]
+:i16x8.min_s is opc=0xFD; opc2_150; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_min_s(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_min_u;
+# [v128 v128] -> [v128]
+:i16x8.min_u is opc=0xFD; opc2_151; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_min_u(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_max_s;
+# [v128 v128] -> [v128]
+:i16x8.max_s is opc=0xFD; opc2_152; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_max_s(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_max_u;
+# [v128 v128] -> [v128]
+:i16x8.max_u is opc=0xFD; opc2_153; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_max_u(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_avgr_u;
+# [v128 v128] -> [v128]
+:i16x8.avgr_u is opc=0xFD; opc2_155; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_avgr_u(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_extmul_low_i8x16_s;
+# [v128 v128] -> [v128]
+:i16x8.extmul_low_i8x16_s is opc=0xFD; opc2_156; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_extmul_low_i8x16_s(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_extmul_high_i8x16_s;
+# [v128 v128] -> [v128]
+:i16x8.extmul_high_i8x16_s is opc=0xFD; opc2_157; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_extmul_high_i8x16_s(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_extmul_low_i8x16_u;
+# [v128 v128] -> [v128]
+:i16x8.extmul_low_i8x16_u is opc=0xFD; opc2_158; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_extmul_low_i8x16_u(sp1_128, sp2_128);
+}
+
+define pcodeop i16x8_extmul_high_i8x16_u;
+# [v128 v128] -> [v128]
+:i16x8.extmul_high_i8x16_u is opc=0xFD; opc2_159; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i16x8_extmul_high_i8x16_u(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_abs;
+# [v128] -> [v128]
+:i32x4.abs is opc=0xFD; opc2_160; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i32x4_abs(sp1_128);
+}
+
+define pcodeop i32x4_neg;
+# [v128] -> [v128]
+:i32x4.neg is opc=0xFD; opc2_161; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i32x4_neg(sp1_128);
+}
+
+define pcodeop i32x4_all_true;
+# [v128] -> [i32]
+:i32x4.all_true is opc=0xFD; opc2_163; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_32 = i32x4_all_true(sp1_128);
+}
+
+define pcodeop i32x4_bitmask;
+# [v128] -> [i32]
+:i32x4.bitmask is opc=0xFD; opc2_164; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_32 = i32x4_bitmask(sp1_128);
+}
+
+define pcodeop i32x4_extend_low_i16x8_s;
+# [v128] -> [v128]
+:i32x4.extend_low_i16x8_s is opc=0xFD; opc2_167; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i32x4_extend_low_i16x8_s(sp1_128);
+}
+
+define pcodeop i32x4_extend_high_i16x8_s;
+# [v128] -> [v128]
+:i32x4.extend_high_i16x8_s is opc=0xFD; opc2_168; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i32x4_extend_high_i16x8_s(sp1_128);
+}
+
+define pcodeop i32x4_extend_low_i16x8_u;
+# [v128] -> [v128]
+:i32x4.extend_low_i16x8_u is opc=0xFD; opc2_169; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i32x4_extend_low_i16x8_u(sp1_128);
+}
+
+define pcodeop i32x4_extend_high_i16x8_u;
+# [v128] -> [v128]
+:i32x4.extend_high_i16x8_u is opc=0xFD; opc2_170; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i32x4_extend_high_i16x8_u(sp1_128);
+}
+
+define pcodeop i32x4_shl;
+# [v128 i32] -> [v128]
+:i32x4.shl is opc=0xFD; opc2_171; sp1_32; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_shl(sp1_32, sp2_128);
+}
+
+define pcodeop i32x4_shr_s;
+# [v128 i32] -> [v128]
+:i32x4.shr_s is opc=0xFD; opc2_172; sp1_32; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_shr_s(sp1_32, sp2_128);
+}
+
+define pcodeop i32x4_shr_u;
+# [v128 i32] -> [v128]
+:i32x4.shr_u is opc=0xFD; opc2_173; sp1_32; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_shr_u(sp1_32, sp2_128);
+}
+
+define pcodeop i32x4_add;
+# [v128 v128] -> [v128]
+:i32x4.add is opc=0xFD; opc2_174; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_add(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_sub;
+# [v128 v128] -> [v128]
+:i32x4.sub is opc=0xFD; opc2_177; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_sub(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_mul;
+# [v128 v128] -> [v128]
+:i32x4.mul is opc=0xFD; opc2_181; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_mul(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_min_s;
+# [v128 v128] -> [v128]
+:i32x4.min_s is opc=0xFD; opc2_182; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_min_s(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_min_u;
+# [v128 v128] -> [v128]
+:i32x4.min_u is opc=0xFD; opc2_183; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_min_u(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_max_s;
+# [v128 v128] -> [v128]
+:i32x4.max_s is opc=0xFD; opc2_184; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_max_s(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_max_u;
+# [v128 v128] -> [v128]
+:i32x4.max_u is opc=0xFD; opc2_185; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_max_u(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_dot_i16x8_s;
+# [v128 v128] -> [v128]
+:i32x4.dot_i16x8_s is opc=0xFD; opc2_186; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_dot_i16x8_s(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_extmul_low_i16x8_s;
+# [v128 v128] -> [v128]
+:i32x4.extmul_low_i16x8_s is opc=0xFD; opc2_188; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_extmul_low_i16x8_s(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_extmul_high_i16x8_s;
+# [v128 v128] -> [v128]
+:i32x4.extmul_high_i16x8_s is opc=0xFD; opc2_189; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_extmul_high_i16x8_s(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_extmul_low_i16x8_u;
+# [v128 v128] -> [v128]
+:i32x4.extmul_low_i16x8_u is opc=0xFD; opc2_190; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_extmul_low_i16x8_u(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_extmul_high_i16x8_u;
+# [v128 v128] -> [v128]
+:i32x4.extmul_high_i16x8_u is opc=0xFD; opc2_191; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i32x4_extmul_high_i16x8_u(sp1_128, sp2_128);
+}
+
+define pcodeop i64x2_abs;
+# [v128] -> [v128]
+:i64x2.abs is opc=0xFD; opc2_192; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i64x2_abs(sp1_128);
+}
+
+define pcodeop i64x2_neg;
+# [v128] -> [v128]
+:i64x2.neg is opc=0xFD; opc2_193; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i64x2_neg(sp1_128);
+}
+
+define pcodeop i64x2_all_true;
+# [v128] -> [i32]
+:i64x2.all_true is opc=0xFD; opc2_195; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_32 = i64x2_all_true(sp1_128);
+}
+
+define pcodeop i64x2_bitmask;
+# [v128] -> [i32]
+:i64x2.bitmask is opc=0xFD; opc2_196; sp1_128; sp1_32; ctx_is_directive=0 {
+    sp1_32 = i64x2_bitmask(sp1_128);
+}
+
+define pcodeop i64x2_extend_low_i32x4_s;
+# [v128] -> [v128]
+:i64x2.extend_low_i32x4_s is opc=0xFD; opc2_199; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i64x2_extend_low_i32x4_s(sp1_128);
+}
+
+define pcodeop i64x2_extend_high_i32x4_s;
+# [v128] -> [v128]
+:i64x2.extend_high_i32x4_s is opc=0xFD; opc2_200; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i64x2_extend_high_i32x4_s(sp1_128);
+}
+
+define pcodeop i64x2_extend_low_i32x4_u;
+# [v128] -> [v128]
+:i64x2.extend_low_i32x4_u is opc=0xFD; opc2_201; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i64x2_extend_low_i32x4_u(sp1_128);
+}
+
+define pcodeop i64x2_extend_high_i32x4_u;
+# [v128] -> [v128]
+:i64x2.extend_high_i32x4_u is opc=0xFD; opc2_202; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i64x2_extend_high_i32x4_u(sp1_128);
+}
+
+define pcodeop i64x2_shl;
+# [v128 i32] -> [v128]
+:i64x2.shl is opc=0xFD; opc2_203; sp1_32; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i64x2_shl(sp1_32, sp2_128);
+}
+
+define pcodeop i64x2_shr_s;
+# [v128 i32] -> [v128]
+:i64x2.shr_s is opc=0xFD; opc2_204; sp1_32; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i64x2_shr_s(sp1_32, sp2_128);
+}
+
+define pcodeop i64x2_shr_u;
+# [v128 i32] -> [v128]
+:i64x2.shr_u is opc=0xFD; opc2_205; sp1_32; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i64x2_shr_u(sp1_32, sp2_128);
+}
+
+define pcodeop i64x2_add;
+# [v128 v128] -> [v128]
+:i64x2.add is opc=0xFD; opc2_206; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i64x2_add(sp1_128, sp2_128);
+}
+
+define pcodeop i64x2_sub;
+# [v128 v128] -> [v128]
+:i64x2.sub is opc=0xFD; opc2_209; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i64x2_sub(sp1_128, sp2_128);
+}
+
+define pcodeop i64x2_mul;
+# [v128 v128] -> [v128]
+:i64x2.mul is opc=0xFD; opc2_213; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i64x2_mul(sp1_128, sp2_128);
+}
+
+define pcodeop i64x2_eq;
+# [v128 v128] -> [v128]
+:i64x2.eq is opc=0xFD; opc2_214; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i64x2_eq(sp1_128, sp2_128);
+}
+
+define pcodeop i64x2_ne;
+# [v128 v128] -> [v128]
+:i64x2.ne is opc=0xFD; opc2_215; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i64x2_ne(sp1_128, sp2_128);
+}
+
+define pcodeop i64x2_lt_s;
+# [v128 v128] -> [v128]
+:i64x2.lt_s is opc=0xFD; opc2_216; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i64x2_lt_s(sp1_128, sp2_128);
+}
+
+define pcodeop i64x2_gt_s;
+# [v128 v128] -> [v128]
+:i64x2.gt_s is opc=0xFD; opc2_217; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i64x2_gt_s(sp1_128, sp2_128);
+}
+
+define pcodeop i64x2_le_s;
+# [v128 v128] -> [v128]
+:i64x2.le_s is opc=0xFD; opc2_218; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i64x2_le_s(sp1_128, sp2_128);
+}
+
+define pcodeop i64x2_ge_s;
+# [v128 v128] -> [v128]
+:i64x2.ge_s is opc=0xFD; opc2_219; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i64x2_ge_s(sp1_128, sp2_128);
+}
+
+define pcodeop i64x2_extmul_low_i32x4_s;
+# [v128 v128] -> [v128]
+:i64x2.extmul_low_i32x4_s is opc=0xFD; opc2_220; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i64x2_extmul_low_i32x4_s(sp1_128, sp2_128);
+}
+
+define pcodeop i64x2_extmul_high_i32x4_s;
+# [v128 v128] -> [v128]
+:i64x2.extmul_high_i32x4_s is opc=0xFD; opc2_221; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i64x2_extmul_high_i32x4_s(sp1_128, sp2_128);
+}
+
+define pcodeop i64x2_extmul_low_i32x4_u;
+# [v128 v128] -> [v128]
+:i64x2.extmul_low_i32x4_u is opc=0xFD; opc2_222; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i64x2_extmul_low_i32x4_u(sp1_128, sp2_128);
+}
+
+define pcodeop i64x2_extmul_high_i32x4_u;
+# [v128 v128] -> [v128]
+:i64x2.extmul_high_i32x4_u is opc=0xFD; opc2_223; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i64x2_extmul_high_i32x4_u(sp1_128, sp2_128);
+}
+
+define pcodeop f32x4_abs;
+# [v128] -> [v128]
+:f32x4.abs is opc=0xFD; opc2_224; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f32x4_abs(sp1_128);
+}
+
+define pcodeop f32x4_neg;
+# [v128] -> [v128]
+:f32x4.neg is opc=0xFD; opc2_225; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f32x4_neg(sp1_128);
+}
+
+define pcodeop f32x4_sqrt;
+# [v128] -> [v128]
+:f32x4.sqrt is opc=0xFD; opc2_227; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f32x4_sqrt(sp1_128);
+}
+
+define pcodeop f32x4_add;
+# [v128 v128] -> [v128]
+:f32x4.add is opc=0xFD; opc2_228; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f32x4_add(sp1_128, sp2_128);
+}
+
+define pcodeop f32x4_sub;
+# [v128 v128] -> [v128]
+:f32x4.sub is opc=0xFD; opc2_229; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f32x4_sub(sp1_128, sp2_128);
+}
+
+define pcodeop f32x4_mul;
+# [v128 v128] -> [v128]
+:f32x4.mul is opc=0xFD; opc2_230; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f32x4_mul(sp1_128, sp2_128);
+}
+
+define pcodeop f32x4_div;
+# [v128 v128] -> [v128]
+:f32x4.div is opc=0xFD; opc2_231; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f32x4_div(sp1_128, sp2_128);
+}
+
+define pcodeop f32x4_min;
+# [v128 v128] -> [v128]
+:f32x4.min is opc=0xFD; opc2_232; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f32x4_min(sp1_128, sp2_128);
+}
+
+define pcodeop f32x4_max;
+# [v128 v128] -> [v128]
+:f32x4.max is opc=0xFD; opc2_233; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f32x4_max(sp1_128, sp2_128);
+}
+
+define pcodeop f32x4_pmin;
+# [v128 v128] -> [v128]
+:f32x4.pmin is opc=0xFD; opc2_234; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f32x4_pmin(sp1_128, sp2_128);
+}
+
+define pcodeop f32x4_pmax;
+# [v128 v128] -> [v128]
+:f32x4.pmax is opc=0xFD; opc2_235; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f32x4_pmax(sp1_128, sp2_128);
+}
+
+define pcodeop f64x2_abs;
+# [v128] -> [v128]
+:f64x2.abs is opc=0xFD; opc2_236; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f64x2_abs(sp1_128);
+}
+
+define pcodeop f64x2_neg;
+# [v128] -> [v128]
+:f64x2.neg is opc=0xFD; opc2_237; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f64x2_neg(sp1_128);
+}
+
+define pcodeop f64x2_sqrt;
+# [v128] -> [v128]
+:f64x2.sqrt is opc=0xFD; opc2_239; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f64x2_sqrt(sp1_128);
+}
+
+define pcodeop f64x2_add;
+# [v128 v128] -> [v128]
+:f64x2.add is opc=0xFD; opc2_240; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f64x2_add(sp1_128, sp2_128);
+}
+
+define pcodeop f64x2_sub;
+# [v128 v128] -> [v128]
+:f64x2.sub is opc=0xFD; opc2_241; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f64x2_sub(sp1_128, sp2_128);
+}
+
+define pcodeop f64x2_mul;
+# [v128 v128] -> [v128]
+:f64x2.mul is opc=0xFD; opc2_242; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f64x2_mul(sp1_128, sp2_128);
+}
+
+define pcodeop f64x2_div;
+# [v128 v128] -> [v128]
+:f64x2.div is opc=0xFD; opc2_243; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f64x2_div(sp1_128, sp2_128);
+}
+
+define pcodeop f64x2_min;
+# [v128 v128] -> [v128]
+:f64x2.min is opc=0xFD; opc2_244; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f64x2_min(sp1_128, sp2_128);
+}
+
+define pcodeop f64x2_max;
+# [v128 v128] -> [v128]
+:f64x2.max is opc=0xFD; opc2_245; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f64x2_max(sp1_128, sp2_128);
+}
+
+define pcodeop f64x2_pmin;
+# [v128 v128] -> [v128]
+:f64x2.pmin is opc=0xFD; opc2_246; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f64x2_pmin(sp1_128, sp2_128);
+}
+
+define pcodeop f64x2_pmax;
+# [v128 v128] -> [v128]
+:f64x2.pmax is opc=0xFD; opc2_247; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = f64x2_pmax(sp1_128, sp2_128);
+}
+
+define pcodeop i32x4_trunc_sat_f32x4_s;
+# [v128] -> [v128]
+:i32x4.trunc_sat_f32x4_s is opc=0xFD; opc2_248; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i32x4_trunc_sat_f32x4_s(sp1_128);
+}
+
+define pcodeop i32x4_trunc_sat_f32x4_u;
+# [v128] -> [v128]
+:i32x4.trunc_sat_f32x4_u is opc=0xFD; opc2_249; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i32x4_trunc_sat_f32x4_u(sp1_128);
+}
+
+define pcodeop f32x4_convert_i32x4_s;
+# [v128] -> [v128]
+:f32x4.convert_i32x4_s is opc=0xFD; opc2_250; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f32x4_convert_i32x4_s(sp1_128);
+}
+
+define pcodeop f32x4_convert_i32x4_u;
+# [v128] -> [v128]
+:f32x4.convert_i32x4_u is opc=0xFD; opc2_251; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f32x4_convert_i32x4_u(sp1_128);
+}
+
+define pcodeop i32x4_trunc_sat_f64x2_s_zero;
+# [v128] -> [v128]
+:i32x4.trunc_sat_f64x2_s_zero is opc=0xFD; opc2_252; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i32x4_trunc_sat_f64x2_s_zero(sp1_128);
+}
+
+define pcodeop i32x4_trunc_sat_f64x2_u_zero;
+# [v128] -> [v128]
+:i32x4.trunc_sat_f64x2_u_zero is opc=0xFD; opc2_253; sp1_128; ctx_is_directive=0 {
+    sp1_128 = i32x4_trunc_sat_f64x2_u_zero(sp1_128);
+}
+
+define pcodeop f64x2_convert_low_i32x4_s;
+# [v128] -> [v128]
+:f64x2.convert_low_i32x4_s is opc=0xFD; opc2_254; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f64x2_convert_low_i32x4_s(sp1_128);
+}
+
+define pcodeop f64x2_convert_low_i32x4_u;
+# [v128] -> [v128]
+:f64x2.convert_low_i32x4_u is opc=0xFD; opc2_255; sp1_128; ctx_is_directive=0 {
+    sp1_128 = f64x2_convert_low_i32x4_u(sp1_128);
+}
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc
index 42308d807ac2..9a9a043e6acd 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.sinc
@@ -65,6 +65,11 @@ define pcodeop memory_fill;
 @define EXPORT_EXPR "export *[register]:8 dest;"
 @include "Leb128_u32.sinc"
 
+@define SYMBOL local16
+@define DEST_EXPR "0x10000000 + 16 * "
+@define EXPORT_EXPR "export *[register]:16 dest;"
+@include "Leb128_u32.sinc"
+
 @define SYMBOL global4
 @define DEST_EXPR "16 * "
 @define EXPORT_EXPR "export *[global]:4 dest;"
@@ -75,6 +80,11 @@ define pcodeop memory_fill;
 @define EXPORT_EXPR "export *[global]:8 dest;"
 @include "Leb128_u32.sinc"
 
+@define SYMBOL global16
+@define DEST_EXPR "16 * "
+@define EXPORT_EXPR "export *[global]:16 dest;"
+@include "Leb128_u32.sinc"
+
 @define SYMBOL tableref
 @define DEST_EXPR "(1<<32) * "
 @define EXPORT_EXPR "export *[table]:4 dest;"
@@ -90,6 +100,10 @@ sp0_64: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 0) * $(REG_SIZE);] {
 	export *[register]:8 tmp_sp;
 }
 
+sp0_128: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 0) * $(REG_SIZE);] {
+	export *[register]:16 tmp_sp;
+}
+
 sp1_32: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 1) * $(REG_SIZE);] {
 	export *[register]:4 tmp_sp;
 }
@@ -98,6 +112,10 @@ sp1_64: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 1) * $(REG_SIZE);] {
 	export *[register]:8 tmp_sp;
 }
 
+sp1_128: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 1) * $(REG_SIZE);] {
+	export *[register]:16 tmp_sp;
+}
+
 sp2_32: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 2) * $(REG_SIZE);] {
 	export *[register]:4 tmp_sp;
 }
@@ -106,6 +124,10 @@ sp2_64: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 2) * $(REG_SIZE);] {
 	export *[register]:8 tmp_sp;
 }
 
+sp2_128: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 2) * $(REG_SIZE);] {
+	export *[register]:16 tmp_sp;
+}
+
 sp3_32: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 3) * $(REG_SIZE);] {
 	export *[register]:4 tmp_sp;
 }
@@ -114,6 +136,10 @@ sp3_64: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 3) * $(REG_SIZE);] {
 	export *[register]:8 tmp_sp;
 }
 
+sp3_128: tmp_sp is ctx_sp [tmp_sp = 0x50000000 + (ctx_sp - 3) * $(REG_SIZE);] {
+	export *[register]:16 tmp_sp;
+}
+
 br_target: ctx_br_target is ctx_br_target {
 	export *[ram]:4 ctx_br_target;
 }
@@ -286,12 +312,20 @@ macro select64(sp1_32, sp2_64, sp3_64) {
 	sp3_64 = sp2_64;
 }
 
-:select is opc=0x1b; sp1_32; sp2_32; sp3_32; ctx_is_directive=0; ctx_is_op64=0 {
+macro select128(sp1_32, sp2_128, sp3_128) {
+	if (sp1_32 != 0) goto inst_next;
+	sp3_128 = sp2_128;
+}
+
+:select is opc=0x1b; sp1_32; sp2_32; sp3_32; ctx_is_directive=0; ctx_operand_size=4 {
 	select32(sp1_32, sp2_32, sp3_32);
 }
-:select is opc=0x1b; sp1_32; sp2_64; sp3_64; ctx_is_directive=0; ctx_is_op64=1 {
+:select is opc=0x1b; sp1_32; sp2_64; sp3_64; ctx_is_directive=0; ctx_operand_size=8 {
 	select64(sp1_32, sp2_64, sp3_64);
 }
+:select is opc=0x1b; sp1_32; sp2_128; sp3_128; ctx_is_directive=0; ctx_operand_size=16 {
+	select128(sp1_32, sp2_128, sp3_128);
+}
 
 # In the current version of Wasm, only one type index is permitted in select t*.
 # This is functionally identical to regular select.
@@ -305,6 +339,11 @@ valtype_64: valtype is topbit=1 & v=1; topbit=0 & v=0; valtype & (bytev=0x7e | b
 valtype_64: valtype is topbit=1 & v=1; topbit=1 & v=0; topbit=0 & v=0; valtype & (bytev=0x7e | bytev=0x7c) {}
 valtype_64: valtype is topbit=1 & v=1; topbit=1 & v=0; topbit=1 & v=0; topbit=0 & v=0; valtype & (bytev=0x7e | bytev=0x7c) {}
 valtype_64: valtype is topbit=1 & v=1; topbit=1 & v=0; topbit=1 & v=0; topbit=1 & v=0; topbit=0 & v=0; valtype & (bytev=0x7e | bytev=0x7c) {}
+valtype_128: valtype is topbit=0 & v=1; valtype & bytev=0x7b {}
+valtype_128: valtype is topbit=1 & v=1; topbit=0 & v=0; valtype & bytev=0x7b {}
+valtype_128: valtype is topbit=1 & v=1; topbit=1 & v=0; topbit=0 & v=0; valtype & bytev=0x7b {}
+valtype_128: valtype is topbit=1 & v=1; topbit=1 & v=0; topbit=1 & v=0; topbit=0 & v=0; valtype & bytev=0x7b {}
+valtype_128: valtype is topbit=1 & v=1; topbit=1 & v=0; topbit=1 & v=0; topbit=1 & v=0; topbit=0 & v=0; valtype & bytev=0x7b {}
 
 :select valtype_32 is opc=0x1c; valtype_32; sp1_32; sp2_32; sp3_32; ctx_is_directive=0 {
 	# i32, f32, funcref, externref
@@ -314,48 +353,67 @@ valtype_64: valtype is topbit=1 & v=1; topbit=1 & v=0; topbit=1 & v=0; topbit=1
 	# i64, f64
 	select64(sp1_32, sp2_64, sp3_64);
 }
+:select valtype_128 is opc=0x1c; valtype_128; sp1_32; sp2_128; sp3_128; ctx_is_directive=0 {
+	# v128
+	select128(sp1_32, sp2_128, sp3_128);
+}
 
 ## Variable Instructions
-:local.get local4 is opc=0x20; local4; sp0_32; ctx_is_directive=0; ctx_is_op64=0 {
+:local.get local4 is opc=0x20; local4; sp0_32; ctx_is_directive=0; ctx_operand_size=4 {
 	sp0_32 = local4;
 }
-:local.get local8 is opc=0x20; local8; sp0_64; ctx_is_directive=0; ctx_is_op64=1 {
+:local.get local8 is opc=0x20; local8; sp0_64; ctx_is_directive=0; ctx_operand_size=8 {
 	sp0_64 = local8;
 }
+:local.get local16 is opc=0x20; local16; sp0_128; ctx_is_directive=0; ctx_operand_size=16 {
+	sp0_128 = local16;
+}
 
-:local.set local4 is opc=0x21; local4; sp1_32; ctx_is_directive=0; ctx_is_op64=0 {
+:local.set local4 is opc=0x21; local4; sp1_32; ctx_is_directive=0; ctx_operand_size=4 {
 	local4 = sp1_32;
 }
-:local.set local8 is opc=0x21; local8; sp1_64; ctx_is_directive=0; ctx_is_op64=1 {
+:local.set local8 is opc=0x21; local8; sp1_64; ctx_is_directive=0; ctx_operand_size=8 {
 	local8 = sp1_64;
 }
+:local.set local16 is opc=0x21; local16; sp1_128; ctx_is_directive=0; ctx_operand_size=16 {
+	local16 = sp1_128;
+}
 
-:local.tee local4 is opc=0x22; local4; sp1_32; ctx_is_directive=0; ctx_is_op64=0 {
+:local.tee local4 is opc=0x22; local4; sp1_32; ctx_is_directive=0; ctx_operand_size=4 {
 	local4 = sp1_32;
 }
-:local.tee local8 is opc=0x22; local8; sp1_64; ctx_is_directive=0; ctx_is_op64=1 {
+:local.tee local8 is opc=0x22; local8; sp1_64; ctx_is_directive=0; ctx_operand_size=8 {
 	local8 = sp1_64;
 }
+:local.tee local16 is opc=0x22; local16; sp1_128; ctx_is_directive=0; ctx_operand_size=16 {
+	local16 = sp1_128;
+}
 
-:global.get global4 is opc=0x23; global4; sp0_32; ctx_is_directive=0; ctx_is_op64=0; ctx_is_global_sp=0 {
+:global.get global4 is opc=0x23; global4; sp0_32; ctx_is_directive=0; ctx_operand_size=4; ctx_is_global_sp=0 {
 	sp0_32 = global4;
 }
-:global.get global4 is opc=0x23; global4; sp0_32; ctx_is_directive=0; ctx_is_op64=0; ctx_is_global_sp=1 {
+:global.get global4 is opc=0x23; global4; sp0_32; ctx_is_directive=0; ctx_operand_size=4; ctx_is_global_sp=1 {
 	sp0_32 = SP;
 }
-:global.get global8 is opc=0x23; global8; sp0_64; ctx_is_directive=0; ctx_is_op64=1 {
+:global.get global8 is opc=0x23; global8; sp0_64; ctx_is_directive=0; ctx_operand_size=8 {
 	sp0_64 = global8;
 }
+:global.get global16 is opc=0x23; global16; sp0_128; ctx_is_directive=0; ctx_operand_size=16 {
+	sp0_128 = global16;
+}
 
-:global.set global4 is opc=0x24; global4; sp1_32; ctx_is_directive=0; ctx_is_op64=0; ctx_is_global_sp=0 {
+:global.set global4 is opc=0x24; global4; sp1_32; ctx_is_directive=0; ctx_operand_size=4; ctx_is_global_sp=0 {
 	global4 = sp1_32;
 }
-:global.set global4 is opc=0x24; global4; sp1_32; ctx_is_directive=0; ctx_is_op64=0; ctx_is_global_sp=1 {
+:global.set global4 is opc=0x24; global4; sp1_32; ctx_is_directive=0; ctx_operand_size=4; ctx_is_global_sp=1 {
 	SP = sp1_32;
 }
-:global.set global8 is opc=0x24; global8; sp1_64; ctx_is_directive=0; ctx_is_op64=1 {
+:global.set global8 is opc=0x24; global8; sp1_64; ctx_is_directive=0; ctx_operand_size=8 {
 	global8 = sp1_64;
 }
+:global.set global16 is opc=0x24; global16; sp1_128; ctx_is_directive=0; ctx_operand_size=16 {
+	global16 = sp1_128;
+}
 
 ## Table Instructions
 :table.get tableref is opc=0x25; tableref; sp1_32; ctx_is_directive=0 {
@@ -436,3 +494,4 @@ valtype_64: valtype is topbit=1 & v=1; topbit=1 & v=0; topbit=1 & v=0; topbit=1
 }
 
 @include "BasicOps.sinc"
+@include "VectorOps.sinc"
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.slaspec b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.slaspec
index 288fe162fdee..8f7d2a616323 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.slaspec
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.slaspec
@@ -1887,11 +1887,11 @@ define register offset=0x80000000 size=4 [ ss0 ];
 
 # All context registers are set by the pre-analyzer
 define context contextreg
-	ctx_is_op64 = (0, 0) noflow
-	ctx_is_directive = (1, 1) noflow
-	ctx_is_return = (2, 2) noflow
-	ctx_is_global_sp = (3, 3) noflow
-	ctx_directive_type = (4, 6) noflow
+	ctx_is_directive = (0, 0) noflow
+	ctx_is_return = (1, 1) noflow
+	ctx_is_global_sp = (2, 2) noflow
+	ctx_directive_type = (3, 5) noflow
+	ctx_operand_size = (6, 13) noflow
 	ctx_case_index = (32, 63) noflow
 	ctx_br_target = (64, 95) noflow
 	ctx_sp = (96, 127) noflow
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
index 0388a9010de3..a38d2b310bf6 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
@@ -78,11 +78,11 @@ public class WasmFunctionAnalysis {
 
 		/* These definitions must be synced with WebAssembly.slaspec */
 		private static final int CONTEXT_REG_WIDTH = 128;
-		private static final RegisterDefinition REG_IS_OP64 = new RegisterDefinition(0, 0);
-		private static final RegisterDefinition REG_IS_DIRECTIVE = new RegisterDefinition(1, 1);
-		private static final RegisterDefinition REG_IS_RETURN = new RegisterDefinition(2, 2);
-		private static final RegisterDefinition REG_IS_GLOBAL_SP = new RegisterDefinition(3, 3);
-		private static final RegisterDefinition REG_DIRECTIVE_TYPE = new RegisterDefinition(4, 6);
+		private static final RegisterDefinition REG_IS_DIRECTIVE = new RegisterDefinition(0, 0);
+		private static final RegisterDefinition REG_IS_RETURN = new RegisterDefinition(1, 1);
+		private static final RegisterDefinition REG_IS_GLOBAL_SP = new RegisterDefinition(2, 2);
+		private static final RegisterDefinition REG_DIRECTIVE_TYPE = new RegisterDefinition(3, 5);
+		private static final RegisterDefinition REG_OPERAND_SIZE = new RegisterDefinition(6, 13);
 		private static final RegisterDefinition REG_CASE_INDEX = new RegisterDefinition(32, 63);
 		private static final RegisterDefinition REG_BR_TARGET = new RegisterDefinition(64, 95);
 		private static final RegisterDefinition REG_SP = new RegisterDefinition(96, 127);
@@ -132,19 +132,11 @@ public class WasmFunctionAnalysis {
 		}
 
 		/**
-		 * Set whether the instruction takes a 64-bit stack operand. This currently
-		 * affects local.*, global.* and select instructions.
+		 * Set how large the stack operand is. This currently affects local.*, global.*
+		 * and select instructions.
 		 */
-		public void setIsOp64(Address address, ValType type) {
-			int value;
-			if (type == null || type.getSize() == 4) {
-				/* 32-bit operand */
-				value = 0;
-			} else {
-				/* 64-bit operand */
-				value = 1;
-			}
-			setRegister(address, REG_IS_OP64, value);
+		public void setOperandSize(Address address, ValType type) {
+			setRegister(address, REG_OPERAND_SIZE, type.getSize());
 		}
 
 		/** Mark this global.* instruction as operating on the C stack pointer. */
@@ -610,7 +602,7 @@ public class WasmFunctionAnalysis {
 				throw new ValidationException(instAddress, "inconsistent types in select");
 			}
 			ValType resultType = (t1 != null) ? t1 : t2;
-			contextreg.setIsOp64(instAddress, resultType);
+			contextreg.setOperandSize(instAddress, resultType);
 			pushValue(instAddress, resultType);
 			break;
 		}
@@ -630,21 +622,21 @@ public class WasmFunctionAnalysis {
 		case 0x20: /* local.get x */ {
 			long localidx = readLeb128(reader);
 			ValType type = func.getLocals()[(int) localidx];
-			contextreg.setIsOp64(instAddress, type);
+			contextreg.setOperandSize(instAddress, type);
 			pushValue(instAddress, type);
 			break;
 		}
 		case 0x21: /* local.set x */ {
 			long localidx = readLeb128(reader);
 			ValType type = func.getLocals()[(int) localidx];
-			contextreg.setIsOp64(instAddress, type);
+			contextreg.setOperandSize(instAddress, type);
 			popValue(instAddress, type);
 			break;
 		}
 		case 0x22: /* local.tee x */ {
 			long localidx = readLeb128(reader);
 			ValType type = func.getLocals()[(int) localidx];
-			contextreg.setIsOp64(instAddress, type);
+			contextreg.setOperandSize(instAddress, type);
 			popValue(instAddress, type);
 			pushValue(instAddress, type);
 			break;
@@ -652,7 +644,7 @@ public class WasmFunctionAnalysis {
 		case 0x23: /* global.get x */ {
 			long globalidx = readLeb128(reader);
 			ValType type = analysis.getGlobalType((int) globalidx);
-			contextreg.setIsOp64(instAddress, type);
+			contextreg.setOperandSize(instAddress, type);
 			globalGetSets.put(instAddress, globalidx);
 			pushValue(instAddress, type);
 			break;
@@ -660,7 +652,7 @@ public class WasmFunctionAnalysis {
 		case 0x24: /* global.set x */ {
 			long globalidx = readLeb128(reader);
 			ValType type = analysis.getGlobalType((int) globalidx);
-			contextreg.setIsOp64(instAddress, type);
+			contextreg.setOperandSize(instAddress, type);
 			globalGetSets.put(instAddress, globalidx);
 			popValue(instAddress, type);
 			break;
@@ -1054,6 +1046,428 @@ public class WasmFunctionAnalysis {
 			}
 			break;
 		}
+		case 0xFD: {
+			int opcode2 = LEB128.readAsUInt32(reader);
+			switch (opcode2) {
+			case 0x0: /* v128.load */
+			case 0x1: /* v128.load8x8_s */
+			case 0x2: /* v128.load8x8_u */
+			case 0x3: /* v128.load16x4_s */
+			case 0x4: /* v128.load16x4_u */
+			case 0x5: /* v128.load32x2_s */
+			case 0x6: /* v128.load32x2_u */
+			case 0x7: /* v128.load8_splat */
+			case 0x8: /* v128.load16_splat */
+			case 0x9: /* v128.load32_splat */
+			case 0xA: /* v128.load64_splat */
+				memoryLoad(reader, instAddress, ValType.v128);
+				break;
+			case 0xB: /* v128.store */
+				memoryStore(reader, instAddress, ValType.v128);
+				break;
+			case 0xC: /* v128.const */
+				reader.readNextByteArray(16); /* value */
+				pushValue(instAddress, ValType.v128);
+				break;
+			case 0xD: /* i8x16.shuffle */
+				for (int i = 0; i < 16; i++)
+					readLeb128(reader); /* laneidx16 */
+				binaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0xE: /* i8x16.swizzle */
+				binaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0xF: /* i8x16.splat */
+			case 0x10: /* i16x8.splat */
+			case 0x11: /* i32x4.splat */
+				unaryOp(instAddress, ValType.i32, ValType.v128);
+				break;
+			case 0x12: /* i64x2.splat */
+				unaryOp(instAddress, ValType.i64, ValType.v128);
+				break;
+			case 0x13: /* f32x4.splat */
+				unaryOp(instAddress, ValType.f32, ValType.v128);
+				break;
+			case 0x14: /* f64x2.splat */
+				unaryOp(instAddress, ValType.f64, ValType.v128);
+				break;
+			case 0x15: /* i8x16.extract_lane_s */
+			case 0x16: /* i8x16.extract_lane_u */
+				readLeb128(reader); /* laneidx */
+				unaryOp(instAddress, ValType.v128, ValType.i32);
+				break;
+			case 0x17: /* i8x16.replace_lane */
+				readLeb128(reader); /* laneidx */
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress, ValType.v128);
+				pushValue(instAddress, ValType.v128);
+				break;
+			case 0x18: /* i16x8.extract_lane_s */
+			case 0x19: /* i16x8.extract_lane_u */
+				readLeb128(reader); /* laneidx */
+				unaryOp(instAddress, ValType.v128, ValType.i32);
+				break;
+			case 0x1A: /* i16x8.replace_lane */
+				readLeb128(reader); /* laneidx */
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress, ValType.v128);
+				pushValue(instAddress, ValType.v128);
+				break;
+			case 0x1B: /* i32x4.extract_lane */
+				readLeb128(reader); /* laneidx */
+				unaryOp(instAddress, ValType.v128, ValType.i32);
+				break;
+			case 0x1C: /* i32x4.replace_lane */
+				readLeb128(reader); /* laneidx */
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress, ValType.v128);
+				pushValue(instAddress, ValType.v128);
+				break;
+			case 0x1D: /* i64x2.extract_lane */
+				readLeb128(reader); /* laneidx */
+				unaryOp(instAddress, ValType.v128, ValType.i64);
+				break;
+			case 0x1E: /* i64x2.replace_lane */
+				readLeb128(reader); /* laneidx */
+				popValue(instAddress, ValType.i64);
+				popValue(instAddress, ValType.v128);
+				pushValue(instAddress, ValType.v128);
+				break;
+			case 0x1F: /* f32x4.extract_lane */
+				readLeb128(reader); /* laneidx */
+				unaryOp(instAddress, ValType.v128, ValType.f32);
+				break;
+			case 0x20: /* f32x4.replace_lane */
+				readLeb128(reader); /* laneidx */
+				popValue(instAddress, ValType.f32);
+				popValue(instAddress, ValType.v128);
+				pushValue(instAddress, ValType.v128);
+				break;
+			case 0x21: /* f64x2.extract_lane */
+				readLeb128(reader); /* laneidx */
+				unaryOp(instAddress, ValType.v128, ValType.f64);
+				break;
+			case 0x22: /* f64x2.replace_lane */
+				readLeb128(reader); /* laneidx */
+				popValue(instAddress, ValType.f64);
+				popValue(instAddress, ValType.v128);
+				pushValue(instAddress, ValType.v128);
+				break;
+			case 0x23: /* i8x16.eq */
+			case 0x24: /* i8x16.ne */
+			case 0x25: /* i8x16.lt_s */
+			case 0x26: /* i8x16.lt_u */
+			case 0x27: /* i8x16.gt_s */
+			case 0x28: /* i8x16.gt_u */
+			case 0x29: /* i8x16.le_s */
+			case 0x2A: /* i8x16.le_u */
+			case 0x2B: /* i8x16.ge_s */
+			case 0x2C: /* i8x16.ge_u */
+			case 0x2D: /* i16x8.eq */
+			case 0x2E: /* i16x8.ne */
+			case 0x2F: /* i16x8.lt_s */
+			case 0x30: /* i16x8.lt_u */
+			case 0x31: /* i16x8.gt_s */
+			case 0x32: /* i16x8.gt_u */
+			case 0x33: /* i16x8.le_s */
+			case 0x34: /* i16x8.le_u */
+			case 0x35: /* i16x8.ge_s */
+			case 0x36: /* i16x8.ge_u */
+			case 0x37: /* i32x4.eq */
+			case 0x38: /* i32x4.ne */
+			case 0x39: /* i32x4.lt_s */
+			case 0x3A: /* i32x4.lt_u */
+			case 0x3B: /* i32x4.gt_s */
+			case 0x3C: /* i32x4.gt_u */
+			case 0x3D: /* i32x4.le_s */
+			case 0x3E: /* i32x4.le_u */
+			case 0x3F: /* i32x4.ge_s */
+			case 0x40: /* i32x4.ge_u */
+			case 0x41: /* f32x4.eq */
+			case 0x42: /* f32x4.ne */
+			case 0x43: /* f32x4.lt */
+			case 0x44: /* f32x4.gt */
+			case 0x45: /* f32x4.le */
+			case 0x46: /* f32x4.ge */
+			case 0x47: /* f64x2.eq */
+			case 0x48: /* f64x2.ne */
+			case 0x49: /* f64x2.lt */
+			case 0x4A: /* f64x2.gt */
+			case 0x4B: /* f64x2.le */
+			case 0x4C: /* f64x2.ge */
+				binaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0x4D: /* v128.not */
+				unaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0x4E: /* v128.and */
+			case 0x4F: /* v128.andnot */
+			case 0x50: /* v128.or */
+			case 0x51: /* v128.xor */
+				binaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0x52: /* v128.bitselect */
+				popValue(instAddress, ValType.v128);
+				popValue(instAddress, ValType.v128);
+				popValue(instAddress, ValType.v128);
+				pushValue(instAddress, ValType.v128);
+				break;
+			case 0x53: /* v128.any_true */
+				unaryOp(instAddress, ValType.v128, ValType.i32);
+				break;
+			case 0x54: /* v128.load8_lane */
+			case 0x55: /* v128.load16_lane */
+			case 0x56: /* v128.load32_lane */
+			case 0x57: /* v128.load64_lane */
+				readLeb128(reader); /* align */
+				readLeb128(reader); /* offset */
+				readLeb128(reader); /* laneidx */
+				popValue(instAddress, ValType.v128);
+				popValue(instAddress, ValType.i32);
+				pushValue(instAddress, ValType.v128);
+				break;
+			case 0x58: /* v128.store8_lane */
+			case 0x59: /* v128.store16_lane */
+			case 0x5A: /* v128.store32_lane */
+			case 0x5B: /* v128.store64_lane */
+				readLeb128(reader); /* align */
+				readLeb128(reader); /* offset */
+				readLeb128(reader); /* laneidx */
+				popValue(instAddress, ValType.v128);
+				popValue(instAddress, ValType.i32);
+				break;
+			case 0x5C: /* v128.load32_zero */
+			case 0x5D: /* v128.load64_zero */
+				readLeb128(reader); /* align */
+				readLeb128(reader); /* offset */
+				readLeb128(reader); /* laneidx */
+				popValue(instAddress, ValType.i32);
+				pushValue(instAddress, ValType.v128);
+				break;
+			case 0x5E: /* f32x4.demote_f64x2_zero */
+			case 0x5F: /* f64x2.promote_low_f32x4 */
+			case 0x60: /* i8x16.abs */
+			case 0x61: /* i8x16.neg */
+			case 0x62: /* i8x16.popcnt */
+				unaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0x63: /* i8x16.all_true */
+			case 0x64: /* i8x16.bitmask */
+				unaryOp(instAddress, ValType.v128, ValType.i32);
+				break;
+			case 0x65: /* i8x16.narrow_i16x8_s */
+			case 0x66: /* i8x16.narrow_i16x8_u */
+				binaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0x67: /* f32x4.ceil */
+			case 0x68: /* f32x4.floor */
+			case 0x69: /* f32x4.trunc */
+			case 0x6A: /* f32x4.nearest */
+				unaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0x6B: /* i8x16.shl */
+			case 0x6C: /* i8x16.shr_s */
+			case 0x6D: /* i8x16.shr_u */
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress, ValType.v128);
+				pushValue(instAddress, ValType.v128);
+				break;
+			case 0x6E: /* i8x16.add */
+			case 0x6F: /* i8x16.add_sat_s */
+			case 0x70: /* i8x16.add_sat_u */
+			case 0x71: /* i8x16.sub */
+			case 0x72: /* i8x16.sub_sat_s */
+			case 0x73: /* i8x16.sub_sat_u */
+				binaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0x74: /* f64x2.ceil */
+			case 0x75: /* f64x2.floor */
+				unaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0x76: /* i8x16.min_s */
+			case 0x77: /* i8x16.min_u */
+			case 0x78: /* i8x16.max_s */
+			case 0x79: /* i8x16.max_u */
+				binaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0x7A: /* f64x2.trunc */
+				unaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0x7B: /* i8x16.avgr_u */
+				binaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0x7C: /* i16x8.extadd_pairwise_i8x16_s */
+			case 0x7D: /* i16x8.extadd_pairwise_i8x16_u */
+			case 0x7E: /* i32x4.extadd_pairwise_i16x8_s */
+			case 0x7F: /* i32x4.extadd_pairwise_i16x8_u */
+			case 0x80: /* i16x8.abs */
+			case 0x81: /* i16x8.neg */
+				unaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0x82: /* i16x8.q15mulr_sat_s */
+				binaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0x83: /* i16x8.all_true */
+			case 0x84: /* i16x8.bitmask */
+				unaryOp(instAddress, ValType.v128, ValType.i32);
+				break;
+			case 0x85: /* i16x8.narrow_i32x4_s */
+			case 0x86: /* i16x8.narrow_i32x4_u */
+				binaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0x87: /* i16x8.extend_low_i8x16_s */
+			case 0x88: /* i16x8.extend_high_i8x16_s */
+			case 0x89: /* i16x8.extend_low_i8x16_u */
+			case 0x8A: /* i16x8.extend_high_i8x16_u */
+				unaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0x8B: /* i16x8.shl */
+			case 0x8C: /* i16x8.shr_s */
+			case 0x8D: /* i16x8.shr_u */
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress, ValType.v128);
+				pushValue(instAddress, ValType.v128);
+				break;
+			case 0x8E: /* i16x8.add */
+			case 0x8F: /* i16x8.add_sat_s */
+			case 0x90: /* i16x8.add_sat_u */
+			case 0x91: /* i16x8.sub */
+			case 0x92: /* i16x8.sub_sat_s */
+			case 0x93: /* i16x8.sub_sat_u */
+				binaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0x94: /* f64x2.nearest */
+				unaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0x95: /* i16x8.mul */
+			case 0x96: /* i16x8.min_s */
+			case 0x97: /* i16x8.min_u */
+			case 0x98: /* i16x8.max_s */
+			case 0x99: /* i16x8.max_u */
+			case 0x9B: /* i16x8.avgr_u */
+			case 0x9C: /* i16x8.extmul_low_i8x16_s */
+			case 0x9D: /* i16x8.extmul_high_i8x16_s */
+			case 0x9E: /* i16x8.extmul_low_i8x16_u */
+			case 0x9F: /* i16x8.extmul_high_i8x16_u */
+				binaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0xA0: /* i32x4.abs */
+			case 0xA1: /* i32x4.neg */
+				unaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0xA3: /* i32x4.all_true */
+			case 0xA4: /* i32x4.bitmask */
+				unaryOp(instAddress, ValType.v128, ValType.i32);
+				break;
+			case 0xA7: /* i32x4.extend_low_i16x8_s */
+			case 0xA8: /* i32x4.extend_high_i16x8_s */
+			case 0xA9: /* i32x4.extend_low_i16x8_u */
+			case 0xAA: /* i32x4.extend_high_i16x8_u */
+				unaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0xAB: /* i32x4.shl */
+			case 0xAC: /* i32x4.shr_s */
+			case 0xAD: /* i32x4.shr_u */
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress, ValType.v128);
+				pushValue(instAddress, ValType.v128);
+				break;
+			case 0xAE: /* i32x4.add */
+			case 0xB1: /* i32x4.sub */
+			case 0xB5: /* i32x4.mul */
+			case 0xB6: /* i32x4.min_s */
+			case 0xB7: /* i32x4.min_u */
+			case 0xB8: /* i32x4.max_s */
+			case 0xB9: /* i32x4.max_u */
+			case 0xBA: /* i32x4.dot_i16x8_s */
+			case 0xBC: /* i32x4.extmul_low_i16x8_s */
+			case 0xBD: /* i32x4.extmul_high_i16x8_s */
+			case 0xBE: /* i32x4.extmul_low_i16x8_u */
+			case 0xBF: /* i32x4.extmul_high_i16x8_u */
+				binaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0xC0: /* i64x2.abs */
+			case 0xC1: /* i64x2.neg */
+				unaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0xC3: /* i64x2.all_true */
+			case 0xC4: /* i64x2.bitmask */
+				unaryOp(instAddress, ValType.v128, ValType.i32);
+				break;
+			case 0xC7: /* i64x2.extend_low_i32x4_s */
+			case 0xC8: /* i64x2.extend_high_i32x4_s */
+			case 0xC9: /* i64x2.extend_low_i32x4_u */
+			case 0xCA: /* i64x2.extend_high_i32x4_u */
+				unaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0xCB: /* i64x2.shl */
+			case 0xCC: /* i64x2.shr_s */
+			case 0xCD: /* i64x2.shr_u */
+				popValue(instAddress, ValType.i32);
+				popValue(instAddress, ValType.v128);
+				pushValue(instAddress, ValType.v128);
+				break;
+			case 0xCE: /* i64x2.add */
+			case 0xD1: /* i64x2.sub */
+			case 0xD5: /* i64x2.mul */
+			case 0xD6: /* i64x2.eq */
+			case 0xD7: /* i64x2.ne */
+			case 0xD8: /* i64x2.lt_s */
+			case 0xD9: /* i64x2.gt_s */
+			case 0xDA: /* i64x2.le_s */
+			case 0xDB: /* i64x2.ge_s */
+			case 0xDC: /* i64x2.extmul_low_i32x4_s */
+			case 0xDD: /* i64x2.extmul_high_i32x4_s */
+			case 0xDE: /* i64x2.extmul_low_i32x4_u */
+			case 0xDF: /* i64x2.extmul_high_i32x4_u */
+				binaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0xE0: /* f32x4.abs */
+			case 0xE1: /* f32x4.neg */
+			case 0xE3: /* f32x4.sqrt */
+				unaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0xE4: /* f32x4.add */
+			case 0xE5: /* f32x4.sub */
+			case 0xE6: /* f32x4.mul */
+			case 0xE7: /* f32x4.div */
+			case 0xE8: /* f32x4.min */
+			case 0xE9: /* f32x4.max */
+			case 0xEA: /* f32x4.pmin */
+			case 0xEB: /* f32x4.pmax */
+				binaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0xEC: /* f64x2.abs */
+			case 0xED: /* f64x2.neg */
+			case 0xEF: /* f64x2.sqrt */
+				unaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0xF0: /* f64x2.add */
+			case 0xF1: /* f64x2.sub */
+			case 0xF2: /* f64x2.mul */
+			case 0xF3: /* f64x2.div */
+			case 0xF4: /* f64x2.min */
+			case 0xF5: /* f64x2.max */
+			case 0xF6: /* f64x2.pmin */
+			case 0xF7: /* f64x2.pmax */
+				binaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			case 0xF8: /* i32x4.trunc_sat_f32x4_s */
+			case 0xF9: /* i32x4.trunc_sat_f32x4_u */
+			case 0xFA: /* f32x4.convert_i32x4_s */
+			case 0xFB: /* f32x4.convert_i32x4_u */
+			case 0xFC: /* i32x4.trunc_sat_f64x2_s_zero */
+			case 0xFD: /* i32x4.trunc_sat_f64x2_u_zero */
+			case 0xFE: /* f64x2.convert_low_i32x4_s */
+			case 0xFF: /* f64x2.convert_low_i32x4_u */
+				unaryOp(instAddress, ValType.v128, ValType.v128);
+				break;
+			default:
+				Msg.warn(this, "Illegal opcode 0xfd " + String.format("0x%02x", opcode2) + " at " + instAddress);
+				break;
+			}
+			break;
+		}
 		default:
 			Msg.warn(this, "Illegal opcode " + String.format("0x%02x", opcode) + " at " + instAddress);
 			break;
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmEnums.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmEnums.java
index 730d7af5aa1a..b0714fcae753 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmEnums.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/WasmEnums.java
@@ -21,6 +21,7 @@ import ghidra.program.model.data.DataType;
 import ghidra.program.model.data.DoubleDataType;
 import ghidra.program.model.data.FloatDataType;
 import ghidra.program.model.data.PointerDataType;
+import ghidra.program.model.data.Undefined;
 import ghidra.program.model.data.Undefined4DataType;
 import ghidra.program.model.data.Undefined8DataType;
 
@@ -37,11 +38,13 @@ public class WasmEnums {
 		i64(0x7e),
 		f32(0x7d),
 		f64(0x7c),
+		v128(0x7b),
 
 		funcref(0x70),
 		externref(0x6f);
 
 		private static final HashMap<Integer, ValType> BY_BYTE = new HashMap<>();
+		public static final DataType Undefined16 = Undefined.getUndefinedDataType(16);
 		public final int typeByte;
 
 		static {
@@ -64,6 +67,8 @@ public class WasmEnums {
 				return FloatDataType.dataType;
 			case f64:
 				return DoubleDataType.dataType;
+			case v128:
+				return Undefined16;
 			case funcref:
 				return PointerDataType.dataType;
 			case externref:
@@ -82,6 +87,8 @@ public class WasmEnums {
 			case i64:
 			case f64:
 				return 8;
+			case v128:
+				return 16;
 			}
 			return 4;
 		}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java
index 963ed4d34efe..a36e53dac726 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java
@@ -28,6 +28,7 @@ import ghidra.program.model.data.Float8DataType;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.WasmLoader;
 import wasm.format.StructureBuilder;
+import wasm.format.WasmEnums.ValType;
 import wasm.format.WasmModule;
 
 /* A reader for expressions containing a single constant instruction.
@@ -44,6 +45,7 @@ followed by an explicit end byte (0x0b).
 public final class ConstantExpression implements StructConverter {
 
 	private ConstantInstruction type;
+	private LEB128 opcode2;
 	private Object value;
 
 	private enum ConstantInstruction {
@@ -51,6 +53,7 @@ public final class ConstantExpression implements StructConverter {
 		I64_CONST, /* i64.const n: value is LEB128 */
 		F32_CONST, /* f32.const z: value is byte[4] */
 		F64_CONST, /* f64.const z: value is byte[8] */
+		V128_CONST, /* v128.const z: value is byte[16] */
 		REF_NULL_FUNCREF, /* ref.null funcref: value is null */
 		REF_NULL_EXTERNREF, /* ref.null externref: value is null */
 		REF_FUNC, /* ref.func x: value is LEB128 funcidx */
@@ -97,6 +100,15 @@ public final class ConstantExpression implements StructConverter {
 			type = ConstantInstruction.REF_FUNC;
 			value = LEB128.readUnsignedValue(reader);
 			break;
+		case 0xFD:
+			opcode2 = LEB128.readUnsignedValue(reader);
+			if (opcode2.asUInt32() == 0x0C) {
+				type = ConstantInstruction.V128_CONST;
+				value = reader.readNextByteArray(16);
+				break;
+			} else {
+				throw new IllegalArgumentException("Invalid instruction opcode 0xfd " + opcode2.asUInt32() + " in constant expression");
+			}
 		default:
 			throw new IllegalArgumentException("Invalid instruction opcode " + typeCode + " in constant expression");
 		}
@@ -141,6 +153,7 @@ public final class ConstantExpression implements StructConverter {
 			return intToBytes((int) WasmLoader.getFunctionAddressOffset(module, (int) ((LEB128) value).asLong()));
 		case F32_CONST:
 		case F64_CONST:
+		case V128_CONST:
 			return (byte[]) value;
 		case REF_NULL_FUNCREF:
 		case REF_NULL_EXTERNREF:
@@ -190,6 +203,10 @@ public final class ConstantExpression implements StructConverter {
 		case F64_CONST:
 			builder.add(Float8DataType.dataType, "value");
 			break;
+		case V128_CONST:
+			builder.add((LEB128) opcode2, "opcode2");
+			builder.add(ValType.Undefined16, "value");
+			break;
 		case REF_NULL_FUNCREF:
 		case REF_NULL_EXTERNREF:
 			builder.add(BYTE, "nulltype");
-- 
2.41.0


From beff06ab4dae2e747c76f3a496896114a16c6151 Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Thu, 14 Apr 2022 00:42:16 -0700
Subject: [PATCH 10/25] WebAssembly: create code length data to avoid undefined
 bytes

---
 .../src/main/java/wasm/WasmLoader.java            | 15 +++++++++++++++
 .../format/sections/structures/WasmCodeEntry.java |  4 ++++
 2 files changed, 19 insertions(+)

diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
index cd9c084d11f9..0b19b7e78fb6 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
@@ -55,6 +55,7 @@ import ghidra.program.model.util.CodeUnitInsertionException;
 import ghidra.util.Msg;
 import ghidra.util.exception.InvalidInputException;
 import ghidra.util.task.TaskMonitor;
+import wasm.format.StructureBuilder;
 import wasm.format.WasmConstants;
 import wasm.format.WasmEnums.WasmExternalKind;
 import wasm.format.WasmHeader;
@@ -339,6 +340,18 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 			Msg.error(WasmLoader.class, "Failed to create global block " + globalidx + " at " + dataStart, e);
 		}
 	}
+
+	private static void createCodeLengthData(Program program, MemoryBlock moduleBlock, WasmModule module) {
+		List<WasmImportEntry> imports = module.getImports(WasmExternalKind.EXT_FUNCTION);
+		List<WasmCodeEntry> codeEntries = module.getNonImportedFunctions();
+		for (int i = 0; i < codeEntries.size(); i++) {
+			WasmCodeEntry entry = codeEntries.get(i);
+			StructureBuilder builder = new StructureBuilder("code_" + (i + imports.size()));
+			builder.add(entry.getCodeSizeLeb128(), "code_size");
+			long offset = entry.getOffset() - entry.getCodeSizeLeb128().getLength();
+			createData(program, program.getListing(), moduleBlock.getStart().add(offset), builder.toStructure());
+		}
+	}
 	// #endregion
 
 	public void createImportExportSymbols(Program program, WasmModule module, int funcidx, Function function) throws Exception {
@@ -675,6 +688,8 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 			createData(program, program.getListing(), moduleBlock.getStart().add(section.getSectionOffset()), section.toDataType());
 		}
 
+		createCodeLengthData(program, moduleBlock, module);
+
 		createCustomSections(program, fileBytes, module, monitor);
 
 		loadFunctions(program, fileBytes, module, monitor);
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmCodeEntry.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmCodeEntry.java
index a7120e5fd014..315033d4c1b5 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmCodeEntry.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmCodeEntry.java
@@ -47,6 +47,10 @@ public class WasmCodeEntry implements StructConverter {
 		reader.setPointerIndex(codeOffset + codeSize.asLong());
 	}
 
+	public LEB128 getCodeSizeLeb128() {
+		return codeSize;
+	}
+
 	public long getCodeSize() {
 		return codeSize.asLong();
 	}
-- 
2.41.0


From 26bb4fa988a4c97564a6963cbb8a2a96b8fb376e Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Mon, 27 Mar 2023 12:49:45 -0700
Subject: [PATCH 11/25] WebAssembly: update help stylesheet to recommended
 style

---
 .../WebAssembly/certification.manifest        |  1 -
 .../src/main/help/help/shared/Frontpage.css   | 58 -------------------
 .../help/help/topics/WebAssembly/help.html    |  2 +-
 3 files changed, 1 insertion(+), 60 deletions(-)
 delete mode 100644 Ghidra/Processors/WebAssembly/src/main/help/help/shared/Frontpage.css

diff --git a/Ghidra/Processors/WebAssembly/certification.manifest b/Ghidra/Processors/WebAssembly/certification.manifest
index 3ddae21c5ee2..63d922004e49 100644
--- a/Ghidra/Processors/WebAssembly/certification.manifest
+++ b/Ghidra/Processors/WebAssembly/certification.manifest
@@ -1,7 +1,6 @@
 ##VERSION: 2.0
 Module.manifest||GHIDRA||||END|
 src/main/help/help/TOC_Source.xml||GHIDRA||||END|
-src/main/help/help/shared/Frontpage.css||GHIDRA||||END|
 src/main/help/help/topics/WebAssembly/help.html||GHIDRA||||END|
 src/main/help/help/topics/WebAssembly/help.md||GHIDRA||||END|
 data/languages/BasicOps.sinc||GHIDRA||||END|
diff --git a/Ghidra/Processors/WebAssembly/src/main/help/help/shared/Frontpage.css b/Ghidra/Processors/WebAssembly/src/main/help/help/shared/Frontpage.css
deleted file mode 100644
index 452bf6e6b5b7..000000000000
--- a/Ghidra/Processors/WebAssembly/src/main/help/help/shared/Frontpage.css
+++ /dev/null
@@ -1,58 +0,0 @@
-/* ###
- * IP: GHIDRA
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/*
-									WARNING!
-    This file is copied to all help directories.  If you change this file, you must copy it 
-    to each src/main/help/help/shared directory.									
-									
-	
-	Java Help Note:  JavaHelp does not accept sizes (like in 'margin-top') in anything but 
-	px (pixel) or with no type marking. 
-
-*/ 
-
-body { margin-bottom: 50px; margin-left: 10px; margin-right: 10px; margin-top: 10px; } /* some padding to improve readability */ 
-li { font-family:times new roman; font-size:14pt; }
-h1 { color:#000080; font-family:times new roman; font-size:36pt; font-style:italic; font-weight:bold; text-align:center; }
-h2 { margin: 10px; margin-top: 20px; color:#984c4c; font-family:times new roman; font-size:18pt; font-weight:bold; }
-h3 { margin-left: 10px; margin-top: 20px; color:#0000ff; font-family:times new roman; font-size:14pt; font-weight:bold;  }
-h4 { margin-left: 10px; margin-top: 20px; font-family:times new roman; font-size:14pt; font-style:italic; }
- 
-/*
-	 P tag code.  Most of the help files nest P tags inside of blockquote tags (the was the 
-	 way it had been done in the beginning).  The net effect is that the text is indented.  In 
-	 modern HTML we would use CSS to do this.  We need to support the Ghidra P tags, nested in
-	 blockquote tags, as well as naked P tags.  The following two lines accomplish this.  Note
-	 that the 'blockquote p' definition will inherit from the first 'p' definition.
-*/
-p { margin-left: 40px; font-family:times new roman; font-size:14pt; }
-blockquote p { margin-left: 10px; }
-
-p.providedbyplugin { color:#7f7f7f; margin-left: 10px; font-size:14pt; margin-top:100px  }
-p.ProvidedByPlugin { color:#7f7f7f; margin-left: 10px; font-size:14pt; margin-top:100px }
-p.relatedtopic { color:#800080; margin-left: 10px; font-size:14pt; }
-p.RelatedTopic { color:#800080; margin-left: 10px; font-size:14pt; }
-
-/* 
-	We wish for a tables to have space between it and the preceding element, so that text
-	is not too close to the top of the table.  Also, nest the table a bit so that it is clear
-	the table relates to the preceding text.
-*/
-table { margin-left: 20px; margin-top: 10px; width: 80%;}
-td { font-family:times new roman; font-size:14pt; vertical-align: top; }
-th { font-family:times new roman; font-size:14pt; font-weight:bold; background-color: #EDF3FE; }
-
-code { color: black; font-family: courier new; font-size: 14pt; }
diff --git a/Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.html b/Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.html
index ec997c4e5ec8..7facdfb33ae5 100644
--- a/Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.html
+++ b/Ghidra/Processors/WebAssembly/src/main/help/help/topics/WebAssembly/help.html
@@ -6,7 +6,7 @@
     <meta charset="utf-8" />
 
     <title>WebAssembly</title>
-    <link rel="stylesheet" type="text/css" href="../../shared/Frontpage.css">
+    <link rel="stylesheet" type="text/css" href="help/shared/DefaultStyle.css">
   </head>
 
   <body><h1>WebAssembly</h1>
-- 
2.41.0


From b5584ba7cdf179455ac48200c0ada879a19f330b Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Mon, 27 Mar 2023 13:45:31 -0700
Subject: [PATCH 12/25] WebAssembly: remove now-deleted
 DataTypeConflictException

---
 .../Processors/WebAssembly/src/main/java/wasm/WasmLoader.java  | 3 ---
 1 file changed, 3 deletions(-)

diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
index 0b19b7e78fb6..4a7318e8fe3e 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
@@ -35,7 +35,6 @@ import ghidra.program.model.address.AddressSet;
 import ghidra.program.model.address.AddressSpace;
 import ghidra.program.model.data.ArrayDataType;
 import ghidra.program.model.data.DataType;
-import ghidra.program.model.data.DataTypeConflictException;
 import ghidra.program.model.data.DataUtilities;
 import ghidra.program.model.data.DataUtilities.ClearDataMode;
 import ghidra.program.model.lang.LanguageCompilerSpecPair;
@@ -264,8 +263,6 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 			return d;
 		} catch (CodeUnitInsertionException e) {
 			Msg.warn(WasmLoader.class, "Data markup conflict at " + address, e);
-		} catch (DataTypeConflictException e) {
-			Msg.error(WasmLoader.class, "Data type markup conflict:" + e.getMessage(), e);
 		}
 		return null;
 	}
-- 
2.41.0


From 65d50e121d4f1952970159ae70325e88d5c4becc Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Mon, 27 Mar 2023 13:54:51 -0700
Subject: [PATCH 13/25] WebAssembly: update to use standard LEB128 utilities

---
 .../WasmEmulateInstructionStateModifier.java  |  8 ++---
 .../src/main/java/wasm/WasmLoader.java        |  2 +-
 .../java/wasm/analysis/WasmDWARFAnalyzer.java |  3 +-
 .../wasm/analysis/WasmFunctionAnalysis.java   | 10 +++----
 .../java/wasm/analysis/WasmPreAnalyzer.java   | 10 +++----
 .../java/wasm/format/StructureBuilder.java    | 10 +++----
 .../wasm/format/sections/WasmCodeSection.java |  8 ++---
 .../format/sections/WasmCustomSection.java    |  4 +--
 .../wasm/format/sections/WasmDataSection.java |  8 ++---
 .../format/sections/WasmElementSection.java   |  8 ++---
 .../format/sections/WasmExportSection.java    |  8 ++---
 .../format/sections/WasmFunctionSection.java  | 14 ++++-----
 .../format/sections/WasmGlobalSection.java    |  8 ++---
 .../format/sections/WasmImportSection.java    |  8 ++---
 .../sections/WasmLinearMemorySection.java     |  8 ++---
 .../wasm/format/sections/WasmSection.java     | 10 +++----
 .../format/sections/WasmStartSection.java     |  8 ++---
 .../format/sections/WasmTableSection.java     |  8 ++---
 .../wasm/format/sections/WasmTypeSection.java |  8 ++---
 .../structures/ConstantExpression.java        | 30 +++++++++----------
 .../sections/structures/WasmCodeEntry.java    | 14 ++++-----
 .../sections/structures/WasmDataSegment.java  | 14 ++++-----
 .../structures/WasmElementSegment.java        | 20 ++++++-------
 .../sections/structures/WasmExportEntry.java  |  8 ++---
 .../sections/structures/WasmFuncType.java     | 14 ++++-----
 .../sections/structures/WasmImportEntry.java  |  8 ++---
 .../sections/structures/WasmLocalEntry.java   |  8 ++---
 .../format/sections/structures/WasmName.java  |  8 ++---
 .../structures/WasmNameIndirectMap.java       | 14 ++++-----
 .../sections/structures/WasmNameMap.java      | 14 ++++-----
 .../structures/WasmNameSubsection.java        | 10 +++----
 .../structures/WasmResizableLimits.java       | 14 ++++-----
 32 files changed, 164 insertions(+), 163 deletions(-)

diff --git a/Ghidra/Processors/WebAssembly/src/main/java/ghidra/program/emulation/WasmEmulateInstructionStateModifier.java b/Ghidra/Processors/WebAssembly/src/main/java/ghidra/program/emulation/WasmEmulateInstructionStateModifier.java
index 7084b122a5ad..3c23e44bf43a 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/ghidra/program/emulation/WasmEmulateInstructionStateModifier.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/ghidra/program/emulation/WasmEmulateInstructionStateModifier.java
@@ -23,7 +23,6 @@ import ghidra.app.util.bin.BinaryReader;
 import ghidra.app.util.bin.ByteProvider;
 import ghidra.app.util.bin.ByteProviderWrapper;
 import ghidra.app.util.bin.MemBufferByteProvider;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.pcode.emulate.Emulate;
 import ghidra.pcode.emulate.EmulateInstructionStateModifier;
 import ghidra.pcode.emulate.EmulateMemoryStateBuffer;
@@ -33,6 +32,7 @@ import ghidra.pcode.memstate.MemoryState;
 import ghidra.program.model.address.Address;
 import ghidra.program.model.address.AddressFactory;
 import ghidra.program.model.address.AddressSpace;
+import ghidra.program.model.data.LEB128;
 import ghidra.program.model.lang.Register;
 import ghidra.program.model.lang.RegisterValue;
 import ghidra.program.model.pcode.PcodeOp;
@@ -69,12 +69,12 @@ public class WasmEmulateInstructionStateModifier extends EmulateInstructionState
 				while (true) {
 					moduleSize = reader.getPointerIndex();
 					int id = reader.readNextUnsignedByte();
-					LEB128 contentLength = LEB128.readUnsignedValue(reader);
-					reader.setPointerIndex(reader.getPointerIndex() + contentLength.asLong());
+					long contentLength = reader.readNext(LEB128::unsigned);
+					reader.setPointerIndex(reader.getPointerIndex() + contentLength);
 					// A custom section (id 0) must have a name, so a zero-length custom section
 					// is invalid. This happens if we have two consecutive null bytes, which
 					// suggests that we're at the end of the module.
-					if (id == 0 && contentLength.asLong() == 0) {
+					if (id == 0 && contentLength == 0) {
 						break;
 					}
 				}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
index 4a7318e8fe3e..0d03b52b2f4e 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/WasmLoader.java
@@ -344,7 +344,7 @@ public class WasmLoader extends AbstractLibrarySupportLoader {
 		for (int i = 0; i < codeEntries.size(); i++) {
 			WasmCodeEntry entry = codeEntries.get(i);
 			StructureBuilder builder = new StructureBuilder("code_" + (i + imports.size()));
-			builder.add(entry.getCodeSizeLeb128(), "code_size");
+			builder.addUnsignedLeb128(entry.getCodeSizeLeb128(), "code_size");
 			long offset = entry.getOffset() - entry.getCodeSizeLeb128().getLength();
 			createData(program, program.getListing(), moduleBlock.getStart().add(offset), builder.toStructure());
 		}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmDWARFAnalyzer.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmDWARFAnalyzer.java
index 771295f7ba08..62f7722da38f 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmDWARFAnalyzer.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmDWARFAnalyzer.java
@@ -18,6 +18,7 @@ package wasm.analysis;
 import ghidra.app.plugin.core.analysis.DWARFAnalyzer;
 import ghidra.app.util.bin.format.dwarf4.next.sectionprovider.DWARFSectionProviderFactory;
 import ghidra.program.model.listing.Program;
+import ghidra.util.task.TaskMonitor;
 import wasm.WasmLoader;
 
 public class WasmDWARFAnalyzer extends DWARFAnalyzer {
@@ -27,7 +28,7 @@ public class WasmDWARFAnalyzer extends DWARFAnalyzer {
 		String format = program.getExecutableFormat();
 
 		if (WasmLoader.WEBASSEMBLY.equals(format)
-				&& DWARFSectionProviderFactory.createSectionProviderFor(program) != null) {
+				&& DWARFSectionProviderFactory.createSectionProviderFor(program, TaskMonitor.DUMMY) != null) {
 			return true;
 		}
 		return false;
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
index a38d2b310bf6..10411e996051 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
@@ -23,8 +23,8 @@ import java.util.List;
 import java.util.Map;
 
 import ghidra.app.util.bin.BinaryReader;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.program.model.address.Address;
+import ghidra.program.model.data.LEB128;
 import ghidra.program.model.lang.Register;
 import ghidra.program.model.lang.RegisterValue;
 import ghidra.program.model.listing.ContextChangeException;
@@ -352,11 +352,11 @@ public class WasmFunctionAnalysis {
 
 	// #region BinaryReader utilities
 	private static long readLeb128(BinaryReader reader) throws IOException {
-		return LEB128.readUnsignedValue(reader).asLong();
+		return reader.readNext(LEB128::unsigned);
 	}
 
 	private static long readSignedLeb128(BinaryReader reader) throws IOException {
-		return LEB128.readSignedValue(reader).asLong();
+		return reader.readNext(LEB128::signed);
 	}
 	// #endregion
 
@@ -957,7 +957,7 @@ public class WasmFunctionAnalysis {
 			break;
 		}
 		case 0xFC: {
-			int opcode2 = LEB128.readAsUInt32(reader);
+			int opcode2 = reader.readNextUnsignedVarIntExact(LEB128::unsigned);
 			switch (opcode2) {
 			case 0x00: /* i32.trunc_sat_f32_s */
 			case 0x01: /* i32.trunc_sat_f32_u */
@@ -1047,7 +1047,7 @@ public class WasmFunctionAnalysis {
 			break;
 		}
 		case 0xFD: {
-			int opcode2 = LEB128.readAsUInt32(reader);
+			int opcode2 = reader.readNextUnsignedVarIntExact(LEB128::unsigned);
 			switch (opcode2) {
 			case 0x0: /* v128.load */
 			case 0x1: /* v128.load8x8_s */
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmPreAnalyzer.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmPreAnalyzer.java
index 10273385c854..591928147c37 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmPreAnalyzer.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmPreAnalyzer.java
@@ -25,7 +25,6 @@ import ghidra.app.services.AnalysisPriority;
 import ghidra.app.services.AnalyzerType;
 import ghidra.app.util.bin.BinaryReader;
 import ghidra.app.util.bin.MemoryByteProvider;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.app.util.importer.MessageLog;
 import ghidra.framework.options.Options;
 import ghidra.program.disassemble.Disassembler;
@@ -33,6 +32,7 @@ import ghidra.program.disassemble.DisassemblerMessageListener;
 import ghidra.program.model.address.Address;
 import ghidra.program.model.address.AddressSet;
 import ghidra.program.model.address.AddressSetView;
+import ghidra.program.model.data.LEB128;
 import ghidra.program.model.lang.Processor;
 import ghidra.program.model.listing.Function;
 import ghidra.program.model.listing.Program;
@@ -80,10 +80,10 @@ public class WasmPreAnalyzer extends AbstractAnalyzer {
 
 	private int guessCStackGlobalForFunction(Program program, Address funcAddress) throws IOException {
 		BinaryReader codeReader = new BinaryReader(new MemoryByteProvider(program.getMemory(), funcAddress), true);
-		int localsCount = LEB128.readAsInt32(codeReader);
+		int localsCount = codeReader.readNextVarInt(LEB128::signed);
 		for (int i = 0; i < localsCount; i++) {
-			LEB128.readAsInt32(codeReader); /* count */
-			LEB128.readAsInt32(codeReader); /* type */
+			codeReader.readNextVarInt(LEB128::signed); /* count */
+			codeReader.readNextVarInt(LEB128::signed); /* type */
 		}
 
 		/*
@@ -92,7 +92,7 @@ public class WasmPreAnalyzer extends AbstractAnalyzer {
 		 */
 		if (codeReader.readNextUnsignedByte() != 0x23)
 			return -1;
-		return LEB128.readAsInt32(codeReader);
+		return codeReader.readNextVarInt(LEB128::signed);
 	}
 
 	private int guessCStackGlobal(Program program, List<WasmFuncSignature> functions, TaskMonitor monitor) {
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/StructureBuilder.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/StructureBuilder.java
index bf822bf460bb..8765b0c7f8dd 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/StructureBuilder.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/StructureBuilder.java
@@ -17,8 +17,8 @@ package wasm.format;
 
 import java.io.IOException;
 
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.app.util.bin.StructConverter;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.program.model.data.ArrayDataType;
 import ghidra.program.model.data.CategoryPath;
 import ghidra.program.model.data.DataType;
@@ -99,12 +99,12 @@ public class StructureBuilder {
 		add(dataType, name, null);
 	}
 
-	public void add(LEB128 leb128, String name, String comment) {
-		addArray(StructConverter.BYTE, leb128.getLength(), name, comment);
+	public void addUnsignedLeb128(LEB128Info leb128, String name, String comment) {
+		add(StructConverter.ULEB128, leb128.getLength(), name, comment);
 	}
 
-	public void add(LEB128 leb128, String name) {
-		add(leb128, name, null);
+	public void addUnsignedLeb128(LEB128Info leb128, String name) {
+		addUnsignedLeb128(leb128, name, null);
 	}
 
 	public void add(StructConverter converter, String name, String comment) throws DuplicateNameException, IOException {
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCodeSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCodeSection.java
index 4940bfcac8dd..53940fa637b8 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCodeSection.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCodeSection.java
@@ -21,19 +21,19 @@ import java.util.Collections;
 import java.util.List;
 
 import ghidra.app.util.bin.BinaryReader;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
 import wasm.format.sections.structures.WasmCodeEntry;
 
 public class WasmCodeSection extends WasmSection {
 
-	private LEB128 count;
+	private LEB128Info count;
 	private List<WasmCodeEntry> functions = new ArrayList<WasmCodeEntry>();
 
 	public WasmCodeSection(BinaryReader reader) throws IOException {
 		super(reader);
-		count = LEB128.readUnsignedValue(reader);
+		count = reader.readNext(LEB128Info::unsigned);
 		for (int i = 0; i < count.asLong(); ++i) {
 			functions.add(new WasmCodeEntry(reader));
 		}
@@ -45,7 +45,7 @@ public class WasmCodeSection extends WasmSection {
 
 	@Override
 	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
-		builder.add(count, "count");
+		builder.addUnsignedLeb128(count, "count");
 		// Do not add individual code entries to the structure: they need to be parsed
 		// as code instead of data.
 	}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCustomSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCustomSection.java
index 57b674f55259..4ebdf8cdd448 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCustomSection.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmCustomSection.java
@@ -18,7 +18,7 @@ package wasm.format.sections;
 import java.io.IOException;
 
 import ghidra.app.util.bin.BinaryReader;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
 import wasm.format.sections.structures.WasmName;
@@ -37,7 +37,7 @@ public abstract class WasmCustomSection extends WasmSection {
 		long initialOffset = reader.getPointerIndex();
 		/* skip section header: id + contentLength */
 		reader.readNextUnsignedByte();
-		LEB128.readUnsignedValue(reader);
+		reader.readNext(LEB128Info::unsigned);
 
 		String name = new WasmName(reader).getValue();
 		reader.setPointerIndex(initialOffset);
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmDataSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmDataSection.java
index 18af527c2705..f426a38235d5 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmDataSection.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmDataSection.java
@@ -21,19 +21,19 @@ import java.util.Collections;
 import java.util.List;
 
 import ghidra.app.util.bin.BinaryReader;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
 import wasm.format.sections.structures.WasmDataSegment;
 
 public class WasmDataSection extends WasmSection {
 
-	private LEB128 count;
+	private LEB128Info count;
 	private List<WasmDataSegment> dataSegments = new ArrayList<WasmDataSegment>();
 
 	public WasmDataSection(BinaryReader reader) throws IOException {
 		super(reader);
-		count = LEB128.readUnsignedValue(reader);
+		count = reader.readNext(LEB128Info::unsigned);
 		for (int i = 0; i < count.asLong(); ++i) {
 			dataSegments.add(new WasmDataSegment(reader));
 		}
@@ -45,7 +45,7 @@ public class WasmDataSection extends WasmSection {
 
 	@Override
 	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
-		builder.add(count, "count");
+		builder.addUnsignedLeb128(count, "count");
 		for (int i = 0; i < dataSegments.size(); i++) {
 			builder.add(dataSegments.get(i), "segment_" + i);
 		}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmElementSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmElementSection.java
index f23aa1a0f126..f2737f7013a3 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmElementSection.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmElementSection.java
@@ -21,19 +21,19 @@ import java.util.Collections;
 import java.util.List;
 
 import ghidra.app.util.bin.BinaryReader;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
 import wasm.format.sections.structures.WasmElementSegment;
 
 public class WasmElementSection extends WasmSection {
 
-	private LEB128 count;
+	private LEB128Info count;
 	private List<WasmElementSegment> elements = new ArrayList<WasmElementSegment>();
 
 	public WasmElementSection(BinaryReader reader) throws IOException {
 		super(reader);
-		count = LEB128.readUnsignedValue(reader);
+		count = reader.readNext(LEB128Info::unsigned);
 		for (int i = 0; i < count.asLong(); ++i) {
 			elements.add(new WasmElementSegment(reader));
 		}
@@ -45,7 +45,7 @@ public class WasmElementSection extends WasmSection {
 
 	@Override
 	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
-		builder.add(count, "count");
+		builder.addUnsignedLeb128(count, "count");
 		for (int i = 0; i < elements.size(); i++) {
 			builder.add(elements.get(i), "element_" + i);
 		}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmExportSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmExportSection.java
index f0b1731cb0b8..9d036102bf72 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmExportSection.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmExportSection.java
@@ -23,7 +23,7 @@ import java.util.List;
 import java.util.Map;
 
 import ghidra.app.util.bin.BinaryReader;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
 import wasm.format.WasmEnums.WasmExternalKind;
@@ -31,13 +31,13 @@ import wasm.format.sections.structures.WasmExportEntry;
 
 public class WasmExportSection extends WasmSection {
 
-	private LEB128 count;
+	private LEB128Info count;
 	private List<WasmExportEntry> exportList = new ArrayList<>();
 	private Map<WasmExternalKind, List<WasmExportEntry>> exports = new EnumMap<>(WasmExternalKind.class);
 
 	public WasmExportSection(BinaryReader reader) throws IOException {
 		super(reader);
-		count = LEB128.readUnsignedValue(reader);
+		count = reader.readNext(LEB128Info::unsigned);
 		for (int i = 0; i < count.asLong(); ++i) {
 			WasmExportEntry entry = new WasmExportEntry(reader);
 			WasmExternalKind kind = entry.getKind();
@@ -64,7 +64,7 @@ public class WasmExportSection extends WasmSection {
 
 	@Override
 	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
-		builder.add(count, "count");
+		builder.addUnsignedLeb128(count, "count");
 		for (int i = 0; i < exportList.size(); i++) {
 			builder.add(exportList.get(i), "export_" + i);
 		}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmFunctionSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmFunctionSection.java
index 30b12cffa6b1..b3c010ef4a3e 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmFunctionSection.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmFunctionSection.java
@@ -20,20 +20,20 @@ import java.util.ArrayList;
 import java.util.List;
 
 import ghidra.app.util.bin.BinaryReader;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
 
 public class WasmFunctionSection extends WasmSection {
 
-	private LEB128 count;
-	private List<LEB128> types = new ArrayList<LEB128>();
+	private LEB128Info count;
+	private List<LEB128Info> types = new ArrayList<LEB128Info>();
 
 	public WasmFunctionSection(BinaryReader reader) throws IOException {
 		super(reader);
-		count = LEB128.readUnsignedValue(reader);
+		count = reader.readNext(LEB128Info::unsigned);
 		for (int i = 0; i < count.asLong(); ++i) {
-			types.add(LEB128.readUnsignedValue(reader));
+			types.add(reader.readNext(LEB128Info::unsigned));
 		}
 	}
 
@@ -47,9 +47,9 @@ public class WasmFunctionSection extends WasmSection {
 
 	@Override
 	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
-		builder.add(count, "count");
+		builder.addUnsignedLeb128(count, "count");
 		for (int i = 0; i < types.size(); i++) {
-			builder.add(types.get(i), "function_" + i);
+			builder.addUnsignedLeb128(types.get(i), "function_" + i);
 		}
 	}
 
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmGlobalSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmGlobalSection.java
index c80715af8174..77b1e9e6ebf4 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmGlobalSection.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmGlobalSection.java
@@ -21,19 +21,19 @@ import java.util.Collections;
 import java.util.List;
 
 import ghidra.app.util.bin.BinaryReader;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
 import wasm.format.sections.structures.WasmGlobalEntry;
 
 public class WasmGlobalSection extends WasmSection {
 
-	private LEB128 count;
+	private LEB128Info count;
 	private List<WasmGlobalEntry> globals = new ArrayList<>();
 
 	public WasmGlobalSection(BinaryReader reader) throws IOException {
 		super(reader);
-		count = LEB128.readUnsignedValue(reader);
+		count = reader.readNext(LEB128Info::unsigned);
 		for (int i = 0; i < count.asLong(); ++i) {
 			globals.add(new WasmGlobalEntry(reader));
 		}
@@ -45,7 +45,7 @@ public class WasmGlobalSection extends WasmSection {
 
 	@Override
 	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
-		builder.add(count, "count");
+		builder.addUnsignedLeb128(count, "count");
 		for (int i = 0; i < globals.size(); i++) {
 			builder.add(globals.get(i), "global_" + i);
 		}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmImportSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmImportSection.java
index 24a01428a859..e635cc146e31 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmImportSection.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmImportSection.java
@@ -23,7 +23,7 @@ import java.util.List;
 import java.util.Map;
 
 import ghidra.app.util.bin.BinaryReader;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
 import wasm.format.WasmEnums.WasmExternalKind;
@@ -31,13 +31,13 @@ import wasm.format.sections.structures.WasmImportEntry;
 
 public class WasmImportSection extends WasmSection {
 
-	private LEB128 count;
+	private LEB128Info count;
 	private List<WasmImportEntry> importList = new ArrayList<>();
 	private Map<WasmExternalKind, List<WasmImportEntry>> imports = new EnumMap<>(WasmExternalKind.class);
 
 	public WasmImportSection(BinaryReader reader) throws IOException {
 		super(reader);
-		count = LEB128.readUnsignedValue(reader);
+		count = reader.readNext(LEB128Info::unsigned);
 		for (int i = 0; i < count.asLong(); ++i) {
 			WasmImportEntry entry = new WasmImportEntry(reader);
 			WasmExternalKind kind = entry.getKind();
@@ -55,7 +55,7 @@ public class WasmImportSection extends WasmSection {
 
 	@Override
 	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
-		builder.add(count, "count");
+		builder.addUnsignedLeb128(count, "count");
 		for (int i = 0; i < importList.size(); i++) {
 			builder.add(importList.get(i), "import_" + i);
 		}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmLinearMemorySection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmLinearMemorySection.java
index 1c0528684620..7e0a04490306 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmLinearMemorySection.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmLinearMemorySection.java
@@ -21,19 +21,19 @@ import java.util.Collections;
 import java.util.List;
 
 import ghidra.app.util.bin.BinaryReader;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
 import wasm.format.sections.structures.WasmResizableLimits;
 
 public class WasmLinearMemorySection extends WasmSection {
 
-	private LEB128 count;
+	private LEB128Info count;
 	private List<WasmResizableLimits> limits = new ArrayList<WasmResizableLimits>();
 
 	public WasmLinearMemorySection(BinaryReader reader) throws IOException {
 		super(reader);
-		count = LEB128.readUnsignedValue(reader);
+		count = reader.readNext(LEB128Info::unsigned);
 		for (int i = 0; i < count.asLong(); ++i) {
 			limits.add(new WasmResizableLimits(reader));
 		}
@@ -45,7 +45,7 @@ public class WasmLinearMemorySection extends WasmSection {
 
 	@Override
 	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
-		builder.add(count, "count");
+		builder.addUnsignedLeb128(count, "count");
 		for (int i = 0; i < limits.size(); i++) {
 			builder.add(limits.get(i), "memory_type_" + i);
 		}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmSection.java
index c8701a0a5ea4..724807e420cc 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmSection.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmSection.java
@@ -18,8 +18,8 @@ package wasm.format.sections;
 import java.io.IOException;
 
 import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.app.util.bin.StructConverter;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.program.model.data.DataType;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
@@ -27,7 +27,7 @@ import wasm.format.StructureBuilder;
 public abstract class WasmSection implements StructConverter {
 	
 	private WasmSectionId id;
-	private LEB128 contentLength;
+	private LEB128Info contentLength;
 	private long sectionOffset;
 
 	public enum WasmSectionId {
@@ -48,7 +48,7 @@ public abstract class WasmSection implements StructConverter {
 	public static WasmSection createSection(BinaryReader reader) throws IOException {
 		long sectionOffset = reader.getPointerIndex();
 		int id = reader.readNextUnsignedByte();
-		LEB128 contentLength = LEB128.readUnsignedValue(reader);
+		LEB128Info contentLength = reader.readNext(LEB128Info::unsigned);
 		reader.setPointerIndex(reader.getPointerIndex() + contentLength.asLong());
 
 		if(id >= WasmSectionId.values().length)
@@ -89,14 +89,14 @@ public abstract class WasmSection implements StructConverter {
 	protected WasmSection(BinaryReader reader) throws IOException {
 		sectionOffset = reader.getPointerIndex();
 		id = WasmSectionId.values()[reader.readNextUnsignedByte()];
-		contentLength = LEB128.readUnsignedValue(reader);
+		contentLength = reader.readNext(LEB128Info::unsigned);
 	}
 	
 	@Override
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		StructureBuilder builder = new StructureBuilder(getName());
 		builder.add(BYTE, "id");
-		builder.add(contentLength, "size");
+		builder.addUnsignedLeb128(contentLength, "size");
 		addToStructure(builder);
 		return builder.toStructure();
 	}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmStartSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmStartSection.java
index 76c620e29073..303c83493e6b 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmStartSection.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmStartSection.java
@@ -18,17 +18,17 @@ package wasm.format.sections;
 import java.io.IOException;
 
 import ghidra.app.util.bin.BinaryReader;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
 
 public class WasmStartSection extends WasmSection {
 
-	private LEB128 funcIdx;
+	private LEB128Info funcIdx;
 
 	public WasmStartSection(BinaryReader reader) throws IOException {
 		super(reader);
-		funcIdx = LEB128.readUnsignedValue(reader);
+		funcIdx = reader.readNext(LEB128Info::unsigned);
 	}
 
 	public long getStartFunctionIndex() {
@@ -37,7 +37,7 @@ public class WasmStartSection extends WasmSection {
 
 	@Override
 	public void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
-		builder.add(funcIdx, "func");
+		builder.addUnsignedLeb128(funcIdx, "func");
 	}
 
 	@Override
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmTableSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmTableSection.java
index 552a9ac44f02..bd01cdddde4c 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmTableSection.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmTableSection.java
@@ -21,19 +21,19 @@ import java.util.Collections;
 import java.util.List;
 
 import ghidra.app.util.bin.BinaryReader;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
 import wasm.format.sections.structures.WasmTableType;
 
 public class WasmTableSection extends WasmSection {
 
-	private LEB128 count;
+	private LEB128Info count;
 	private List<WasmTableType> tables = new ArrayList<WasmTableType>();
 
 	public WasmTableSection(BinaryReader reader) throws IOException {
 		super(reader);
-		count = LEB128.readUnsignedValue(reader);
+		count = reader.readNext(LEB128Info::unsigned);
 		for (int i = 0; i < count.asLong(); ++i) {
 			tables.add(new WasmTableType(reader));
 		}
@@ -45,7 +45,7 @@ public class WasmTableSection extends WasmSection {
 
 	@Override
 	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
-		builder.add(count, "count");
+		builder.addUnsignedLeb128(count, "count");
 		for (int i = 0; i < tables.size(); i++) {
 			builder.add(tables.get(i), "table_" + i);
 		}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmTypeSection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmTypeSection.java
index 2ca53528b093..13db1d9a2a19 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmTypeSection.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/WasmTypeSection.java
@@ -20,19 +20,19 @@ import java.util.ArrayList;
 import java.util.List;
 
 import ghidra.app.util.bin.BinaryReader;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
 import wasm.format.sections.structures.WasmFuncType;
 
 public class WasmTypeSection extends WasmSection {
 
-	private LEB128 count;
+	private LEB128Info count;
 	private List<WasmFuncType> types = new ArrayList<WasmFuncType>();
 
 	public WasmTypeSection(BinaryReader reader) throws IOException {
 		super(reader);
-		count = LEB128.readUnsignedValue(reader);
+		count = reader.readNext(LEB128Info::unsigned);
 		for (int i = 0; i < count.asLong(); ++i) {
 			types.add(new WasmFuncType(reader));
 		}
@@ -48,7 +48,7 @@ public class WasmTypeSection extends WasmSection {
 
 	@Override
 	protected void addToStructure(StructureBuilder builder) throws DuplicateNameException, IOException {
-		builder.add(count, "count");
+		builder.addUnsignedLeb128(count, "count");
 		for (int i = 0; i < types.size(); i++) {
 			builder.add(types.get(i), "type_" + i);
 		}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java
index a36e53dac726..c5bb794042d5 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java
@@ -18,8 +18,8 @@ package wasm.format.sections.structures;
 import java.io.IOException;
 
 import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.app.util.bin.StructConverter;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.program.model.address.Address;
 import ghidra.program.model.address.AddressFactory;
 import ghidra.program.model.data.DataType;
@@ -45,7 +45,7 @@ followed by an explicit end byte (0x0b).
 public final class ConstantExpression implements StructConverter {
 
 	private ConstantInstruction type;
-	private LEB128 opcode2;
+	private LEB128Info opcode2;
 	private Object value;
 
 	private enum ConstantInstruction {
@@ -66,15 +66,15 @@ public final class ConstantExpression implements StructConverter {
 		switch (typeCode) {
 		case 0x23:
 			type = ConstantInstruction.GLOBAL_GET;
-			value = LEB128.readUnsignedValue(reader);
+			value = reader.readNext(LEB128Info::unsigned);
 			break;
 		case 0x41:
 			type = ConstantInstruction.I32_CONST;
-			value = LEB128.readUnsignedValue(reader);
+			value = reader.readNext(LEB128Info::unsigned);
 			break;
 		case 0x42:
 			type = ConstantInstruction.I64_CONST;
-			value = LEB128.readUnsignedValue(reader);
+			value = reader.readNext(LEB128Info::unsigned);
 			break;
 		case 0x43:
 			type = ConstantInstruction.F32_CONST;
@@ -98,10 +98,10 @@ public final class ConstantExpression implements StructConverter {
 		}
 		case 0xD2:
 			type = ConstantInstruction.REF_FUNC;
-			value = LEB128.readUnsignedValue(reader);
+			value = reader.readNext(LEB128Info::unsigned);
 			break;
 		case 0xFD:
-			opcode2 = LEB128.readUnsignedValue(reader);
+			opcode2 = reader.readNext(LEB128Info::unsigned);
 			if (opcode2.asUInt32() == 0x0C) {
 				type = ConstantInstruction.V128_CONST;
 				value = reader.readNextByteArray(16);
@@ -146,11 +146,11 @@ public final class ConstantExpression implements StructConverter {
 	public byte[] asBytes(WasmModule module) {
 		switch (type) {
 		case I32_CONST:
-			return intToBytes((int) ((LEB128) value).asLong());
+			return intToBytes((int) ((LEB128Info) value).asLong());
 		case I64_CONST:
-			return longToBytes(((LEB128) value).asLong());
+			return longToBytes(((LEB128Info) value).asLong());
 		case REF_FUNC:
-			return intToBytes((int) WasmLoader.getFunctionAddressOffset(module, (int) ((LEB128) value).asLong()));
+			return intToBytes((int) WasmLoader.getFunctionAddressOffset(module, (int) ((LEB128Info) value).asLong()));
 		case F32_CONST:
 		case F64_CONST:
 		case V128_CONST:
@@ -167,21 +167,21 @@ public final class ConstantExpression implements StructConverter {
 
 	public Address asAddress(AddressFactory addressFactory, WasmModule module) {
 		if (type == ConstantInstruction.REF_FUNC) {
-			return WasmLoader.getFunctionAddress(addressFactory, module, (int) ((LEB128) value).asLong());
+			return WasmLoader.getFunctionAddress(addressFactory, module, (int) ((LEB128Info) value).asLong());
 		}
 		return null;
 	}
 
 	public Long asI32() {
 		if (type == ConstantInstruction.I32_CONST) {
-			return ((LEB128) value).asLong();
+			return ((LEB128Info) value).asLong();
 		}
 		return null;
 	}
 
 	public Long asGlobalGet() {
 		if (type == ConstantInstruction.GLOBAL_GET) {
-			return ((LEB128) value).asLong();
+			return ((LEB128Info) value).asLong();
 		}
 		return null;
 	}
@@ -195,7 +195,7 @@ public final class ConstantExpression implements StructConverter {
 		case I64_CONST:
 		case REF_FUNC:
 		case GLOBAL_GET:
-			builder.add((LEB128) value, "value");
+			builder.addUnsignedLeb128((LEB128Info) value, "value");
 			break;
 		case F32_CONST:
 			builder.add(Float4DataType.dataType, "value");
@@ -204,7 +204,7 @@ public final class ConstantExpression implements StructConverter {
 			builder.add(Float8DataType.dataType, "value");
 			break;
 		case V128_CONST:
-			builder.add((LEB128) opcode2, "opcode2");
+			builder.addUnsignedLeb128((LEB128Info) opcode2, "opcode2");
 			builder.add(ValType.Undefined16, "value");
 			break;
 		case REF_NULL_FUNCREF:
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmCodeEntry.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmCodeEntry.java
index 315033d4c1b5..df5ff068db4d 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmCodeEntry.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmCodeEntry.java
@@ -21,8 +21,8 @@ import java.util.Arrays;
 import java.util.List;
 
 import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.app.util.bin.StructConverter;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.program.model.data.DataType;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
@@ -30,16 +30,16 @@ import wasm.format.WasmEnums.ValType;
 
 public class WasmCodeEntry implements StructConverter {
 
-	private LEB128 codeSize;
+	private LEB128Info codeSize;
 	private List<WasmLocalEntry> locals = new ArrayList<WasmLocalEntry>();
-	private LEB128 localCount;
+	private LEB128Info localCount;
 	private long codeOffset;
 	private byte[] instructions;
 
 	public WasmCodeEntry(BinaryReader reader) throws IOException {
-		codeSize = LEB128.readUnsignedValue(reader);
+		codeSize = reader.readNext(LEB128Info::unsigned);
 		codeOffset = reader.getPointerIndex();
-		localCount = LEB128.readUnsignedValue(reader);
+		localCount = reader.readNext(LEB128Info::unsigned);
 		for (int i = 0; i < localCount.asLong(); ++i) {
 			locals.add(new WasmLocalEntry(reader));
 		}
@@ -47,7 +47,7 @@ public class WasmCodeEntry implements StructConverter {
 		reader.setPointerIndex(codeOffset + codeSize.asLong());
 	}
 
-	public LEB128 getCodeSizeLeb128() {
+	public LEB128Info getCodeSizeLeb128() {
 		return codeSize;
 	}
 
@@ -80,7 +80,7 @@ public class WasmCodeEntry implements StructConverter {
 	@Override
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		StructureBuilder builder = new StructureBuilder("code_" + codeOffset);
-		builder.add(codeSize, "code_size");
+		builder.addUnsignedLeb128(codeSize, "code_size");
 		builder.addArray(BYTE, instructions.length, "instructions");
 		return builder.toStructure();
 	}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmDataSegment.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmDataSegment.java
index 4e95a645320c..2ecec35d05a4 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmDataSegment.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmDataSegment.java
@@ -18,24 +18,24 @@ package wasm.format.sections.structures;
 import java.io.IOException;
 
 import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.app.util.bin.StructConverter;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.program.model.data.DataType;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
 
 public class WasmDataSegment implements StructConverter {
 
-	private LEB128 index;
+	private LEB128Info index;
 	private ConstantExpression offsetExpr;
 	private long fileOffset;
-	private LEB128 size;
+	private LEB128Info size;
 	private byte[] data;
 
 	public WasmDataSegment(BinaryReader reader) throws IOException {
 		int mode = reader.readNextUnsignedByte();
 		if (mode == 2) {
-			index = LEB128.readUnsignedValue(reader);
+			index = reader.readNext(LEB128Info::unsigned);
 		} else {
 			/* for mode < 2, index defaults to 0 */
 			index = null;
@@ -49,7 +49,7 @@ public class WasmDataSegment implements StructConverter {
 			offsetExpr = null;
 		}
 
-		size = LEB128.readUnsignedValue(reader);
+		size = reader.readNext(LEB128Info::unsigned);
 		fileOffset = reader.getPointerIndex();
 		data = reader.readNextByteArray((int) size.asLong());
 	}
@@ -89,12 +89,12 @@ public class WasmDataSegment implements StructConverter {
 
 		builder.add(BYTE, "mode");
 		if (index != null) {
-			builder.add(index, "index");
+			builder.addUnsignedLeb128(index, "index");
 		}
 		if (offsetExpr != null) {
 			builder.add(offsetExpr, "offset");
 		}
-		builder.add(size, "size");
+		builder.addUnsignedLeb128(size, "size");
 		if (data.length != 0) {
 			builder.addArray(BYTE, data.length, "data");
 		}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmElementSegment.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmElementSegment.java
index 82870bd64fd7..ce4936567c74 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmElementSegment.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmElementSegment.java
@@ -21,8 +21,8 @@ import java.util.Arrays;
 import java.util.List;
 
 import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.app.util.bin.StructConverter;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.program.model.address.Address;
 import ghidra.program.model.address.AddressFactory;
 import ghidra.program.model.data.DataType;
@@ -37,12 +37,12 @@ public class WasmElementSegment implements StructConverter {
 	private int flags;
 	private ElementSegmentMode mode;
 
-	private LEB128 tableidx; /* if (flags & 3) == 2 */
+	private LEB128Info tableidx; /* if (flags & 3) == 2 */
 	private ConstantExpression offset; /* if (flags & 1) == 0 */
-	private LEB128 count;
+	private LEB128Info count;
 
 	int elemkind; /* if (flags & 4) == 0 */
-	private List<LEB128> funcidxs; /* if (flags & 4) == 0 */
+	private List<LEB128Info> funcidxs; /* if (flags & 4) == 0 */
 
 	ValType elemtype; /* if (flags & 4) != 0 */
 	private List<ConstantExpression> exprs; /* if (flags & 4) != 0 */
@@ -57,7 +57,7 @@ public class WasmElementSegment implements StructConverter {
 		flags = reader.readNextUnsignedByte();
 		if ((flags & 3) == 2) {
 			/* active segment with explicit table index */
-			tableidx = LEB128.readUnsignedValue(reader);
+			tableidx = reader.readNext(LEB128Info::unsigned);
 		} else {
 			/* tableidx defaults to 0 */
 			tableidx = null;
@@ -89,12 +89,12 @@ public class WasmElementSegment implements StructConverter {
 			}
 		}
 
-		count = LEB128.readUnsignedValue(reader);
+		count = reader.readNext(LEB128Info::unsigned);
 		if ((flags & 4) == 0) {
 			/* vector of funcidx */
 			funcidxs = new ArrayList<>();
 			for (int i = 0; i < count.asLong(); i++) {
-				funcidxs.add(LEB128.readUnsignedValue(reader));
+				funcidxs.add(reader.readNext(LEB128Info::unsigned));
 			}
 		} else {
 			/* vector of expr */
@@ -187,7 +187,7 @@ public class WasmElementSegment implements StructConverter {
 		StructureBuilder builder = new StructureBuilder("element_segment");
 		builder.add(BYTE, "flags");
 		if (tableidx != null) {
-			builder.add(tableidx, "tableidx");
+			builder.addUnsignedLeb128(tableidx, "tableidx");
 		}
 		if (offset != null) {
 			builder.add(offset, "offset");
@@ -197,10 +197,10 @@ public class WasmElementSegment implements StructConverter {
 			builder.add(BYTE, "element_type");
 		}
 
-		builder.add(count, "count");
+		builder.addUnsignedLeb128(count, "count");
 		if (funcidxs != null) {
 			for (int i = 0; i < funcidxs.size(); i++) {
-				builder.add(funcidxs.get(i), "element" + i);
+				builder.addUnsignedLeb128(funcidxs.get(i), "element" + i);
 			}
 		}
 		if (exprs != null) {
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmExportEntry.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmExportEntry.java
index 0f48f3df31a7..8db0c77b0ab6 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmExportEntry.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmExportEntry.java
@@ -18,8 +18,8 @@ package wasm.format.sections.structures;
 import java.io.IOException;
 
 import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.app.util.bin.StructConverter;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.program.model.data.DataType;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
@@ -29,12 +29,12 @@ public class WasmExportEntry implements StructConverter {
 
 	private WasmName name;
 	private WasmExternalKind kind;
-	private LEB128 index;
+	private LEB128Info index;
 
 	public WasmExportEntry(BinaryReader reader) throws IOException {
 		name = new WasmName(reader);
 		kind = WasmExternalKind.values()[reader.readNextByte()];
-		index = LEB128.readUnsignedValue(reader);
+		index = reader.readNext(LEB128Info::unsigned);
 	}
 
 	public String getName() {
@@ -54,7 +54,7 @@ public class WasmExportEntry implements StructConverter {
 		StructureBuilder builder = new StructureBuilder("export_" + getIndex());
 		builder.add(name, "name");
 		builder.add(BYTE, "kind");
-		builder.add(index, "index");
+		builder.addUnsignedLeb128(index, "index");
 		return builder.toStructure();
 	}
 }
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmFuncType.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmFuncType.java
index 8fe1915472f7..b0a4d0f5ffeb 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmFuncType.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmFuncType.java
@@ -18,8 +18,8 @@ package wasm.format.sections.structures;
 import java.io.IOException;
 
 import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.app.util.bin.StructConverter;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.program.model.data.DataType;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
@@ -29,16 +29,16 @@ public class WasmFuncType implements StructConverter {
 
 	@SuppressWarnings("unused")
 	private int form; /* always 0 in this version */
-	private LEB128 paramCount;
+	private LEB128Info paramCount;
 	private ValType[] paramTypes;
-	private LEB128 returnCount;
+	private LEB128Info returnCount;
 	private ValType[] returnTypes;
 
 	public WasmFuncType(BinaryReader reader) throws IOException {
 		form = reader.readNextUnsignedByte();
-		paramCount = LEB128.readUnsignedValue(reader);
+		paramCount = reader.readNext(LEB128Info::unsigned);
 		paramTypes = ValType.fromBytes(reader.readNextByteArray((int) paramCount.asLong()));
-		returnCount = LEB128.readUnsignedValue(reader);
+		returnCount = reader.readNext(LEB128Info::unsigned);
 		returnTypes = ValType.fromBytes(reader.readNextByteArray((int) returnCount.asLong()));
 	}
 
@@ -72,9 +72,9 @@ public class WasmFuncType implements StructConverter {
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		StructureBuilder builder = new StructureBuilder("func_type_" + paramCount.asLong() + "_" + returnCount.asLong());
 		builder.add(BYTE, "form");
-		builder.add(paramCount, "param_count");
+		builder.addUnsignedLeb128(paramCount, "param_count");
 		builder.addArray(BYTE, (int) paramCount.asLong(), "param_types");
-		builder.add(returnCount, "return_count");
+		builder.addUnsignedLeb128(returnCount, "return_count");
 		builder.addArray(BYTE, (int) returnCount.asLong(), "return_types");
 		return builder.toStructure();
 	}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmImportEntry.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmImportEntry.java
index 90b0b2173729..26d7dba33f8a 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmImportEntry.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmImportEntry.java
@@ -18,8 +18,8 @@ package wasm.format.sections.structures;
 import java.io.IOException;
 
 import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.app.util.bin.StructConverter;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.program.model.data.DataType;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
@@ -31,7 +31,7 @@ public class WasmImportEntry implements StructConverter {
 	private WasmName field;
 	private WasmExternalKind kind;
 
-	private LEB128 functionEntry;
+	private LEB128Info functionEntry;
 	private WasmTableType tableEntry;
 	private WasmResizableLimits memoryEntry;
 	private WasmGlobalType globalEntry;
@@ -45,7 +45,7 @@ public class WasmImportEntry implements StructConverter {
 		kind = WasmExternalKind.values()[reader.readNextByte()];
 		switch (kind) {
 		case EXT_FUNCTION:
-			functionEntry = LEB128.readUnsignedValue(reader);
+			functionEntry = reader.readNext(LEB128Info::unsigned);
 			break;
 		case EXT_TABLE:
 			tableEntry = new WasmTableType(reader);
@@ -118,7 +118,7 @@ public class WasmImportEntry implements StructConverter {
 		builder.add(BYTE, "kind");
 		switch (kind) {
 		case EXT_FUNCTION:
-			builder.add(functionEntry, "type");
+			builder.addUnsignedLeb128(functionEntry, "type");
 			break;
 		case EXT_TABLE:
 			builder.add(tableEntry, "type");
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmLocalEntry.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmLocalEntry.java
index 3ca7340faf54..fbe91a925b83 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmLocalEntry.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmLocalEntry.java
@@ -18,19 +18,19 @@ package wasm.format.sections.structures;
 import java.io.IOException;
 
 import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.app.util.bin.StructConverter;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.program.model.data.DataType;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
 
 public class WasmLocalEntry implements StructConverter {
 
-	private LEB128 count;
+	private LEB128Info count;
 	private int type;
 
 	public WasmLocalEntry(BinaryReader reader) throws IOException {
-		count = LEB128.readUnsignedValue(reader);
+		count = reader.readNext(LEB128Info::unsigned);
 		type = reader.readNextUnsignedByte();
 	}
 
@@ -45,7 +45,7 @@ public class WasmLocalEntry implements StructConverter {
 	@Override
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		StructureBuilder builder = new StructureBuilder("locals_" + count.asLong() + "_" + type);
-		builder.add(count, "count");
+		builder.addUnsignedLeb128(count, "count");
 		builder.add(BYTE, "type");
 		return builder.toStructure();
 	}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmName.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmName.java
index dcd0163cbab4..d50b00836618 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmName.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmName.java
@@ -19,18 +19,18 @@ import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 
 import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.app.util.bin.StructConverter;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.program.model.data.DataType;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
 
 public class WasmName implements StructConverter {
-	private LEB128 size;
+	private LEB128Info size;
 	private String value;
 
 	public WasmName(BinaryReader reader) throws IOException {
-		size = LEB128.readUnsignedValue(reader);
+		size = reader.readNext(LEB128Info::unsigned);
 		byte[] data = reader.readNextByteArray((int) size.asLong());
 		value = new String(data, StandardCharsets.UTF_8);
 	}
@@ -46,7 +46,7 @@ public class WasmName implements StructConverter {
 	@Override
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		StructureBuilder builder = new StructureBuilder("name_" + size.asLong());
-		builder.add(size, "size");
+		builder.addUnsignedLeb128(size, "size");
 		builder.addString((int) size.asLong(), "value");
 		return builder.toStructure();
 	}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameIndirectMap.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameIndirectMap.java
index 8a5bb9cd646b..45f96e0817a0 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameIndirectMap.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameIndirectMap.java
@@ -22,27 +22,27 @@ import java.util.List;
 import java.util.Map;
 
 import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.app.util.bin.StructConverter;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.program.model.data.DataType;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
 
 public class WasmNameIndirectMap implements StructConverter {
-	private LEB128 count;
+	private LEB128Info count;
 	private List<WasmIndirectAssoc> entries = new ArrayList<>();
 	private Map<Long, WasmNameMap> map = new HashMap<>();
 
 	private static class WasmIndirectAssoc {
-		LEB128 idx;
+		LEB128Info idx;
 		WasmNameMap nameMap;
 	}
 
 	public WasmNameIndirectMap(BinaryReader reader) throws IOException {
-		count = LEB128.readUnsignedValue(reader);
+		count = reader.readNext(LEB128Info::unsigned);
 		for (int i = 0; i < count.asLong(); i++) {
 			WasmIndirectAssoc assoc = new WasmIndirectAssoc();
-			assoc.idx = LEB128.readUnsignedValue(reader);
+			assoc.idx = reader.readNext(LEB128Info::unsigned);
 			assoc.nameMap = new WasmNameMap("namemap_func_" + i + "_locals", reader);
 			entries.add(assoc);
 			map.put(assoc.idx.asLong(), assoc.nameMap);
@@ -60,10 +60,10 @@ public class WasmNameIndirectMap implements StructConverter {
 	@Override
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		StructureBuilder builder = new StructureBuilder("indirectnamemap");
-		builder.add(count, "count");
+		builder.addUnsignedLeb128(count, "count");
 		for (int i = 0; i < entries.size(); i++) {
 			WasmIndirectAssoc assoc = entries.get(i);
-			builder.add(assoc.idx, "idx" + i);
+			builder.addUnsignedLeb128(assoc.idx, "idx" + i);
 			builder.add(assoc.nameMap, "namemap" + i);
 		}
 		return builder.toStructure();
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameMap.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameMap.java
index 422a57a43e70..67227a58ae55 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameMap.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameMap.java
@@ -22,8 +22,8 @@ import java.util.List;
 import java.util.Map;
 
 import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.app.util.bin.StructConverter;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.program.model.data.DataType;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
@@ -31,21 +31,21 @@ import wasm.format.StructureBuilder;
 public class WasmNameMap implements StructConverter {
 	// this is used to avoid structure name conflict
 	private String structureName;
-	private LEB128 count;
+	private LEB128Info count;
 	private List<WasmAssoc> entries = new ArrayList<>();
 	private Map<Long, WasmName> map = new HashMap<>();
 
 	private static class WasmAssoc {
-		LEB128 idx;
+		LEB128Info idx;
 		WasmName name;
 	}
 
 	public WasmNameMap(String structureName, BinaryReader reader) throws IOException {
 		this.structureName = structureName;
-		count = LEB128.readUnsignedValue(reader);
+		count = reader.readNext(LEB128Info::unsigned);
 		for (int i = 0; i < count.asLong(); i++) {
 			WasmAssoc assoc = new WasmAssoc();
-			assoc.idx = LEB128.readUnsignedValue(reader);
+			assoc.idx = reader.readNext(LEB128Info::unsigned);
 			assoc.name = new WasmName(reader);
 			entries.add(assoc);
 			map.put(assoc.idx.asLong(), assoc.name);
@@ -62,10 +62,10 @@ public class WasmNameMap implements StructConverter {
 	@Override
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		StructureBuilder builder = new StructureBuilder(structureName);
-		builder.add(count, "count");
+		builder.addUnsignedLeb128(count, "count");
 		for (int i = 0; i < entries.size(); i++) {
 			WasmAssoc assoc = entries.get(i);
-			builder.add(assoc.idx, "idx" + i);
+			builder.addUnsignedLeb128(assoc.idx, "idx" + i);
 			builder.add(assoc.name, "name" + i);
 		}
 		return builder.toStructure();
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameSubsection.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameSubsection.java
index fee86753f3c0..7e84cda7977d 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameSubsection.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmNameSubsection.java
@@ -18,8 +18,8 @@ package wasm.format.sections.structures;
 import java.io.IOException;
 
 import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.app.util.bin.StructConverter;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.program.model.data.DataType;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
@@ -27,7 +27,7 @@ import wasm.format.StructureBuilder;
 public abstract class WasmNameSubsection implements StructConverter {
 
 	protected int id;
-	private LEB128 contentLength;
+	private LEB128Info contentLength;
 	private long sectionOffset;
 
 	// see https://github.com/WebAssembly/extended-name-section/blob/main/proposals/extended-name-section/Overview.md
@@ -47,7 +47,7 @@ public abstract class WasmNameSubsection implements StructConverter {
 	public static WasmNameSubsection createSubsection(BinaryReader reader) throws IOException {
 		long sectionOffset = reader.getPointerIndex();
 		int id = reader.readNextUnsignedByte();
-		LEB128 contentLength = LEB128.readUnsignedValue(reader);
+		LEB128Info contentLength = reader.readNext(LEB128Info::unsigned);
 		reader.setPointerIndex(reader.getPointerIndex() + contentLength.asLong());
 
 		BinaryReader sectionReader = reader.clone(sectionOffset);
@@ -86,14 +86,14 @@ public abstract class WasmNameSubsection implements StructConverter {
 	protected WasmNameSubsection(BinaryReader reader) throws IOException {
 		sectionOffset = reader.getPointerIndex();
 		id = reader.readNextUnsignedByte();
-		contentLength = LEB128.readUnsignedValue(reader);
+		contentLength = reader.readNext(LEB128Info::unsigned);
 	}
 
 	@Override
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		StructureBuilder builder = new StructureBuilder(getName());
 		builder.add(BYTE, "id");
-		builder.add(contentLength, "size");
+		builder.addUnsignedLeb128(contentLength, "size");
 		addToStructure(builder);
 		return builder.toStructure();
 	}
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmResizableLimits.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmResizableLimits.java
index e694f24c6002..281b541e069b 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmResizableLimits.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/WasmResizableLimits.java
@@ -18,8 +18,8 @@ package wasm.format.sections.structures;
 import java.io.IOException;
 
 import ghidra.app.util.bin.BinaryReader;
+import ghidra.app.util.bin.LEB128Info;
 import ghidra.app.util.bin.StructConverter;
-import ghidra.app.util.bin.format.dwarf4.LEB128;
 import ghidra.program.model.data.DataType;
 import ghidra.util.exception.DuplicateNameException;
 import wasm.format.StructureBuilder;
@@ -27,14 +27,14 @@ import wasm.format.StructureBuilder;
 public class WasmResizableLimits implements StructConverter {
 
 	private int flags;
-	private LEB128 initial;
-	private LEB128 maximum;
+	private LEB128Info initial;
+	private LEB128Info maximum;
 
 	public WasmResizableLimits(BinaryReader reader) throws IOException {
 		flags = reader.readNextUnsignedByte();
-		initial = LEB128.readUnsignedValue(reader);
+		initial = reader.readNext(LEB128Info::unsigned);
 		if (flags == 1) {
-			maximum = LEB128.readUnsignedValue(reader);
+			maximum = reader.readNext(LEB128Info::unsigned);
 		}
 	}
 
@@ -53,9 +53,9 @@ public class WasmResizableLimits implements StructConverter {
 	public DataType toDataType() throws DuplicateNameException, IOException {
 		StructureBuilder builder = new StructureBuilder("limits");
 		builder.add(BYTE, "flags");
-		builder.add(initial, "initial");
+		builder.addUnsignedLeb128(initial, "initial");
 		if (maximum != null) {
-			builder.add(maximum, "maximum");
+			builder.addUnsignedLeb128(maximum, "maximum");
 		}
 		return builder.toStructure();
 	}
-- 
2.41.0


From abc649076fe1ba17a7787fba241a8a87279cdd6b Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Mon, 27 Mar 2023 14:46:16 -0700
Subject: [PATCH 14/25] WebAssembly: disable 2+ output vars for pos-stack as it
 is unsupported.

Without this, we get the error "<pentry> tags within a group must be
distinguished by size or type" when attempting to load the pos-stack compiler
spec. This will break functions that have multiple output arguments, but those
are expected to be rare (and they are not well-supported by Ghidra anyway).
---
 .../languages/WebAssembly-pos-stack.cspec     | 765 ------------------
 1 file changed, 765 deletions(-)

diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec
index 4b44d43f59e3..28d5e1b2c12a 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec
@@ -799,771 +799,6 @@
         <pentry minsize="1" maxsize="16">
           <register name="o0o"/>
         </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o1o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o2o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o3o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o4o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o5o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o6o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o7o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o8o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o9o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o10o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o11o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o12o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o13o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o14o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o15o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o16o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o17o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o18o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o19o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o20o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o21o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o22o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o23o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o24o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o25o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o26o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o27o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o28o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o29o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o30o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o31o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o32o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o33o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o34o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o35o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o36o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o37o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o38o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o39o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o40o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o41o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o42o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o43o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o44o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o45o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o46o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o47o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o48o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o49o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o50o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o51o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o52o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o53o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o54o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o55o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o56o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o57o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o58o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o59o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o60o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o61o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o62o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o63o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o64o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o65o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o66o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o67o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o68o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o69o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o70o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o71o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o72o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o73o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o74o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o75o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o76o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o77o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o78o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o79o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o80o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o81o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o82o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o83o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o84o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o85o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o86o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o87o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o88o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o89o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o90o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o91o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o92o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o93o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o94o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o95o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o96o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o97o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o98o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o99o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o100o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o101o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o102o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o103o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o104o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o105o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o106o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o107o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o108o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o109o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o110o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o111o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o112o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o113o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o114o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o115o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o116o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o117o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o118o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o119o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o120o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o121o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o122o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o123o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o124o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o125o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o126o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o127o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o128o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o129o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o130o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o131o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o132o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o133o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o134o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o135o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o136o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o137o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o138o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o139o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o140o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o141o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o142o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o143o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o144o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o145o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o146o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o147o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o148o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o149o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o150o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o151o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o152o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o153o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o154o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o155o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o156o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o157o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o158o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o159o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o160o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o161o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o162o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o163o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o164o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o165o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o166o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o167o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o168o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o169o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o170o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o171o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o172o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o173o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o174o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o175o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o176o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o177o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o178o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o179o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o180o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o181o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o182o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o183o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o184o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o185o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o186o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o187o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o188o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o189o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o190o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o191o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o192o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o193o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o194o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o195o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o196o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o197o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o198o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o199o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o200o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o201o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o202o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o203o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o204o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o205o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o206o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o207o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o208o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o209o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o210o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o211o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o212o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o213o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o214o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o215o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o216o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o217o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o218o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o219o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o220o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o221o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o222o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o223o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o224o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o225o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o226o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o227o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o228o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o229o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o230o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o231o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o232o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o233o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o234o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o235o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o236o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o237o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o238o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o239o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o240o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o241o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o242o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o243o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o244o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o245o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o246o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o247o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o248o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o249o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o250o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o251o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o252o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o253o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o254o"/>
-        </pentry>
-        <pentry minsize="1" maxsize="16">
-          <register name="o255o"/>
-        </pentry>
       </output>
       <unaffected>
         <varnode space="register" offset="0x10000000" size="0x10000000"/>
-- 
2.41.0


From 6687901fa05c9ccf810ba9727f3934f78e4542b5 Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Mon, 27 Mar 2023 16:26:28 -0700
Subject: [PATCH 15/25] WebAssembly: Add a new script to handle "flat" dyncall
 namespaces.

It seems like LLVM, for instance, uses table indices as function pointers, so
this script is likely to be useful for anything compiled with LLVM. As a guess,
analyze_dyncalls is probably only useful for programs compiled using the
Emscripten fastcomp backend.
---
 .../ghidra_scripts/analyze_dyncalls.py        |  3 ++
 .../ghidra_scripts/rename_table_funcs.py      | 47 +++++++++++++++++++
 2 files changed, 50 insertions(+)
 create mode 100644 Ghidra/Processors/WebAssembly/ghidra_scripts/rename_table_funcs.py

diff --git a/Ghidra/Processors/WebAssembly/ghidra_scripts/analyze_dyncalls.py b/Ghidra/Processors/WebAssembly/ghidra_scripts/analyze_dyncalls.py
index 578c7d65ea0f..71584a306c0a 100644
--- a/Ghidra/Processors/WebAssembly/ghidra_scripts/analyze_dyncalls.py
+++ b/Ghidra/Processors/WebAssembly/ghidra_scripts/analyze_dyncalls.py
@@ -18,6 +18,9 @@
 # elements they call, and rename functions listed in the table by their dynCall
 # type and index. These dynCall indices are often used as function pointers in
 # compiled C/C++ code.
+# This script should only be used if your dynCall_ functions contain binary AND
+# operations (i.e. i32.and), indicating that the table is segmented into type-
+# specific power-of-two-sized chunks.
 # @author nneonneo
 # @category Analysis.Wasm
 # @keybinding
diff --git a/Ghidra/Processors/WebAssembly/ghidra_scripts/rename_table_funcs.py b/Ghidra/Processors/WebAssembly/ghidra_scripts/rename_table_funcs.py
new file mode 100644
index 000000000000..b6fb3e4068d2
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/ghidra_scripts/rename_table_funcs.py
@@ -0,0 +1,47 @@
+## ###
+#  IP: GHIDRA
+# 
+#  Licensed under the Apache License, Version 2.0 (the "License");
+#  you may not use this file except in compliance with the License.
+#  You may obtain a copy of the License at
+#  
+#       http://www.apache.org/licenses/LICENSE-2.0
+#  
+#  Unless required by applicable law or agreed to in writing, software
+#  distributed under the License is distributed on an "AS IS" BASIS,
+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+#  See the License for the specific language governing permissions and
+#  limitations under the License.
+##
+
+# Rename dynamically-callable functions from the function table.
+# This is useful for analyzing programs where table indices are used as
+# function pointers, e.g. programs compiled with LLVM.
+# Note: if you have "dynCall_" functions that contain arithmetic operations
+# (AND, ADD, etc.) you may want to use analyze_dyncalls.py instead.
+# @author nneonneo
+# @category Analysis.Wasm
+# @keybinding
+# @menupath
+# @toolbar
+
+from __future__ import print_function
+from wasm.analysis import WasmAnalysis
+from ghidra.program.model.symbol import SourceType
+
+progspace = currentProgram.addressFactory.getAddressSpace("ram")
+tablespace = currentProgram.addressFactory.getAddressSpace("table")
+dynCallNamespace = currentProgram.symbolTable.getOrCreateNameSpace(currentProgram.globalNamespace, "dynCall", SourceType.USER_DEFINED)
+
+def getTableFunction(offset):
+    funcAddr = getInt(tablespace.getAddress(offset * 4)) & 0xffffffff
+    return getFunctionAt(progspace.getAddress(funcAddr))
+
+count = WasmAnalysis.getState(currentProgram).module.nonImportedTables[0].limits.initial
+for i in range(1, count):
+    func = getTableFunction(i)
+    if func:
+        name = "func_%d" % i
+        if func.name.startswith("unnamed_function_"):
+            func.setName(name, SourceType.ANALYSIS)
+        currentProgram.symbolTable.createLabel(func.entryPoint, name, dynCallNamespace, SourceType.USER_DEFINED)
-- 
2.41.0


From 80241b4a9cbec90b5e32712b4a301d44797dd090 Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Mon, 27 Mar 2023 16:27:49 -0700
Subject: [PATCH 16/25] WebAssembly: Mark __wasm prototypes as register
 strategies

---
 .../WebAssembly/data/languages/WebAssembly-pos-stack.cspec      | 2 +-
 Ghidra/Processors/WebAssembly/data/languages/WebAssembly.cspec  | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec
index 28d5e1b2c12a..94bb0d0cad26 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly-pos-stack.cspec
@@ -20,7 +20,7 @@
   </global>
   <stackpointer register="SP" space="ram" growth="positive"/>
   <default_proto>
-    <prototype name="__wasm" extrapop="0" stackshift="0">
+    <prototype name="__wasm" extrapop="0" stackshift="0" strategy="register">
       <input>
         <!-- With the positive stack direction, Ghidra will allocate
         starting at the highest addresses in any <addr> pentry, which is
diff --git a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.cspec b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.cspec
index 1d5b021b5bc7..1b3c1e8d5ce1 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.cspec
+++ b/Ghidra/Processors/WebAssembly/data/languages/WebAssembly.cspec
@@ -20,7 +20,7 @@
   </global>
   <stackpointer register="SP" space="ram"/>
   <default_proto>
-    <prototype name="__wasm" extrapop="0" stackshift="0">
+    <prototype name="__wasm" extrapop="0" stackshift="0" strategy="register">
       <input>
         <pentry minsize="1" maxsize="500" align="16">
           <addr offset="0x20000000" space="register"/>
-- 
2.41.0


From 21958cbd779c666f5e5bf4e17f6a8c0a489aadf6 Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Mon, 27 Mar 2023 16:29:06 -0700
Subject: [PATCH 17/25] WebAssembly: Add a stack analyzer which creates C stack
 variables for Wasm.

The traditional stack analyzer, StackVariableAnalyzer
(NewFunctionStackAnalysisCmd) depends on having registers that contain stack
addresses visible as assembly operands. However, due to the Wasm disassembler
design, which hides the Wasm stack registers from the disassembly, this stack
analysis cannot automatically extract stack variables.

As a fix, adapt FunctionStackAnalysisCmd to operate on the hidden Wasm stack
register operands to detect operations that interact with C stack addresses.

This helps with cross references to C stack variables, as well as allowing C
stack variables to be properly interacted with in the decompiler.
---
 .../analysis/WasmStackVariableAnalyzer.java   | 264 ++++++++++++++++++
 1 file changed, 264 insertions(+)
 create mode 100644 Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmStackVariableAnalyzer.java

diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmStackVariableAnalyzer.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmStackVariableAnalyzer.java
new file mode 100644
index 000000000000..318e53910b80
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmStackVariableAnalyzer.java
@@ -0,0 +1,264 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package wasm.analysis;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import ghidra.app.cmd.function.CallDepthChangeInfo;
+import ghidra.app.services.AbstractAnalyzer;
+import ghidra.app.services.AnalysisPriority;
+import ghidra.app.services.AnalyzerType;
+import ghidra.app.util.importer.MessageLog;
+import ghidra.program.model.address.AddressSetView;
+import ghidra.program.model.data.ArrayDataType;
+import ghidra.program.model.data.ByteDataType;
+import ghidra.program.model.data.CharDataType;
+import ghidra.program.model.data.DataType;
+import ghidra.program.model.data.DefaultDataType;
+import ghidra.program.model.data.Float4DataType;
+import ghidra.program.model.data.Float8DataType;
+import ghidra.program.model.data.IntegerDataType;
+import ghidra.program.model.data.ShortDataType;
+import ghidra.program.model.data.SignedByteDataType;
+import ghidra.program.model.data.Undefined;
+import ghidra.program.model.data.Undefined1DataType;
+import ghidra.program.model.data.Undefined2DataType;
+import ghidra.program.model.data.Undefined4DataType;
+import ghidra.program.model.data.Undefined8DataType;
+import ghidra.program.model.data.UnsignedIntegerDataType;
+import ghidra.program.model.data.UnsignedShortDataType;
+import ghidra.program.model.lang.Processor;
+import ghidra.program.model.lang.Register;
+import ghidra.program.model.listing.Function;
+import ghidra.program.model.listing.Instruction;
+import ghidra.program.model.listing.InstructionIterator;
+import ghidra.program.model.listing.Program;
+import ghidra.program.model.listing.StackFrame;
+import ghidra.program.model.listing.Variable;
+import ghidra.program.model.scalar.Scalar;
+import ghidra.program.model.symbol.RefType;
+import ghidra.program.model.symbol.Reference;
+import ghidra.program.model.symbol.ReferenceManager;
+import ghidra.program.model.symbol.SourceType;
+import ghidra.program.model.symbol.StackReference;
+import ghidra.util.Msg;
+import ghidra.util.exception.CancelledException;
+import ghidra.util.exception.DuplicateNameException;
+import ghidra.util.exception.InvalidInputException;
+import ghidra.util.task.TaskMonitor;
+
+public class WasmStackVariableAnalyzer extends AbstractAnalyzer {
+	private static final String NAME = "Wasm Stack Analyzer";
+	private static final String DESCRIPTION = "Creates C stack variables for Wasm functions.";
+
+	public WasmStackVariableAnalyzer() {
+		super(NAME, DESCRIPTION, AnalyzerType.FUNCTION_ANALYZER);
+		setPriority(AnalysisPriority.DATA_TYPE_PROPOGATION.after().after().after());
+		setDefaultEnablement(true);
+	}
+
+	@Override
+	public boolean canAnalyze(Program program) {
+		return program.getLanguage().getProcessor().equals(Processor.findOrPossiblyCreateProcessor("WebAssembly"));
+	}
+
+	@Override
+	public boolean added(Program program, AddressSetView set, TaskMonitor monitor, MessageLog log) throws CancelledException {
+		monitor.initialize(program.getFunctionManager().getFunctionCount());
+
+		for (Function function : program.getListing().getFunctions(set, true)) {
+			monitor.checkCanceled();
+			monitor.setMessage("C Stack " + function.getName());
+			monitor.incrementProgress(1);
+
+			createStackPointerVariables(program, function, monitor);
+		}
+
+		return true;
+	}
+
+	private static DataType getMemoryDataType(String mnemonic) {
+		switch (mnemonic) {
+		case "i32.load":
+		case "i32.store":
+			return Undefined4DataType.dataType;
+		case "i64.load":
+		case "i64.store":
+			return Undefined8DataType.dataType;
+		case "f32.store":
+		case "f32.load":
+			return Float4DataType.dataType;
+		case "f64.store":
+		case "f64.load":
+			return Float8DataType.dataType;
+		case "i32.load8_s":
+		case "i64.load8_s":
+			return CharDataType.dataType;
+		case "i32.load8_u":
+		case "i64.load8_u":
+			return ByteDataType.dataType;
+		case "i32.store8":
+		case "i64.store8":
+			return Undefined1DataType.dataType;
+		case "i32.load16_s":
+		case "i64.load16_s":
+			return ShortDataType.dataType;
+		case "i32.load16_u":
+		case "i64.load16_u":
+			return UnsignedShortDataType.dataType;
+		case "i32.store16":
+		case "i64.store16":
+			return Undefined2DataType.dataType;
+		case "i64.load32_s":
+			return IntegerDataType.dataType;
+		case "i64.load32_u":
+			return UnsignedIntegerDataType.dataType;
+		case "i64.store32":
+			return Undefined4DataType.dataType;
+		case "v128.load":
+		case "v128.store":
+			return Undefined.getUndefinedDataType(16);
+		case "v128.load8_lane":
+		case "v128.load8_splat":
+		case "v128.store8_lane":
+			return Undefined1DataType.dataType;
+		case "v128.load16_lane":
+		case "v128.load16_splat":
+		case "v128.store16_lane":
+			return Undefined2DataType.dataType;
+		case "v128.load32_lane":
+		case "v128.load32_splat":
+		case "v128.load32_zero":
+		case "v128.store32_lane":
+			return Undefined4DataType.dataType;
+		case "v128.load64_lane":
+		case "v128.load64_splat":
+		case "v128.load64_zero":
+		case "v128.store64_lane":
+			return Undefined8DataType.dataType;
+		case "v128.load8x8_s":
+			return new ArrayDataType(SignedByteDataType.dataType, 8, 1);
+		case "v128.load8x8_u":
+			return new ArrayDataType(ByteDataType.dataType, 8, 1);
+		case "v128.load16x4_s":
+			return new ArrayDataType(ShortDataType.dataType, 4, 2);
+		case "v128.load16x4_u":
+			return new ArrayDataType(UnsignedShortDataType.dataType, 4, 2);
+		case "v128.load32x2_s":
+			return new ArrayDataType(IntegerDataType.dataType, 2, 4);
+		case "v128.load32x2_u":
+			return new ArrayDataType(UnsignedIntegerDataType.dataType, 2, 4);
+		}
+		return DefaultDataType.dataType;
+	}
+
+	private Variable createVar(Function func, int frameOffset, int offset, DataType dataType) throws InvalidInputException, DuplicateNameException {
+		StackFrame frame = func.getStackFrame();
+		int frameLoc = offset + frameOffset;
+		Variable var = frame.getVariableContaining(frameLoc);
+		if (var == null) {
+			var = frame.createVariable(null, frameLoc, dataType, SourceType.ANALYSIS);
+		} else if (var.getStackOffset() == frameLoc) {
+			DataType oldDt = var.getDataType();
+			if ((Undefined.isUndefined(oldDt) && !Undefined.isUndefined(dataType)) ||
+			(oldDt == DefaultDataType.DEFAULT && dataType != DefaultDataType.DEFAULT)) {
+				var.setDataType(dataType, SourceType.ANALYSIS);
+			}
+		}
+		return var;
+	}
+
+	private void defineFuncVariable(Program program, Function func, Instruction instr, int opIndex, int stackOffset, RefType refType) throws InvalidInputException, DuplicateNameException {
+		ReferenceManager refMgr = program.getReferenceManager();
+
+		Reference ref = instr.getPrimaryReference(opIndex);
+		DataType dataType = getMemoryDataType(instr.getMnemonicString());
+
+		if (ref != null && ref instanceof StackReference)
+			return;
+
+		refMgr.addStackReference(instr.getMinAddress(), opIndex, stackOffset, refType, SourceType.ANALYSIS);
+		createVar(func, 0, stackOffset, dataType);
+	}
+
+	// Get registers sorted by position within the register file
+	private List<Register> getRegisters(Object[] collection) {
+		List<Register> registers = new ArrayList<>();
+		for (Object obj : collection) {
+			if (obj instanceof Register) {
+				registers.add((Register) obj);
+			}
+		}
+		Collections.sort(registers);
+		return registers;
+	}
+
+	private void createStackPointerVariables(Program program, Function func, TaskMonitor monitor) throws CancelledException {
+		CallDepthChangeInfo info = new CallDepthChangeInfo(func, monitor);
+
+		InstructionIterator iter = program.getListing().getInstructions(func.getBody(), true);
+		while (iter.hasNext()) {
+			monitor.checkCanceled();
+			Instruction instr = iter.next();
+
+			try {
+				String mnemonic = instr.getMnemonicString();
+				if (mnemonic.contains(".load")) {
+					// Note: inputObjects is not sorted in any particular order (it may be derived
+					// from a HashSet)
+					Register base = getRegisters(instr.getInputObjects()).get(0);
+					// get offset from "align=A offset=O" operand
+					Scalar offset = (Scalar) instr.getOpObjects(0)[1];
+					int stackOffset = info.getRegDepth(instr.getMinAddress(), base);
+					if (stackOffset == Function.INVALID_STACK_DEPTH_CHANGE) {
+						continue;
+					}
+					defineFuncVariable(program, func, instr, 0, (int) (stackOffset + offset.getUnsignedValue()), RefType.READ);
+				} else if (mnemonic.contains(".store")) {
+					// Note: inputObjects is not sorted in any particular order (it may be derived
+					// from a HashSet)
+					Register base = getRegisters(instr.getInputObjects()).get(0);
+					// get offset from "align=A offset=O" operand
+					Scalar offset = (Scalar) instr.getOpObjects(0)[1];
+					int stackOffset = info.getRegDepth(instr.getMinAddress(), base);
+					if (stackOffset == Function.INVALID_STACK_DEPTH_CHANGE) {
+						continue;
+					}
+					defineFuncVariable(program, func, instr, 0, (int) (stackOffset + offset.getUnsignedValue()), RefType.WRITE);
+				} else if (mnemonic.equals("local.get") || mnemonic.equals("local.set")) {
+					// These instructions will only have one input
+					Register input = (Register) instr.getInputObjects()[0];
+					int stackOffset = info.getRegDepth(instr.getMinAddress(), input);
+					if (stackOffset == Function.INVALID_STACK_DEPTH_CHANGE) {
+						continue;
+					}
+					if (stackOffset == info.getDepth(instr.getMinAddress()) || stackOffset == 0) {
+						/*
+						 * Heuristically, avoid simple references to the frame or stack base, as they're
+						 * likely to be operands for a later operation
+						 */
+						continue;
+					}
+					defineFuncVariable(program, func, instr, 0, stackOffset, RefType.DATA);
+				}
+			} catch (Exception e) {
+				Msg.warn(this, "Failed to process instruction at " + instr.getMinAddress() + ": " + instr + ": " + e.getMessage());
+			}
+		}
+	}
+}
-- 
2.41.0


From e877efb855ebd47a5916067e296778adbdec6745 Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Tue, 28 Mar 2023 13:50:37 -0700
Subject: [PATCH 18/25] WebAssembly: update ConstantExpression comment

---
 .../format/sections/structures/ConstantExpression.java   | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java
index c5bb794042d5..126f8282f63b 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/format/sections/structures/ConstantExpression.java
@@ -33,14 +33,19 @@ import wasm.format.WasmModule;
 
 /* A reader for expressions containing a single constant instruction.
 
-In principle, constant expressions could contain more than one 
-
 Such expressions consist of an instruction from the following list:
 - t.const c
 - ref.null
 - ref.func x
 - global.get x
 followed by an explicit end byte (0x0b).
+
+In principle, constant expressions could contain more than one instruction.
+However, a constant expression must produce a single value, so with the
+current list of allowed instructions, no valid expression can contain two
+or more instructions. This may change in the future: the extended-const
+proposal will add add/sub/mul instructions, at which point this class will
+need to be updated to handle multiple instructions in a single expression.
 */
 public final class ConstantExpression implements StructConverter {
 
-- 
2.41.0


From 32cf7b089304cb8abc04a021abfa3302fb25301f Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Wed, 29 Mar 2023 04:43:31 -0700
Subject: [PATCH 19/25] WebAssembly: add wasm build instructions to pcodetest

This successfully builds a working binary with Clang 15.

- `mem*` definitions in `misc_BODY.c` and new `main` definition in `tpp.py`
  are for C99 compatibility
- `encoding='utf8'` in build.py produces a more readable log
- `TestInfo_force` in pcode_test.c ensures that the entire `MainInfo` structure
  is included in the binary
---
 .../SleighDevTools/pcodetest/build.py         |  2 +-
 .../pcodetest/c_src/misc_BODY.c               |  7 +++
 .../pcodetest/c_src/pcode_test.c              |  5 ++
 .../SleighDevTools/pcodetest/pcode_defs.py    |  9 ++++
 .../SleighDevTools/pcodetest/pcodetest.py     | 51 +++++++++++++++++++
 .../SleighDevTools/pcodetest/tpp.py           |  2 +-
 6 files changed, 74 insertions(+), 2 deletions(-)

diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/build.py b/Ghidra/Extensions/SleighDevTools/pcodetest/build.py
index 00023bfcc5b3..3e5cbb1a2f00 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/build.py
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/build.py
@@ -48,7 +48,7 @@ class BuildUtil:
                 f = subprocess.PIPE
             if verbose: self.log_info(string)
             try:
-                sp = subprocess.Popen(cmd, stdout=f, stderr=subprocess.PIPE)
+                sp = subprocess.Popen(cmd, stdout=f, stderr=subprocess.PIPE, encoding="utf8")
             except OSError as e:
                 self.log_err("Command: " + string)
                 self.log_err(e.strerror)
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/misc_BODY.c b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/misc_BODY.c
index 131404c87f54..e089e34f9727 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/misc_BODY.c
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/misc_BODY.c
@@ -15,6 +15,13 @@
  */
 #include "pcode_test.h"
 #include "big_struct.h"
+#ifdef HAS_LIBC
+#include <string.h>
+#else
+void *memset(void *b, int c, size_t len);
+void *memcpy(void *dst, const void *src, size_t n);
+int memcmp(const void *s1, const void *s2, size_t n);
+#endif
 
 static i4 int_expectedValue;
 static i4 int_actualValue;
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/pcode_test.c b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/pcode_test.c
index e31d9fccdb48..a011ddaba3ab 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/pcode_test.c
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/c_src/pcode_test.c
@@ -72,6 +72,11 @@ static TestInfo MainInfo = {
 	mainFunctionInfoTable,		/* function table */
 };
 
+NOINLINE TestInfo TestInfo_force(void)
+{
+	return MainInfo;
+}
+
 NOINLINE void TestInfo_reset(void)
 {
 	MainInfo.numpass = 0;
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/pcode_defs.py b/Ghidra/Extensions/SleighDevTools/pcodetest/pcode_defs.py
index ca300da20c46..a920772c457a 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/pcode_defs.py
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/pcode_defs.py
@@ -663,3 +663,12 @@ PCodeTest({
     'has_double': 0,
     'has_longlong': 0,
 })
+
+PCodeTest({
+    'name': 'WebAssembly',
+    'compile_exe': 'bin/clang',
+    'toolchain': 'LLVM/llvm',
+    'toolchain_type': 'llvm',
+    'ccflags': '-std=c99 --target=wasm32-wasi -Wl,--export-dynamic -Wl,--no-gc-sections -Wl,--no-entry',
+    'language_id': 'Wasm:LE:32:default',
+})
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/pcodetest.py b/Ghidra/Extensions/SleighDevTools/pcodetest/pcodetest.py
index d670fc522c1f..1ff95a9bc284 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/pcodetest.py
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/pcodetest.py
@@ -78,6 +78,8 @@ class PCodeTestBuild(BuildUtil):
             return PCodeBuildCCS(pcode_test)
         elif pcode_test.config.toolchain_type == 'sdcc':
             return PCodeBuildSDCC(pcode_test)
+        elif pcode_test.config.toolchain_type == 'llvm':
+            return PCodeBuildLLVM(pcode_test)
         else:
             raise Exception(pcode_test.config.format('Toolchain type %(toolchain_type)s not known'))
 
@@ -320,6 +322,55 @@ class PCodeBuildCCS(PCodeTestBuild):
             self.log_err('output not created %s' % output_file)
             return
 
+class PCodeBuildLLVM(PCodeTestBuild):
+
+    def __init__(self, PCodeTest):
+        super(PCodeBuildLLVM, self).__init__(PCodeTest)
+
+    # Set options for compiler depending on needs.
+    def cflags(self, output_file):
+        f = []
+        f += ['-DHAS_FLOAT=1' if self.config.has_float else '-DHAS_FLOAT_OVERRIDE=1']
+        f += ['-DHAS_DOUBLE=1' if self.config.has_double else '-DHAS_DOUBLE_OVERRIDE=1']
+        f += ['-DHAS_LONGLONG=1' if self.config.has_longlong else '-DHAS_LONGLONG_OVERRIDE=1']
+        if self.config.has_shortfloat: f += ['-DHAS_SHORTFLOAT=1']
+        if self.config.has_vector: f += ['-DHAS_VECTOR=1']
+        if self.config.has_decimal128: f += ['-DHAS_DECIMAL128=1']
+        if self.config.has_decimal32: f += ['-DHAS_DECIMAL32=1']
+        if self.config.has_decimal64: f += ['-DHAS_DECIMAL64=1']
+
+        f += ['-DNAME=NAME:%s' % output_file]
+
+        f += ['-static', '-Wno-unused-macros', '-nodefaultlibs', '-nostartfiles', '-fno-builtin']
+
+        f += self.config.ccflags.split()
+        f += self.config.add_ccflags.split()
+
+        return f
+
+    def compile(self, input_files, opt_cflag, output_base):
+
+        # Name the output file, and delete it if it exists
+
+        output_file = '%s.out' % (output_base)
+        self.remove(output_file)
+
+        # Construct the compile command line and execute it
+
+        cmp = self.which('compile_exe')
+        cmd = [cmp] + input_files + self.cflags(output_file) + [opt_cflag, "-o", output_file]
+        out, err = self.run(cmd)
+        if out: self.log_info(out)
+
+        # print error messages, which may just be warnings
+        if err: self.log_warn(err)
+
+        # return now if the error preempted the binary
+
+        if not self.is_readable_file(output_file):
+            self.log_err('output not created %s' % output_file)
+            return
+
 class PCodeBuildGCC(PCodeTestBuild):
 
     def __init__(self, PCodeTest):
diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/tpp.py b/Ghidra/Extensions/SleighDevTools/pcodetest/tpp.py
index 6c6246eabe3e..bb17e1152c29 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/tpp.py
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/tpp.py
@@ -197,7 +197,7 @@ void %(main)s(TestInfo* not_used) {
         self.c_write('')
         #for l in extern_lines:
         #    self.c_write(l)
-        self.c_write('void main(void) {')
+        self.c_write('int main(int argc, char **argv) {')
         self.c_write('\tTestInfo info;')
         #for l in main_lines:
         #    self.c_write(l)
-- 
2.41.0


From cdba6fa59989ede4a4f9489cbd5a7f80f8bbe1a8 Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Wed, 29 Mar 2023 04:59:44 -0700
Subject: [PATCH 20/25] WebAssembly: implement pcodetest tests.

We pass almost every test with -O0 and -O3, with the exception of pcode_conversions_Main.

There's a rather ugly hack needed to convert certain function pointers from
table indices (used by the actual code) to byte addresses (used by the emulator
to set PC). The way this is implemented is decidedly not ideal; a much better
solution would be to somehow hook readCodePointer in the
ProcessorEmulatorTestAdapter subclass; this would also enable the "procedure
descriptor indirection" fix to be moved into a processor-specific
implementation.

Changing the structs to protected in `ProcessorEmulatorTestAdapter` is for
convenience, so that the subclass does not need to go look those up again.

The zero-size check added to `BytesPcodeExecutorStateSpace#read` fixes a bug
which caused an exception when reading 0 bytes (`offset + size - 1` is not a
valid calculation in that case).
---
 .../support/ProcessorEmulatorTestAdapter.java |   4 +-
 .../exec/BytesPcodeExecutorStateSpace.java    |   3 +
 .../processors/WasmEmulatorTestAdapter.java   | 150 ++++++++++++++++++
 .../WebAssembly_O0_EmulatorTest.java          |  38 +++++
 .../WebAssembly_O3_EmulatorTest.java          |  38 +++++
 5 files changed, 231 insertions(+), 2 deletions(-)
 create mode 100644 Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WasmEmulatorTestAdapter.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WebAssembly_O0_EmulatorTest.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WebAssembly_O3_EmulatorTest.java

diff --git a/Ghidra/Features/Base/src/main/java/ghidra/test/processors/support/ProcessorEmulatorTestAdapter.java b/Ghidra/Features/Base/src/main/java/ghidra/test/processors/support/ProcessorEmulatorTestAdapter.java
index f3ed945cdb83..214324ade385 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/test/processors/support/ProcessorEmulatorTestAdapter.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/test/processors/support/ProcessorEmulatorTestAdapter.java
@@ -209,8 +209,8 @@ public abstract class ProcessorEmulatorTestAdapter extends TestCase implements E
 	private File resourcesTestDataDir;
 
 	private FileDataTypeManager archiveDtMgr;
-	private Structure testInfoStruct;
-	private Structure groupInfoStruct;
+	protected Structure testInfoStruct;
+	protected Structure groupInfoStruct;
 
 	private ParallelInstructionLanguageHelper parallelHelper;
 
diff --git a/Ghidra/Framework/Emulation/src/main/java/ghidra/pcode/exec/BytesPcodeExecutorStateSpace.java b/Ghidra/Framework/Emulation/src/main/java/ghidra/pcode/exec/BytesPcodeExecutorStateSpace.java
index 7bb578de0575..82a74c253a32 100644
--- a/Ghidra/Framework/Emulation/src/main/java/ghidra/pcode/exec/BytesPcodeExecutorStateSpace.java
+++ b/Ghidra/Framework/Emulation/src/main/java/ghidra/pcode/exec/BytesPcodeExecutorStateSpace.java
@@ -174,6 +174,9 @@ public class BytesPcodeExecutorStateSpace<B> {
 	 * @return the bytes read
 	 */
 	public byte[] read(long offset, int size, Reason reason) {
+		if (size == 0) {
+			return new byte[0];
+		}
 		ULongSpanSet uninitialized = bytes.getUninitialized(offset, offset + size - 1);
 		if (uninitialized.isEmpty()) {
 			return readBytes(offset, size, reason);
diff --git a/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WasmEmulatorTestAdapter.java b/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WasmEmulatorTestAdapter.java
new file mode 100644
index 000000000000..4be63f82241a
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WasmEmulatorTestAdapter.java
@@ -0,0 +1,150 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.test.processors;
+
+import ghidra.app.plugin.core.analysis.AutoAnalysisManager;
+import ghidra.program.model.address.Address;
+import ghidra.program.model.data.CategoryPath;
+import ghidra.program.model.data.DataTypeComponent;
+import ghidra.program.model.data.Structure;
+import ghidra.program.model.listing.Program;
+import ghidra.program.model.mem.Memory;
+import ghidra.program.model.mem.MemoryBlock;
+import ghidra.program.util.GhidraProgramUtilities;
+import ghidra.test.processors.support.EmulatorTestRunner;
+import ghidra.test.processors.support.PCodeTestControlBlock;
+import ghidra.test.processors.support.ProcessorEmulatorTestAdapter;
+import ghidra.util.task.TaskMonitor;
+
+public class WasmEmulatorTestAdapter extends ProcessorEmulatorTestAdapter {
+
+	private static final String[] REG_DUMP_SET = new String[] {};
+	private static final byte[] MAIN_CONTROL_BLOCK_MAGIC = "AbCdEFgH".getBytes();
+	private static final byte[] GROUP_CONTROL_BLOCK_MAGIC = "aBcDefGh".getBytes();
+
+	public WasmEmulatorTestAdapter(String name, String languageID, String compilerSpecID) throws Exception {
+		super(name, languageID, compilerSpecID, REG_DUMP_SET);
+		setIgnoredBlocks(".module");
+	}
+
+	private static int getStructureComponent(Structure testInfoStruct, String fieldName) {
+		for (DataTypeComponent component : testInfoStruct.getDefinedComponents()) {
+			if (fieldName.equals(component.getFieldName())) {
+				return component.getOffset();
+			}
+		}
+		throw new RuntimeException(fieldName + " field not found within " +
+				testInfoStruct.getName() + " structure definition");
+	}
+
+	private Address findBytes(Memory memory, Address startAddr, Address endAddr, byte[] bytes) throws Exception {
+		return memory.findBytes(startAddr, endAddr, bytes, null, true, TaskMonitor.DUMMY);
+	}
+
+	private Address readPointer(Program program, Address address) throws Exception {
+		int pointerSize = program.getDefaultPointerSize();
+		long offset = pointerSize == 4 ? (long) program.getMemory().getInt(address)
+				: program.getMemory().getLong(address);
+		return program.getAddressFactory().getDefaultAddressSpace().getAddress(offset);
+	}
+
+	private void writePointer(Program program, Address address, Address target) throws Exception {
+		int pointerSize = program.getDefaultPointerSize();
+		if (pointerSize == 4) {
+			program.getMemory().setInt(address, (int) target.getOffset());
+		} else {
+			program.getMemory().setLong(address, target.getOffset());
+		}
+	}
+
+	private void mungeFuncPointer(Program program, Address address) throws Exception {
+		long index = readPointer(program, address).getOffset();
+		Address tableAddress = program.getAddressFactory().getAddressSpace("table")
+				.getAddress(index * program.getDefaultPointerSize());
+		Address funcAddress = readPointer(program, tableAddress);
+		writePointer(program, address, funcAddress);
+	}
+
+	private void mungeFuncTable(Program program, Address tableAddress, int funcOffset, int funcSize) throws Exception {
+		while (true) {
+			Address functionAddress = readPointer(program, tableAddress.add(funcOffset));
+			if (functionAddress.getOffset() == 0)
+				break;
+			mungeFuncPointer(program, tableAddress.add(funcOffset));
+			tableAddress = tableAddress.add(funcSize);
+		}
+	}
+
+	@Override
+	protected void postImport(Program program) throws Exception {
+		/*
+		 * munge in-memory function pointer addresses so they point to the actual code.
+		 * The better way to handle this would be to override readCodePointer...
+		 */
+		Memory memory = program.getMemory();
+		MemoryBlock memory0 = memory.getBlock(".memory0");
+		Structure functionInfoStruct = (Structure) testInfoStruct.getDataTypeManager().getDataType(CategoryPath.ROOT,
+				"FunctionInfo");
+		int mainArrayOffset = getStructureComponent(testInfoStruct, "funcInfoArrayPtr");
+		int groupArrayOffset = getStructureComponent(groupInfoStruct, "funcInfoArrayPtr");
+		int funcOffset = getStructureComponent(functionInfoStruct, "func");
+		int funcSize = functionInfoStruct.getLength();
+
+		Address mainControlBlock = findBytes(memory, memory0.getStart(), memory0.getEnd(), MAIN_CONTROL_BLOCK_MAGIC);
+		mungeFuncPointer(program, mainControlBlock.add(getStructureComponent(testInfoStruct, "onPass")));
+		mungeFuncPointer(program, mainControlBlock.add(getStructureComponent(testInfoStruct, "onError")));
+		mungeFuncPointer(program, mainControlBlock.add(getStructureComponent(testInfoStruct, "onDone")));
+		mungeFuncPointer(program, mainControlBlock.add(getStructureComponent(testInfoStruct, "sprintf5")));
+		Address mainFuncTable = readPointer(program, mainControlBlock.add(mainArrayOffset));
+		mungeFuncTable(program, mainFuncTable, funcOffset, funcSize);
+
+		Address start = memory0.getStart();
+		while (true) {
+			Address groupControlBlock = findBytes(memory, start, memory0.getEnd(), GROUP_CONTROL_BLOCK_MAGIC);
+			if (groupControlBlock == null) {
+				break;
+			}
+			Address groupFuncTable = readPointer(program, groupControlBlock.add(groupArrayOffset));
+			// XXX hack: we can't munge the whole table because they'll get called from assembly,
+			// so only munge the first entry which points to the group Main and gets read by
+			// PCodeTestGroupControlBlock. Only table indices  1 and above are used by the emulated
+			// code, so this munge is safe (if hackish)
+			mungeFuncPointer(program, groupFuncTable.add(funcOffset));
+			start = groupControlBlock.add(GROUP_CONTROL_BLOCK_MAGIC.length);
+		}
+
+		/* Run analysis now so that all the code segments are properly defined */
+		setAnalysisOptions(program.getOptions(Program.ANALYSIS_PROPERTIES));
+		GhidraProgramUtilities.setAnalyzedFlag(program, true);
+		AutoAnalysisManager analysisMgr = AutoAnalysisManager.getAnalysisManager(program);
+		analysisMgr.cancelQueuedTasks(); // GhidraProject import utility jumped the gun with analysis initialization
+		analysisMgr.initializeOptions();
+		analysisMgr.reAnalyzeAll(null);
+		analysisMgr.startAnalysis(TaskMonitor.DUMMY); // method blocks during analysis
+	}
+
+	@Override
+	protected void analyze(Program program, PCodeTestControlBlock testControlBlock) throws Exception {
+		/* Nothing: we ran analysis already */
+	}
+
+	@Override
+	protected void initializeState(EmulatorTestRunner testRunner, Program program) throws Exception {
+		super.initializeState(testRunner, program);
+		MemoryBlock memory0 = program.getMemory().getBlock(".memory0");
+		testRunner.setRegister("SP", memory0.getEnd().add(0x10000).getOffset());
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WebAssembly_O0_EmulatorTest.java b/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WebAssembly_O0_EmulatorTest.java
new file mode 100644
index 000000000000..0258716c73f8
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WebAssembly_O0_EmulatorTest.java
@@ -0,0 +1,38 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.test.processors;
+
+import ghidra.test.processors.support.ProcessorEmulatorTestAdapter;
+import junit.framework.Test;
+
+public class WebAssembly_O0_EmulatorTest extends WasmEmulatorTestAdapter {
+
+	private static final String LANGUAGE_ID = "Wasm:LE:32:default";
+	private static final String COMPILER_SPEC_ID = "default";
+
+	public WebAssembly_O0_EmulatorTest(String name) throws Exception {
+		super(name, LANGUAGE_ID, COMPILER_SPEC_ID);
+	}
+
+	@Override
+	protected String getProcessorDesignator() {
+		return "WebAssembly_LLVM_O0";
+	}
+
+	public static Test suite() {
+		return ProcessorEmulatorTestAdapter.buildEmulatorTestSuite(WebAssembly_O0_EmulatorTest.class);
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WebAssembly_O3_EmulatorTest.java b/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WebAssembly_O3_EmulatorTest.java
new file mode 100644
index 000000000000..4763eb0182dc
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WebAssembly_O3_EmulatorTest.java
@@ -0,0 +1,38 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.test.processors;
+
+import ghidra.test.processors.support.ProcessorEmulatorTestAdapter;
+import junit.framework.Test;
+
+public class WebAssembly_O3_EmulatorTest extends WasmEmulatorTestAdapter {
+
+	private static final String LANGUAGE_ID = "Wasm:LE:32:default";
+	private static final String COMPILER_SPEC_ID = "default";
+
+	public WebAssembly_O3_EmulatorTest(String name) throws Exception {
+		super(name, LANGUAGE_ID, COMPILER_SPEC_ID);
+	}
+
+	@Override
+	protected String getProcessorDesignator() {
+		return "WebAssembly_LLVM_O3";
+	}
+
+	public static Test suite() {
+		return ProcessorEmulatorTestAdapter.buildEmulatorTestSuite(WebAssembly_O3_EmulatorTest.class);
+	}
+}
-- 
2.41.0


From e09e5175bac19878530613f4a19c3506af986452 Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Wed, 29 Mar 2023 05:38:40 -0700
Subject: [PATCH 21/25] WebAssembly: Fix pcode_conversions_Main test.

This is fixed by implementing unsigned-to-float conversions properly.
---
 .../WebAssembly/data/languages/BasicOps.sinc         | 12 ++++++++----
 1 file changed, 8 insertions(+), 4 deletions(-)

diff --git a/Ghidra/Processors/WebAssembly/data/languages/BasicOps.sinc b/Ghidra/Processors/WebAssembly/data/languages/BasicOps.sinc
index d045218e8d3f..14baf55630be 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/BasicOps.sinc
+++ b/Ghidra/Processors/WebAssembly/data/languages/BasicOps.sinc
@@ -439,13 +439,15 @@ storeaddr: memalign memoffset is memalign; memoffset; sp2_32 {
 	sp1_32 = int2float(sp1_32);
 }
 :f32.convert_i32_u  is opc=0xB3; sp1_32; ctx_is_directive=0 {
-	sp1_32 = int2float(sp1_32);
+	local tmp:8 = zext(sp1_32);
+	sp1_32 = int2float(tmp);
 }
 :f32.convert_i64_s  is opc=0xB4; sp1_32; sp1_64; ctx_is_directive=0 {
 	sp1_32 = int2float(sp1_64);
 }
 :f32.convert_i64_u  is opc=0xB5; sp1_32; sp1_64; ctx_is_directive=0 {
-	sp1_32 = int2float(sp1_64);
+	local tmp:9 = zext(sp1_64);
+	sp1_32 = int2float(tmp);
 }
 :f32.demote_f64  is opc=0xB6; sp1_32; sp1_64; ctx_is_directive=0 {
 	sp1_32 = float2float(sp1_64);
@@ -454,13 +456,15 @@ storeaddr: memalign memoffset is memalign; memoffset; sp2_32 {
 	sp1_64 = int2float(sp1_32);
 }
 :f64.convert_i32_u  is opc=0xB8; sp1_32; sp1_64; ctx_is_directive=0 {
-	sp1_64 = int2float(sp1_32);
+	local tmp:8 = zext(sp1_32);
+	sp1_64 = int2float(tmp);
 }
 :f64.convert_i64_s  is opc=0xB9; sp1_64; ctx_is_directive=0 {
 	sp1_64 = int2float(sp1_64);
 }
 :f64.convert_i64_u  is opc=0xBA; sp1_64; ctx_is_directive=0 {
-	sp1_64 = int2float(sp1_64);
+	local tmp:9 = zext(sp1_64);
+	sp1_64 = int2float(tmp);
 }
 :f64.promote_f32  is opc=0xBB; sp1_32; sp1_64; ctx_is_directive=0 {
 	sp1_64 = float2float(sp1_32);
-- 
2.41.0


From 9010fb97bd4ff551e3cc9c87877d14c9962a409b Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Wed, 29 Mar 2023 20:16:23 -0700
Subject: [PATCH 22/25] WebAssembly: add a SIMD pcodetest.

Similarly to the x86 AVX2 test, this will allow us to do (basic) testing of Wasm
SIMD opcodes via autovectorization. Only the -O3 binary is expected to contain
SIMD opcodes.
---
 .../SleighDevTools/pcodetest/pcode_defs.py    | 11 +++++-
 .../WebAssembly_SIMD_O0_EmulatorTest.java     | 38 +++++++++++++++++++
 .../WebAssembly_SIMD_O3_EmulatorTest.java     | 38 +++++++++++++++++++
 3 files changed, 86 insertions(+), 1 deletion(-)
 create mode 100644 Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WebAssembly_SIMD_O0_EmulatorTest.java
 create mode 100644 Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WebAssembly_SIMD_O3_EmulatorTest.java

diff --git a/Ghidra/Extensions/SleighDevTools/pcodetest/pcode_defs.py b/Ghidra/Extensions/SleighDevTools/pcodetest/pcode_defs.py
index a920772c457a..dac55d6f21cd 100644
--- a/Ghidra/Extensions/SleighDevTools/pcodetest/pcode_defs.py
+++ b/Ghidra/Extensions/SleighDevTools/pcodetest/pcode_defs.py
@@ -669,6 +669,15 @@ PCodeTest({
     'compile_exe': 'bin/clang',
     'toolchain': 'LLVM/llvm',
     'toolchain_type': 'llvm',
-    'ccflags': '-std=c99 --target=wasm32-wasi -Wl,--export-dynamic -Wl,--no-gc-sections -Wl,--no-entry',
+    'ccflags': '-std=c99 --target=wasm32 -Wl,--export-dynamic -Wl,--no-gc-sections -Wl,--no-entry',
+    'language_id': 'Wasm:LE:32:default',
+})
+
+PCodeTest({
+    'name': 'WebAssembly_SIMD',
+    'compile_exe': 'bin/clang',
+    'toolchain': 'LLVM/llvm',
+    'toolchain_type': 'llvm',
+    'ccflags': '-std=c99 --target=wasm32 -msimd128 -Wl,--export-dynamic -Wl,--no-gc-sections -Wl,--no-entry',
     'language_id': 'Wasm:LE:32:default',
 })
diff --git a/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WebAssembly_SIMD_O0_EmulatorTest.java b/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WebAssembly_SIMD_O0_EmulatorTest.java
new file mode 100644
index 000000000000..00c00d3832e9
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WebAssembly_SIMD_O0_EmulatorTest.java
@@ -0,0 +1,38 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.test.processors;
+
+import ghidra.test.processors.support.ProcessorEmulatorTestAdapter;
+import junit.framework.Test;
+
+public class WebAssembly_SIMD_O0_EmulatorTest extends WasmEmulatorTestAdapter {
+
+	private static final String LANGUAGE_ID = "Wasm:LE:32:default";
+	private static final String COMPILER_SPEC_ID = "default";
+
+	public WebAssembly_SIMD_O0_EmulatorTest(String name) throws Exception {
+		super(name, LANGUAGE_ID, COMPILER_SPEC_ID);
+	}
+
+	@Override
+	protected String getProcessorDesignator() {
+		return "WebAssembly_SIMD_LLVM_O0";
+	}
+
+	public static Test suite() {
+		return ProcessorEmulatorTestAdapter.buildEmulatorTestSuite(WebAssembly_SIMD_O0_EmulatorTest.class);
+	}
+}
diff --git a/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WebAssembly_SIMD_O3_EmulatorTest.java b/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WebAssembly_SIMD_O3_EmulatorTest.java
new file mode 100644
index 000000000000..4859c7529712
--- /dev/null
+++ b/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WebAssembly_SIMD_O3_EmulatorTest.java
@@ -0,0 +1,38 @@
+/* ###
+ * IP: GHIDRA
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package ghidra.test.processors;
+
+import ghidra.test.processors.support.ProcessorEmulatorTestAdapter;
+import junit.framework.Test;
+
+public class WebAssembly_SIMD_O3_EmulatorTest extends WasmEmulatorTestAdapter {
+
+	private static final String LANGUAGE_ID = "Wasm:LE:32:default";
+	private static final String COMPILER_SPEC_ID = "default";
+
+	public WebAssembly_SIMD_O3_EmulatorTest(String name) throws Exception {
+		super(name, LANGUAGE_ID, COMPILER_SPEC_ID);
+	}
+
+	@Override
+	protected String getProcessorDesignator() {
+		return "WebAssembly_SIMD_LLVM_O3";
+	}
+
+	public static Test suite() {
+		return ProcessorEmulatorTestAdapter.buildEmulatorTestSuite(WebAssembly_SIMD_O3_EmulatorTest.class);
+	}
+}
-- 
2.41.0


From 91f2c95baa167354cee5929f174129bf35b3a9ad Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Wed, 29 Mar 2023 20:17:57 -0700
Subject: [PATCH 23/25] WebAssembly: Simplify laneidx vector operands.

laneidx is actually just a byte, not a LEB128. Attempting to use 16 arguments in
a pcodeop hits a hardcoded limit of 8 args in PcodeEmit, so switch i8x16.shuffle
to using 4 32-bit arguments instead. This is the same syntax as used by
wasm-objdump by default.
---
 .../WebAssembly/data/languages/VectorOps.sinc | 135 +++++-------------
 1 file changed, 39 insertions(+), 96 deletions(-)

diff --git a/Ghidra/Processors/WebAssembly/data/languages/VectorOps.sinc b/Ghidra/Processors/WebAssembly/data/languages/VectorOps.sinc
index eb5b90848142..fd08beaf0112 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/VectorOps.sinc
+++ b/Ghidra/Processors/WebAssembly/data/languages/VectorOps.sinc
@@ -1,7 +1,18 @@
 # Ghidra only supports scalars up to 64 bits
 define token I128 (64)
-	f128_0 = (0, 63)
-	f128_1 = (0, 63)
+	f128_0 = (0, 63) hex
+	f128_1 = (0, 63) hex
+;
+
+define token laneidx_1 (8)
+    laneidx = (0, 7) dec
+;
+
+define token laneidx_4 (32)
+    laneidx0_3 = (0, 31) hex
+    laneidx4_7 = (0, 31) hex
+    laneidx8_11 = (0, 31) hex
+    laneidx12_15 = (0, 31) hex
 ;
 
 loadaddr2: memalign memoffset is memalign; memoffset; sp2_32 {
@@ -9,74 +20,6 @@ loadaddr2: memalign memoffset is memalign; memoffset; sp2_32 {
 	export addr;
 }
 
-laneidx: ULeb128 is ULeb128 {
-	export ULeb128;
-}
-
-laneidx0: ULeb128 is ULeb128 {
-	export ULeb128;
-}
-
-laneidx1: ULeb128 is ULeb128 {
-	export ULeb128;
-}
-
-laneidx2: ULeb128 is ULeb128 {
-	export ULeb128;
-}
-
-laneidx3: ULeb128 is ULeb128 {
-	export ULeb128;
-}
-
-laneidx4: ULeb128 is ULeb128 {
-	export ULeb128;
-}
-
-laneidx5: ULeb128 is ULeb128 {
-	export ULeb128;
-}
-
-laneidx6: ULeb128 is ULeb128 {
-	export ULeb128;
-}
-
-laneidx7: ULeb128 is ULeb128 {
-	export ULeb128;
-}
-
-laneidx8: ULeb128 is ULeb128 {
-	export ULeb128;
-}
-
-laneidx9: ULeb128 is ULeb128 {
-	export ULeb128;
-}
-
-laneidx10: ULeb128 is ULeb128 {
-	export ULeb128;
-}
-
-laneidx11: ULeb128 is ULeb128 {
-	export ULeb128;
-}
-
-laneidx12: ULeb128 is ULeb128 {
-	export ULeb128;
-}
-
-laneidx13: ULeb128 is ULeb128 {
-	export ULeb128;
-}
-
-laneidx14: ULeb128 is ULeb128 {
-	export ULeb128;
-}
-
-laneidx15: ULeb128 is ULeb128 {
-	export ULeb128;
-}
-
 ## Vector instructions
 # [i32] -> [v128]
 :v128.load loadaddr is opc=0xFD; opc2_0; loadaddr; sp1_128; ctx_is_directive=0 {
@@ -156,8 +99,8 @@ define pcodeop v128_load64_splat;
 
 define pcodeop i8x16_shuffle;
 # [v128 v128] -> [v128]
-:i8x16.shuffle laneidx0 laneidx1 laneidx2 laneidx3 laneidx4 laneidx5 laneidx6 laneidx7 laneidx8 laneidx9 laneidx10 laneidx11 laneidx12 laneidx13 laneidx14 laneidx15 is opc=0xFD; opc2_13; laneidx0; laneidx1; laneidx2; laneidx3; laneidx4; laneidx5; laneidx6; laneidx7; laneidx8; laneidx9; laneidx10; laneidx11; laneidx12; laneidx13; laneidx14; laneidx15; sp1_128; sp2_128; ctx_is_directive=0 {
-    sp2_128 = i8x16_shuffle(laneidx0, laneidx1, laneidx2, laneidx3, laneidx4, laneidx5, laneidx6, laneidx7, laneidx8, laneidx9, laneidx10, laneidx11, laneidx12, laneidx13, laneidx14, laneidx15, sp1_128, sp2_128);
+:i8x16.shuffle laneidx0_3 laneidx4_7 laneidx8_11 laneidx12_15 is opc=0xFD; opc2_13; laneidx0_3; laneidx4_7; laneidx8_11; laneidx12_15; sp1_128; sp2_128; ctx_is_directive=0 {
+    sp2_128 = i8x16_shuffle(laneidx0_3:4, laneidx4_7:4, laneidx8_11:4, laneidx12_15:4, sp1_128, sp2_128);
 }
 
 define pcodeop i8x16_swizzle;
@@ -205,85 +148,85 @@ define pcodeop f64x2_splat;
 define pcodeop i8x16_extract_lane_s;
 # [v128] -> [i32]
 :i8x16.extract_lane_s laneidx is opc=0xFD; opc2_21; laneidx; sp1_128; sp1_32; ctx_is_directive=0 {
-    sp1_32 = i8x16_extract_lane_s(laneidx, sp1_128);
+    sp1_32 = i8x16_extract_lane_s(laneidx:1, sp1_128);
 }
 
 define pcodeop i8x16_extract_lane_u;
 # [v128] -> [i32]
 :i8x16.extract_lane_u laneidx is opc=0xFD; opc2_22; laneidx; sp1_128; sp1_32; ctx_is_directive=0 {
-    sp1_32 = i8x16_extract_lane_u(laneidx, sp1_128);
+    sp1_32 = i8x16_extract_lane_u(laneidx:1, sp1_128);
 }
 
 define pcodeop i8x16_replace_lane;
 # [v128 i32] -> [v128]
 :i8x16.replace_lane laneidx is opc=0xFD; opc2_23; laneidx; sp1_32; sp2_128; ctx_is_directive=0 {
-    sp2_128 = i8x16_replace_lane(laneidx, sp1_32, sp2_128);
+    sp2_128 = i8x16_replace_lane(laneidx:1, sp1_32, sp2_128);
 }
 
 define pcodeop i16x8_extract_lane_s;
 # [v128] -> [i32]
 :i16x8.extract_lane_s laneidx is opc=0xFD; opc2_24; laneidx; sp1_128; sp1_32; ctx_is_directive=0 {
-    sp1_32 = i16x8_extract_lane_s(laneidx, sp1_128);
+    sp1_32 = i16x8_extract_lane_s(laneidx:1, sp1_128);
 }
 
 define pcodeop i16x8_extract_lane_u;
 # [v128] -> [i32]
 :i16x8.extract_lane_u laneidx is opc=0xFD; opc2_25; laneidx; sp1_128; sp1_32; ctx_is_directive=0 {
-    sp1_32 = i16x8_extract_lane_u(laneidx, sp1_128);
+    sp1_32 = i16x8_extract_lane_u(laneidx:1, sp1_128);
 }
 
 define pcodeop i16x8_replace_lane;
 # [v128 i32] -> [v128]
 :i16x8.replace_lane laneidx is opc=0xFD; opc2_26; laneidx; sp1_32; sp2_128; ctx_is_directive=0 {
-    sp2_128 = i16x8_replace_lane(laneidx, sp1_32, sp2_128);
+    sp2_128 = i16x8_replace_lane(laneidx:1, sp1_32, sp2_128);
 }
 
 define pcodeop i32x4_extract_lane;
 # [v128] -> [i32]
 :i32x4.extract_lane laneidx is opc=0xFD; opc2_27; laneidx; sp1_128; sp1_32; ctx_is_directive=0 {
-    sp1_32 = i32x4_extract_lane(laneidx, sp1_128);
+    sp1_32 = i32x4_extract_lane(laneidx:1, sp1_128);
 }
 
 define pcodeop i32x4_replace_lane;
 # [v128 i32] -> [v128]
 :i32x4.replace_lane laneidx is opc=0xFD; opc2_28; laneidx; sp1_32; sp2_128; ctx_is_directive=0 {
-    sp2_128 = i32x4_replace_lane(laneidx, sp1_32, sp2_128);
+    sp2_128 = i32x4_replace_lane(laneidx:1, sp1_32, sp2_128);
 }
 
 define pcodeop i64x2_extract_lane;
 # [v128] -> [i64]
 :i64x2.extract_lane laneidx is opc=0xFD; opc2_29; laneidx; sp1_128; sp1_64; ctx_is_directive=0 {
-    sp1_64 = i64x2_extract_lane(laneidx, sp1_128);
+    sp1_64 = i64x2_extract_lane(laneidx:1, sp1_128);
 }
 
 define pcodeop i64x2_replace_lane;
 # [v128 i64] -> [v128]
 :i64x2.replace_lane laneidx is opc=0xFD; opc2_30; laneidx; sp1_64; sp2_128; ctx_is_directive=0 {
-    sp2_128 = i64x2_replace_lane(laneidx, sp1_64, sp2_128);
+    sp2_128 = i64x2_replace_lane(laneidx:1, sp1_64, sp2_128);
 }
 
 define pcodeop f32x4_extract_lane;
 # [v128] -> [f32]
 :f32x4.extract_lane laneidx is opc=0xFD; opc2_31; laneidx; sp1_128; sp1_32; ctx_is_directive=0 {
-    sp1_32 = f32x4_extract_lane(laneidx, sp1_128);
+    sp1_32 = f32x4_extract_lane(laneidx:1, sp1_128);
 }
 
 define pcodeop f32x4_replace_lane;
 # [v128 f32] -> [v128]
 :f32x4.replace_lane laneidx is opc=0xFD; opc2_32; laneidx; sp1_32; sp2_128; ctx_is_directive=0 {
-    sp2_128 = f32x4_replace_lane(laneidx, sp1_32, sp2_128);
+    sp2_128 = f32x4_replace_lane(laneidx:1, sp1_32, sp2_128);
 }
 
 define pcodeop f64x2_extract_lane;
 # [v128] -> [f64]
 :f64x2.extract_lane laneidx is opc=0xFD; opc2_33; laneidx; sp1_128; sp1_64; ctx_is_directive=0 {
-    sp1_64 = f64x2_extract_lane(laneidx, sp1_128);
+    sp1_64 = f64x2_extract_lane(laneidx:1, sp1_128);
 }
 
 define pcodeop f64x2_replace_lane;
 # [v128 f64] -> [v128]
 :f64x2.replace_lane laneidx is opc=0xFD; opc2_34; laneidx; sp1_64; sp2_128; ctx_is_directive=0 {
-    sp2_128 = f64x2_replace_lane(laneidx, sp1_64, sp2_128);
+    sp2_128 = f64x2_replace_lane(laneidx:1, sp1_64, sp2_128);
 }
 
 define pcodeop i8x16_eq;
@@ -583,61 +526,61 @@ define pcodeop v128_any_true;
 define pcodeop v128_load8_lane;
 # [i32 v128] -> [v128]
 :v128.load8_lane loadaddr2 laneidx is opc=0xFD; opc2_84; loadaddr2; laneidx; sp1_128; sp2_128; ctx_is_directive=0 {
-    sp2_128 = v128_load8_lane(loadaddr2, laneidx, sp1_128);
+    sp2_128 = v128_load8_lane(loadaddr2, laneidx:1, sp1_128);
 }
 
 define pcodeop v128_load16_lane;
 # [i32 v128] -> [v128]
 :v128.load16_lane loadaddr2 laneidx is opc=0xFD; opc2_85; loadaddr2; laneidx; sp1_128; sp2_128; ctx_is_directive=0 {
-    sp2_128 = v128_load16_lane(loadaddr2, laneidx, sp1_128);
+    sp2_128 = v128_load16_lane(loadaddr2, laneidx:1, sp1_128);
 }
 
 define pcodeop v128_load32_lane;
 # [i32 v128] -> [v128]
 :v128.load32_lane loadaddr2 laneidx is opc=0xFD; opc2_86; loadaddr2; laneidx; sp1_128; sp2_128; ctx_is_directive=0 {
-    sp2_128 = v128_load32_lane(loadaddr2, laneidx, sp1_128);
+    sp2_128 = v128_load32_lane(loadaddr2, laneidx:1, sp1_128);
 }
 
 define pcodeop v128_load64_lane;
 # [i32 v128] -> [v128]
 :v128.load64_lane loadaddr2 laneidx is opc=0xFD; opc2_87; loadaddr2; laneidx; sp1_128; sp2_128; ctx_is_directive=0 {
-    sp2_128 = v128_load64_lane(loadaddr2, laneidx, sp1_128);
+    sp2_128 = v128_load64_lane(loadaddr2, laneidx:1, sp1_128);
 }
 
 define pcodeop v128_store8_lane;
 # [i32 v128] -> []
 :v128.store8_lane storeaddr laneidx is opc=0xFD; opc2_88; storeaddr; laneidx; sp1_128; ctx_is_directive=0 {
-    v128_store8_lane(storeaddr, laneidx, sp1_128);
+    v128_store8_lane(storeaddr, laneidx:1, sp1_128);
 }
 
 define pcodeop v128_store16_lane;
 # [i32 v128] -> []
 :v128.store16_lane storeaddr laneidx is opc=0xFD; opc2_89; storeaddr; laneidx; sp1_128; ctx_is_directive=0 {
-    v128_store16_lane(storeaddr, laneidx, sp1_128);
+    v128_store16_lane(storeaddr, laneidx:1, sp1_128);
 }
 
 define pcodeop v128_store32_lane;
 # [i32 v128] -> []
 :v128.store32_lane storeaddr laneidx is opc=0xFD; opc2_90; storeaddr; laneidx; sp1_128; ctx_is_directive=0 {
-    v128_store32_lane(storeaddr, laneidx, sp1_128);
+    v128_store32_lane(storeaddr, laneidx:1, sp1_128);
 }
 
 define pcodeop v128_store64_lane;
 # [i32 v128] -> []
 :v128.store64_lane storeaddr laneidx is opc=0xFD; opc2_91; storeaddr; laneidx; sp1_128; ctx_is_directive=0 {
-    v128_store64_lane(storeaddr, laneidx, sp1_128);
+    v128_store64_lane(storeaddr, laneidx:1, sp1_128);
 }
 
 define pcodeop v128_load32_zero;
 # [i32] -> [v128]
 :v128.load32_zero loadaddr laneidx is opc=0xFD; opc2_92; loadaddr; laneidx; sp1_128; ctx_is_directive=0 {
-    sp1_128 = v128_load32_zero(loadaddr, laneidx);
+    sp1_128 = v128_load32_zero(loadaddr, laneidx:1);
 }
 
 define pcodeop v128_load64_zero;
 # [i32] -> [v128]
 :v128.load64_zero loadaddr laneidx is opc=0xFD; opc2_93; loadaddr; laneidx; sp1_128; ctx_is_directive=0 {
-    sp1_128 = v128_load64_zero(loadaddr, laneidx);
+    sp1_128 = v128_load64_zero(loadaddr, laneidx:1);
 }
 
 define pcodeop f32x4_demote_f64x2_zero;
-- 
2.41.0


From 43475119022739e27ec1dd660dd9ddfd02669008 Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Thu, 30 Mar 2023 00:15:45 -0700
Subject: [PATCH 24/25] WebAssembly: fix load32/load64, simplify some SIMD
 pcode

load32/load64 were incorrectly taking a laneidx, causing disassembly failures.
Also, take this opportunity to implement some of the SIMD operations using
common pcodeops. This will reduce emulation burden, as well as making loads and
stores explicit for dataflow analysis.
---
 .../WebAssembly/data/languages/VectorOps.sinc | 165 +++++++++---------
 .../wasm/analysis/WasmFunctionAnalysis.java   |  31 ++--
 2 files changed, 99 insertions(+), 97 deletions(-)

diff --git a/Ghidra/Processors/WebAssembly/data/languages/VectorOps.sinc b/Ghidra/Processors/WebAssembly/data/languages/VectorOps.sinc
index fd08beaf0112..f87ba860cefe 100644
--- a/Ghidra/Processors/WebAssembly/data/languages/VectorOps.sinc
+++ b/Ghidra/Processors/WebAssembly/data/languages/VectorOps.sinc
@@ -20,70 +20,98 @@ loadaddr2: memalign memoffset is memalign; memoffset; sp2_32 {
 	export addr;
 }
 
+# splatN(value) construct vector by replicating the N-bit value
+define pcodeop splat8;
+define pcodeop splat16;
+define pcodeop splat32;
+define pcodeop splat64;
+# extractN(vector, laneidx) extract a single N-bit lane from the vector
+define pcodeop extract8;
+define pcodeop extract16;
+define pcodeop extract32;
+define pcodeop extract64;
+# replaceN(vector, laneidx, value) replace a single N-bit lane with provided value
+define pcodeop replace8;
+define pcodeop replace16;
+define pcodeop replace32;
+define pcodeop replace64;
+
 ## Vector instructions
 # [i32] -> [v128]
 :v128.load loadaddr is opc=0xFD; opc2_0; loadaddr; sp1_128; ctx_is_directive=0 {
     sp1_128 = *:16 loadaddr;
 }
 
-define pcodeop v128_load8x8_s;
 # [i32] -> [v128]
 :v128.load8x8_s loadaddr is opc=0xFD; opc2_1; loadaddr; sp1_128; ctx_is_directive=0 {
-    sp1_128 = v128_load8x8_s(loadaddr);
+    sp1_128[0,16] = sext(*:1 loadaddr);
+    sp1_128[16,16] = sext(*:1 (loadaddr + 1));
+    sp1_128[32,16] = sext(*:1 (loadaddr + 2));
+    sp1_128[48,16] = sext(*:1 (loadaddr + 3));
+    sp1_128[64,16] = sext(*:1 (loadaddr + 4));
+    sp1_128[80,16] = sext(*:1 (loadaddr + 5));
+    sp1_128[96,16] = sext(*:1 (loadaddr + 6));
+    sp1_128[112,16] = sext(*:1 (loadaddr + 7));
 }
 
-define pcodeop v128_load8x8_u;
 # [i32] -> [v128]
 :v128.load8x8_u loadaddr is opc=0xFD; opc2_2; loadaddr; sp1_128; ctx_is_directive=0 {
-    sp1_128 = v128_load8x8_u(loadaddr);
+    sp1_128[0,16] = zext(*:1 loadaddr);
+    sp1_128[16,16] = zext(*:1 (loadaddr + 1));
+    sp1_128[32,16] = zext(*:1 (loadaddr + 2));
+    sp1_128[48,16] = zext(*:1 (loadaddr + 3));
+    sp1_128[64,16] = zext(*:1 (loadaddr + 4));
+    sp1_128[80,16] = zext(*:1 (loadaddr + 5));
+    sp1_128[96,16] = zext(*:1 (loadaddr + 6));
+    sp1_128[112,16] = zext(*:1 (loadaddr + 7));
 }
 
-define pcodeop v128_load16x4_s;
 # [i32] -> [v128]
 :v128.load16x4_s loadaddr is opc=0xFD; opc2_3; loadaddr; sp1_128; ctx_is_directive=0 {
-    sp1_128 = v128_load16x4_s(loadaddr);
+    sp1_128[0,32] = sext(*:2 loadaddr);
+    sp1_128[32,32] = sext(*:2 (loadaddr + 2));
+    sp1_128[64,32] = sext(*:2 (loadaddr + 4));
+    sp1_128[96,32] = sext(*:2 (loadaddr + 6));
 }
 
-define pcodeop v128_load16x4_u;
 # [i32] -> [v128]
 :v128.load16x4_u loadaddr is opc=0xFD; opc2_4; loadaddr; sp1_128; ctx_is_directive=0 {
-    sp1_128 = v128_load16x4_u(loadaddr);
+    sp1_128[0,32] = zext(*:2 loadaddr);
+    sp1_128[32,32] = zext(*:2 (loadaddr + 2));
+    sp1_128[64,32] = zext(*:2 (loadaddr + 4));
+    sp1_128[96,32] = zext(*:2 (loadaddr + 6));
 }
 
-define pcodeop v128_load32x2_s;
 # [i32] -> [v128]
 :v128.load32x2_s loadaddr is opc=0xFD; opc2_5; loadaddr; sp1_128; ctx_is_directive=0 {
-    sp1_128 = v128_load32x2_s(loadaddr);
+    sp1_128[0,64] = sext(*:4 loadaddr);
+    sp1_128[64,64] = sext(*:4 (loadaddr + 4));
 }
 
-define pcodeop v128_load32x2_u;
 # [i32] -> [v128]
 :v128.load32x2_u loadaddr is opc=0xFD; opc2_6; loadaddr; sp1_128; ctx_is_directive=0 {
-    sp1_128 = v128_load32x2_u(loadaddr);
+    sp1_128[0,64] = zext(*:4 loadaddr);
+    sp1_128[64,64] = zext(*:4 (loadaddr + 4));
 }
 
-define pcodeop v128_load8_splat;
 # [i32] -> [v128]
 :v128.load8_splat loadaddr is opc=0xFD; opc2_7; loadaddr; sp1_128; ctx_is_directive=0 {
-    sp1_128 = v128_load8_splat(loadaddr);
+    sp1_128 = splat8(*:1 loadaddr);
 }
 
-define pcodeop v128_load16_splat;
 # [i32] -> [v128]
 :v128.load16_splat loadaddr is opc=0xFD; opc2_8; loadaddr; sp1_128; ctx_is_directive=0 {
-    sp1_128 = v128_load16_splat(loadaddr);
+    sp1_128 = splat16(*:2 loadaddr);
 }
 
-define pcodeop v128_load32_splat;
 # [i32] -> [v128]
 :v128.load32_splat loadaddr is opc=0xFD; opc2_9; loadaddr; sp1_128; ctx_is_directive=0 {
-    sp1_128 = v128_load32_splat(loadaddr);
+    sp1_128 = splat32(*:4 loadaddr);
 }
 
-define pcodeop v128_load64_splat;
 # [i32] -> [v128]
 :v128.load64_splat loadaddr is opc=0xFD; opc2_10; loadaddr; sp1_128; ctx_is_directive=0 {
-    sp1_128 = v128_load64_splat(loadaddr);
+    sp1_128 = splat64(*:8 loadaddr);
 }
 
 # [i32 v128] -> []
@@ -109,124 +137,108 @@ define pcodeop i8x16_swizzle;
     sp2_128 = i8x16_swizzle(sp1_128, sp2_128);
 }
 
-define pcodeop i8x16_splat;
 # [i32] -> [v128]
 :i8x16.splat is opc=0xFD; opc2_15; sp1_128; sp1_32; ctx_is_directive=0 {
-    sp1_128 = i8x16_splat(sp1_32);
+    sp1_128 = splat8(sp1_32:1);
 }
 
-define pcodeop i16x8_splat;
 # [i32] -> [v128]
 :i16x8.splat is opc=0xFD; opc2_16; sp1_128; sp1_32; ctx_is_directive=0 {
-    sp1_128 = i16x8_splat(sp1_32);
+    sp1_128 = splat16(sp1_32:2);
 }
 
-define pcodeop i32x4_splat;
 # [i32] -> [v128]
 :i32x4.splat is opc=0xFD; opc2_17; sp1_128; sp1_32; ctx_is_directive=0 {
-    sp1_128 = i32x4_splat(sp1_32);
+    sp1_128 = splat32(sp1_32:4);
 }
 
-define pcodeop i64x2_splat;
 # [i64] -> [v128]
 :i64x2.splat is opc=0xFD; opc2_18; sp1_128; sp1_64; ctx_is_directive=0 {
-    sp1_128 = i64x2_splat(sp1_64);
+    sp1_128 = splat64(sp1_64:8);
 }
 
-define pcodeop f32x4_splat;
 # [f32] -> [v128]
 :f32x4.splat is opc=0xFD; opc2_19; sp1_128; sp1_32; ctx_is_directive=0 {
-    sp1_128 = f32x4_splat(sp1_32);
+    sp1_128 = splat32(sp1_32:4);
 }
 
-define pcodeop f64x2_splat;
 # [f64] -> [v128]
 :f64x2.splat is opc=0xFD; opc2_20; sp1_128; sp1_64; ctx_is_directive=0 {
-    sp1_128 = f64x2_splat(sp1_64);
+    sp1_128 = splat64(sp1_64:8);
 }
 
-define pcodeop i8x16_extract_lane_s;
 # [v128] -> [i32]
 :i8x16.extract_lane_s laneidx is opc=0xFD; opc2_21; laneidx; sp1_128; sp1_32; ctx_is_directive=0 {
-    sp1_32 = i8x16_extract_lane_s(laneidx:1, sp1_128);
+    local tmp:1 = extract8(sp1_128, laneidx:1);
+    sp1_32 = sext(tmp);
 }
 
-define pcodeop i8x16_extract_lane_u;
 # [v128] -> [i32]
 :i8x16.extract_lane_u laneidx is opc=0xFD; opc2_22; laneidx; sp1_128; sp1_32; ctx_is_directive=0 {
-    sp1_32 = i8x16_extract_lane_u(laneidx:1, sp1_128);
+    local tmp:1 = extract8(sp1_128, laneidx:1);
+    sp1_32 = zext(tmp);
 }
 
-define pcodeop i8x16_replace_lane;
 # [v128 i32] -> [v128]
 :i8x16.replace_lane laneidx is opc=0xFD; opc2_23; laneidx; sp1_32; sp2_128; ctx_is_directive=0 {
-    sp2_128 = i8x16_replace_lane(laneidx:1, sp1_32, sp2_128);
+    sp2_128 = replace8(sp2_128, laneidx:1, sp1_32:1);
 }
 
-define pcodeop i16x8_extract_lane_s;
 # [v128] -> [i32]
 :i16x8.extract_lane_s laneidx is opc=0xFD; opc2_24; laneidx; sp1_128; sp1_32; ctx_is_directive=0 {
-    sp1_32 = i16x8_extract_lane_s(laneidx:1, sp1_128);
+    local tmp:2 = extract16(sp1_128, laneidx:1);
+    sp1_32 = sext(tmp);
 }
 
-define pcodeop i16x8_extract_lane_u;
 # [v128] -> [i32]
 :i16x8.extract_lane_u laneidx is opc=0xFD; opc2_25; laneidx; sp1_128; sp1_32; ctx_is_directive=0 {
-    sp1_32 = i16x8_extract_lane_u(laneidx:1, sp1_128);
+    local tmp:2 = extract16(sp1_128, laneidx:1);
+    sp1_32 = zext(tmp);
 }
 
-define pcodeop i16x8_replace_lane;
 # [v128 i32] -> [v128]
 :i16x8.replace_lane laneidx is opc=0xFD; opc2_26; laneidx; sp1_32; sp2_128; ctx_is_directive=0 {
-    sp2_128 = i16x8_replace_lane(laneidx:1, sp1_32, sp2_128);
+    sp2_128 = replace16(sp2_128, laneidx:1, sp1_32:2);
 }
 
-define pcodeop i32x4_extract_lane;
 # [v128] -> [i32]
 :i32x4.extract_lane laneidx is opc=0xFD; opc2_27; laneidx; sp1_128; sp1_32; ctx_is_directive=0 {
-    sp1_32 = i32x4_extract_lane(laneidx:1, sp1_128);
+    sp1_32 = extract32(sp1_128, laneidx:1);
 }
 
-define pcodeop i32x4_replace_lane;
 # [v128 i32] -> [v128]
 :i32x4.replace_lane laneidx is opc=0xFD; opc2_28; laneidx; sp1_32; sp2_128; ctx_is_directive=0 {
-    sp2_128 = i32x4_replace_lane(laneidx:1, sp1_32, sp2_128);
+    sp2_128 = replace32(sp2_128, laneidx:1, sp1_32);
 }
 
-define pcodeop i64x2_extract_lane;
 # [v128] -> [i64]
 :i64x2.extract_lane laneidx is opc=0xFD; opc2_29; laneidx; sp1_128; sp1_64; ctx_is_directive=0 {
-    sp1_64 = i64x2_extract_lane(laneidx:1, sp1_128);
+    sp1_64 = extract64(sp1_128, laneidx:1);
 }
 
-define pcodeop i64x2_replace_lane;
 # [v128 i64] -> [v128]
 :i64x2.replace_lane laneidx is opc=0xFD; opc2_30; laneidx; sp1_64; sp2_128; ctx_is_directive=0 {
-    sp2_128 = i64x2_replace_lane(laneidx:1, sp1_64, sp2_128);
+    sp2_128 = replace64(sp2_128, laneidx:1, sp1_64);
 }
 
-define pcodeop f32x4_extract_lane;
 # [v128] -> [f32]
 :f32x4.extract_lane laneidx is opc=0xFD; opc2_31; laneidx; sp1_128; sp1_32; ctx_is_directive=0 {
-    sp1_32 = f32x4_extract_lane(laneidx:1, sp1_128);
+    sp1_32 = extract32(sp1_128, laneidx:1);
 }
 
-define pcodeop f32x4_replace_lane;
 # [v128 f32] -> [v128]
 :f32x4.replace_lane laneidx is opc=0xFD; opc2_32; laneidx; sp1_32; sp2_128; ctx_is_directive=0 {
-    sp2_128 = f32x4_replace_lane(laneidx:1, sp1_32, sp2_128);
+    sp2_128 = replace32(sp2_128, laneidx:1, sp1_32);
 }
 
-define pcodeop f64x2_extract_lane;
 # [v128] -> [f64]
 :f64x2.extract_lane laneidx is opc=0xFD; opc2_33; laneidx; sp1_128; sp1_64; ctx_is_directive=0 {
-    sp1_64 = f64x2_extract_lane(laneidx:1, sp1_128);
+    sp1_64 = extract64(sp1_128, laneidx:1);
 }
 
-define pcodeop f64x2_replace_lane;
 # [v128 f64] -> [v128]
 :f64x2.replace_lane laneidx is opc=0xFD; opc2_34; laneidx; sp1_64; sp2_128; ctx_is_directive=0 {
-    sp2_128 = f64x2_replace_lane(laneidx:1, sp1_64, sp2_128);
+    sp2_128 = replace64(sp2_128, laneidx:1, sp1_64);
 }
 
 define pcodeop i8x16_eq;
@@ -523,64 +535,55 @@ define pcodeop v128_any_true;
     sp1_32 = v128_any_true(sp1_128);
 }
 
-define pcodeop v128_load8_lane;
 # [i32 v128] -> [v128]
 :v128.load8_lane loadaddr2 laneidx is opc=0xFD; opc2_84; loadaddr2; laneidx; sp1_128; sp2_128; ctx_is_directive=0 {
-    sp2_128 = v128_load8_lane(loadaddr2, laneidx:1, sp1_128);
+    sp2_128 = replace8(sp1_128, laneidx:1, *:1 loadaddr2);
 }
 
 define pcodeop v128_load16_lane;
 # [i32 v128] -> [v128]
 :v128.load16_lane loadaddr2 laneidx is opc=0xFD; opc2_85; loadaddr2; laneidx; sp1_128; sp2_128; ctx_is_directive=0 {
-    sp2_128 = v128_load16_lane(loadaddr2, laneidx:1, sp1_128);
+    sp2_128 = replace16(sp1_128, laneidx:1, *:2 loadaddr2);
 }
 
-define pcodeop v128_load32_lane;
 # [i32 v128] -> [v128]
 :v128.load32_lane loadaddr2 laneidx is opc=0xFD; opc2_86; loadaddr2; laneidx; sp1_128; sp2_128; ctx_is_directive=0 {
-    sp2_128 = v128_load32_lane(loadaddr2, laneidx:1, sp1_128);
+    sp2_128 = replace32(sp1_128, laneidx:1, *:4 loadaddr2);
 }
 
-define pcodeop v128_load64_lane;
 # [i32 v128] -> [v128]
 :v128.load64_lane loadaddr2 laneidx is opc=0xFD; opc2_87; loadaddr2; laneidx; sp1_128; sp2_128; ctx_is_directive=0 {
-    sp2_128 = v128_load64_lane(loadaddr2, laneidx:1, sp1_128);
+    sp2_128 = replace64(sp1_128, laneidx:1, *:8 loadaddr2);
 }
 
-define pcodeop v128_store8_lane;
 # [i32 v128] -> []
 :v128.store8_lane storeaddr laneidx is opc=0xFD; opc2_88; storeaddr; laneidx; sp1_128; ctx_is_directive=0 {
-    v128_store8_lane(storeaddr, laneidx:1, sp1_128);
+    *:1 storeaddr = extract8(sp1_128, laneidx:1);
 }
 
-define pcodeop v128_store16_lane;
 # [i32 v128] -> []
 :v128.store16_lane storeaddr laneidx is opc=0xFD; opc2_89; storeaddr; laneidx; sp1_128; ctx_is_directive=0 {
-    v128_store16_lane(storeaddr, laneidx:1, sp1_128);
+    *:2 storeaddr = extract16(sp1_128, laneidx:1);
 }
 
-define pcodeop v128_store32_lane;
 # [i32 v128] -> []
 :v128.store32_lane storeaddr laneidx is opc=0xFD; opc2_90; storeaddr; laneidx; sp1_128; ctx_is_directive=0 {
-    v128_store32_lane(storeaddr, laneidx:1, sp1_128);
+    *:4 storeaddr = extract32(sp1_128, laneidx:1);
 }
 
-define pcodeop v128_store64_lane;
 # [i32 v128] -> []
 :v128.store64_lane storeaddr laneidx is opc=0xFD; opc2_91; storeaddr; laneidx; sp1_128; ctx_is_directive=0 {
-    v128_store64_lane(storeaddr, laneidx:1, sp1_128);
+    *:8 storeaddr = extract64(sp1_128, laneidx:1);
 }
 
-define pcodeop v128_load32_zero;
 # [i32] -> [v128]
-:v128.load32_zero loadaddr laneidx is opc=0xFD; opc2_92; loadaddr; laneidx; sp1_128; ctx_is_directive=0 {
-    sp1_128 = v128_load32_zero(loadaddr, laneidx:1);
+:v128.load32_zero loadaddr is opc=0xFD; opc2_92; loadaddr; sp1_128; ctx_is_directive=0 {
+    sp1_128 = zext(*:4 loadaddr);
 }
 
-define pcodeop v128_load64_zero;
 # [i32] -> [v128]
-:v128.load64_zero loadaddr laneidx is opc=0xFD; opc2_93; loadaddr; laneidx; sp1_128; ctx_is_directive=0 {
-    sp1_128 = v128_load64_zero(loadaddr, laneidx:1);
+:v128.load64_zero loadaddr is opc=0xFD; opc2_93; loadaddr; sp1_128; ctx_is_directive=0 {
+    sp1_128 = zext(*:8 loadaddr);
 }
 
 define pcodeop f32x4_demote_f64x2_zero;
diff --git a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
index 10411e996051..55b5c1eae440 100644
--- a/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
+++ b/Ghidra/Processors/WebAssembly/src/main/java/wasm/analysis/WasmFunctionAnalysis.java
@@ -1071,7 +1071,7 @@ public class WasmFunctionAnalysis {
 				break;
 			case 0xD: /* i8x16.shuffle */
 				for (int i = 0; i < 16; i++)
-					readLeb128(reader); /* laneidx16 */
+					reader.readNextByte(); /* laneidx16 */
 				binaryOp(instAddress, ValType.v128, ValType.v128);
 				break;
 			case 0xE: /* i8x16.swizzle */
@@ -1093,62 +1093,62 @@ public class WasmFunctionAnalysis {
 				break;
 			case 0x15: /* i8x16.extract_lane_s */
 			case 0x16: /* i8x16.extract_lane_u */
-				readLeb128(reader); /* laneidx */
+				reader.readNextByte(); /* laneidx */
 				unaryOp(instAddress, ValType.v128, ValType.i32);
 				break;
 			case 0x17: /* i8x16.replace_lane */
-				readLeb128(reader); /* laneidx */
+				reader.readNextByte(); /* laneidx */
 				popValue(instAddress, ValType.i32);
 				popValue(instAddress, ValType.v128);
 				pushValue(instAddress, ValType.v128);
 				break;
 			case 0x18: /* i16x8.extract_lane_s */
 			case 0x19: /* i16x8.extract_lane_u */
-				readLeb128(reader); /* laneidx */
+				reader.readNextByte(); /* laneidx */
 				unaryOp(instAddress, ValType.v128, ValType.i32);
 				break;
 			case 0x1A: /* i16x8.replace_lane */
-				readLeb128(reader); /* laneidx */
+				reader.readNextByte(); /* laneidx */
 				popValue(instAddress, ValType.i32);
 				popValue(instAddress, ValType.v128);
 				pushValue(instAddress, ValType.v128);
 				break;
 			case 0x1B: /* i32x4.extract_lane */
-				readLeb128(reader); /* laneidx */
+				reader.readNextByte(); /* laneidx */
 				unaryOp(instAddress, ValType.v128, ValType.i32);
 				break;
 			case 0x1C: /* i32x4.replace_lane */
-				readLeb128(reader); /* laneidx */
+				reader.readNextByte(); /* laneidx */
 				popValue(instAddress, ValType.i32);
 				popValue(instAddress, ValType.v128);
 				pushValue(instAddress, ValType.v128);
 				break;
 			case 0x1D: /* i64x2.extract_lane */
-				readLeb128(reader); /* laneidx */
+				reader.readNextByte(); /* laneidx */
 				unaryOp(instAddress, ValType.v128, ValType.i64);
 				break;
 			case 0x1E: /* i64x2.replace_lane */
-				readLeb128(reader); /* laneidx */
+				reader.readNextByte(); /* laneidx */
 				popValue(instAddress, ValType.i64);
 				popValue(instAddress, ValType.v128);
 				pushValue(instAddress, ValType.v128);
 				break;
 			case 0x1F: /* f32x4.extract_lane */
-				readLeb128(reader); /* laneidx */
+				reader.readNextByte(); /* laneidx */
 				unaryOp(instAddress, ValType.v128, ValType.f32);
 				break;
 			case 0x20: /* f32x4.replace_lane */
-				readLeb128(reader); /* laneidx */
+				reader.readNextByte(); /* laneidx */
 				popValue(instAddress, ValType.f32);
 				popValue(instAddress, ValType.v128);
 				pushValue(instAddress, ValType.v128);
 				break;
 			case 0x21: /* f64x2.extract_lane */
-				readLeb128(reader); /* laneidx */
+				reader.readNextByte(); /* laneidx */
 				unaryOp(instAddress, ValType.v128, ValType.f64);
 				break;
 			case 0x22: /* f64x2.replace_lane */
-				readLeb128(reader); /* laneidx */
+				reader.readNextByte(); /* laneidx */
 				popValue(instAddress, ValType.f64);
 				popValue(instAddress, ValType.v128);
 				pushValue(instAddress, ValType.v128);
@@ -1221,7 +1221,7 @@ public class WasmFunctionAnalysis {
 			case 0x57: /* v128.load64_lane */
 				readLeb128(reader); /* align */
 				readLeb128(reader); /* offset */
-				readLeb128(reader); /* laneidx */
+				reader.readNextByte(); /* laneidx */
 				popValue(instAddress, ValType.v128);
 				popValue(instAddress, ValType.i32);
 				pushValue(instAddress, ValType.v128);
@@ -1232,7 +1232,7 @@ public class WasmFunctionAnalysis {
 			case 0x5B: /* v128.store64_lane */
 				readLeb128(reader); /* align */
 				readLeb128(reader); /* offset */
-				readLeb128(reader); /* laneidx */
+				reader.readNextByte(); /* laneidx */
 				popValue(instAddress, ValType.v128);
 				popValue(instAddress, ValType.i32);
 				break;
@@ -1240,7 +1240,6 @@ public class WasmFunctionAnalysis {
 			case 0x5D: /* v128.load64_zero */
 				readLeb128(reader); /* align */
 				readLeb128(reader); /* offset */
-				readLeb128(reader); /* laneidx */
 				popValue(instAddress, ValType.i32);
 				pushValue(instAddress, ValType.v128);
 				break;
-- 
2.41.0


From 91f7c038d368ea5974c9285a184e6063f80d414e Mon Sep 17 00:00:00 2001
From: Robert Xiao <brx@cs.ubc.ca>
Date: Mon, 17 Apr 2023 09:34:46 -0700
Subject: [PATCH 25/25] WebAssembly: minor updates to sync to master

---
 .../java/ghidra/test/processors/WasmEmulatorTestAdapter.java  | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WasmEmulatorTestAdapter.java b/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WasmEmulatorTestAdapter.java
index 4be63f82241a..ade95c825cee 100644
--- a/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WasmEmulatorTestAdapter.java
+++ b/Ghidra/Processors/WebAssembly/src/test.processors/java/ghidra/test/processors/WasmEmulatorTestAdapter.java
@@ -29,7 +29,7 @@ import ghidra.test.processors.support.PCodeTestControlBlock;
 import ghidra.test.processors.support.ProcessorEmulatorTestAdapter;
 import ghidra.util.task.TaskMonitor;
 
-public class WasmEmulatorTestAdapter extends ProcessorEmulatorTestAdapter {
+public abstract class WasmEmulatorTestAdapter extends ProcessorEmulatorTestAdapter {
 
 	private static final String[] REG_DUMP_SET = new String[] {};
 	private static final byte[] MAIN_CONTROL_BLOCK_MAGIC = "AbCdEFgH".getBytes();
@@ -128,7 +128,7 @@ public class WasmEmulatorTestAdapter extends ProcessorEmulatorTestAdapter {
 
 		/* Run analysis now so that all the code segments are properly defined */
 		setAnalysisOptions(program.getOptions(Program.ANALYSIS_PROPERTIES));
-		GhidraProgramUtilities.setAnalyzedFlag(program, true);
+		GhidraProgramUtilities.markProgramAnalyzed(program);
 		AutoAnalysisManager analysisMgr = AutoAnalysisManager.getAnalysisManager(program);
 		analysisMgr.cancelQueuedTasks(); // GhidraProject import utility jumped the gun with analysis initialization
 		analysisMgr.initializeOptions();
-- 
2.41.0

